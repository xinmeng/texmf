Automatically generated by Mendeley 1.7
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Yager1985,
author = {Yager, R R},
journal = {Information sciences},
number = {1-2},
pages = {179--206},
title = {{Aggregating evidence using quantified statements}},
volume = {36},
year = {1985}
}
@inproceedings{Kirchsteiger2008,
abstract = {A challenge in the design space exploration of todays' multimedia system-on-chip (SoC) designs is to rapidly evaluate the large number of different processor types. This limitation is resolved by our methodology, originated from the SIMBA1 project. It automatically generates a Sys- temC performance model of the software code with respect to the chosen processor type. The generated performance model consists of the original software C-code annotated with SystemC wait statements to consider the execution time on the target processor. These wait statements are automatically determined by the target cross-compiler's assembler code and the processor datasheet and consider also memory accesses and pipeline effects. In our experiments we automatically generate both a performance model of an ARM and a TI processor. This only requires the target cross-compiler and the processor datasheet and is widely applicable to various processor types. We show that our models can be used easily to compare the software performance on these platforms. We also demonstrate that the models can be smoothly integrated into an existing multimedia SoC for a rapid software-driven architecture exploration.},
author = {Kirchsteiger, C M and Schweitzer, H and Trummer, C and Steger, C and Weiss, R and Pistauer, M},
booktitle = {Embedded Systems for Real-Time Multimedia, 2008. ESTImedia 2008. IEEE/ACM/IFIP Workshop on},
keywords = {ARM7,C language,SystemC performance model,TI MSP430,TI processor,automatically generated software performance model,memory accesses,microprocessor chips,multimedia system-on-chips,multimedia systems,pipeline,pipeline processing,processor datasheet,program compilers,smart card,smart cards,software C-code,software performance evaluation,system-on-chip,target cross-compiler's assembler code},
pages = {19--24},
title = {{Rapid exploration of multimedia system-on-chips with automatically generated software performance models}},
year = {2008}
}
@inproceedings{Falbo2002,
annote = {inproceedings
Xin Meng},
author = {Falbo, R A and Guizzardi, G and Duarte, K C},
booktitle = {Proceedings of the 14th International Conference on Software Engineering and Knowledge Engineering (SEKE'02)},
keywords = {Falbo2002},
mendeley-tags = {Falbo2002},
pages = {351--358},
publisher = {ACM},
title = {{An ontological approach to domain engineering}},
year = {2002}
}
@article{Zadeh1988,
author = {Zadeh, L A},
journal = {Computer},
number = {4},
pages = {83--93},
title = {{Fuzzy logic}},
volume = {21},
year = {1988}
}
@book{Lippman2002,
address = {北京},
annote = {12
inbook
Xin Meng},
author = {Lippman, Stanley B and Lajoie, Jos\'{e}e},
keywords = {Lippman2002},
mendeley-tags = {Lippman2002},
pages = {471},
publisher = {中国电力出版社},
title = {{C++ Primer (Chinese Edition)}},
year = {2002}
}
@book{Keating1998,
address = {New York},
author = {Keating, Michael and Bricaud, Pierre},
publisher = {Springer},
title = {{Reuse Methodology Manual for System-On-A-Chip Designs}},
year = {1998}
}
@article{Nicola2000,
abstract = {The paper surveys performance models for distributed and replicated database systems. Over the last 20 years (1980-2000), a variety of such performance models have been developed and they differ in: (1) which aspects of a real system are or are not captured in the model (e.g., replication, communication, nonuniform data access, etc.); and (2) how these aspects are modeled. We classify the different alternatives and modeling assumptions and discuss their interdependencies and expressiveness for the representation of distributed databases. This leads to a set of building blocks for analytical performance models. To illustrate the work that is surveyed, we select a combination of these proven modeling concepts and give an example of how to compose a balanced analytical model of a replicated database. We use this example to show how to derive meaningful performance values and to discuss the applicability and expressiveness of performance models for distributed and replicated databases. Finally, we compare the analytical results to measurements in a distributed database system},
author = {Nicola, M and Jarke, M},
isbn = {1041-4347},
journal = {IEEE Transactions on Knowledge and Data Engineering},
keywords = {analytical performance models,balanced analytical model,bibliographies,building blocks,distributed databases,meaningful performance values,modeling assumptions,nonuniform data access,performance modeling,performance models,proven modeling concepts,queueing theory,real system,replicated databases,software performance evaluation,transaction processing},
number = {4},
pages = {645--672},
title = {{Performance modeling of distributed and replicated databases}},
volume = {12},
year = {2000}
}
@misc{GNU2009,
author = {GNU},
title = {{GCC-The GNU Compiler Collection}},
url = {http://gcc.gnu.org/},
year = {2009}
}
@article{Rich2003,
abstract = {The SystemVerilog hardware description language (HDL) is a recent standardization effort by Accellera to ensure that Verilog HDL keeps up with the increases in complexity of today's design and verification challenges. A key element of Accellera's strategy is to use proven technologies that have already been implemented as a basis for standardization.},
annote = {Rich2003.The evolution of systemverilog.pdf
article
Xin Meng
Software engineering
SystemVerilog;Verilog hardware description language;Lanaguage reference manual;},
author = {Rich, David I},
isbn = {0740-7475},
journal = {IEEE Design and Test of Computers},
keywords = {C (programming language),Computational complexity,Computer hardware description languages,Formal languages,Program compilers,Rich2003,Semantics,Standardization},
mendeley-tags = {Rich2003},
number = {4},
pages = {82--84},
title = {{The evolution of SystemVerilog}},
volume = {20},
year = {2003}
}
@inproceedings{Davis1995,
abstract = {This paper describes research leading to the generation of a preprocessor for the Verilog hardware description language. The function of this preprocessor is to support repeated feature instances in a Verilog description for a digital system. Repeated features most commonly occur in the description of datapaths, where iterative structures like adders, multipliers and muxes are the basic building blocks. Citations from Verilog users and industry organizations in support of inclusion of a repeated feature syntax are given. Several syntaxes for describing repeated features are presented. From these proposals, a single syntax for support of repeated feature instances is selected. A preprocessor is described that will parse the extended Verilog and translate it to supported Verilog. The challenges in the generation of the preprocessor are given. The paper concludes with a status report on the preprocessor and thoughts for future development.},
address = {Santa Clara, CA, USA},
annote = {Davis1995.A Verilog preprocessor for representing datapath components.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog preprocessor;Iterative structures;Muxes;Syntax;Datapaths;Gateway design systems;Very high speed integrated circuits;},
author = {Davis, Brian T and Mudge, Trevor},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Ada (programming language),Adders,C (programming language),Computer aided design,Computer systems,Davis1995,Digital computers,Integrated circuits,vpp},
mendeley-tags = {Davis1995},
pages = {90--98},
publisher = {IEEE},
title = {{A Verilog preprocessor for representing datapath components}},
year = {1995}
}
@inproceedings{Greaves2000,
abstract = {This paper describes a compiler which converts from Verilog to C. The output is then compiled to machine native code and tends to execute faster than native mode Verilog simulation because the compiler preserves only the synthesis semantics, not the simulation semantics, of Verilog and also performs logic minimization. Busses of up to 32 or 64 bits can be modelled as C integers whereas larger busses are automatically split. We describe the motivation, method and quality of the results.},
address = {Paris, France},
annote = {Greaves2000-verilog\_to\_c\_compiler.pdf
inproceedings
Xin Meng
Program compilers
Verilog programming language;},
author = {Greaves, D J},
booktitle = {Proceedings of the International Workshop on Rapid System Prototyping},
keywords = {C (programming language),Codes (symbols),Computational linguistics,Computer simulation,EI,Formal logic,Greaves2000},
mendeley-tags = {Greaves2000},
pages = {122--127},
title = {{Verilog to C compiler}},
year = {2000}
}
@inproceedings{1789989,
abstract = {there are several modules with similar structures in a SoC product line. Their contents change a lot in different product and are hard to reuse across projects, which makes similar module design occupy huge resources as brand new one. This paper proposes a methodology to abstract well-verified structures to basic functional building blocks and save them into a library by defining XML Schema. Designers create similar designs using basic building blocks in library at functional level. XML Schema validator carefully checks the structure and constraints of design to eliminate structure errors. XSLT rules translate designs into different file formats to facilitate existing EDA environment seamlessly. As a case study, this methodology was used in design of configuration register module of several SoC chip projects and was proven helpful to quick design creation, safe structure reuse, quality guarantee, and significant engineering efforts reduction.},
address = {Piscataway, NJ, USA},
author = {Meng, Xin and Shen, Haibin},
booktitle = {ISCIT'09: Proceedings of the 9th international conference on Communications and information technologies},
doi = {10.1109/ISCIT.2009.5341270},
isbn = {978-1-4244-4521-9},
pages = {146--150},
publisher = {IEEE Press},
title = {{Structure reuse methodology based on XML Schema for functional level design: a case study in configuration register module}},
year = {2009}
}
@inproceedings{James1999,
abstract = {Verischemelog (pronounced with 5 syllables, veruh-scheme-uh-log) is a language and programming environment embedded in Scheme for designing digital electronic hardware systems and for controlling the simulation of these circuits. Simulation is performed by a separate program, often a commercial product. Verischemelog compiles to Verilog, an industry standard language accepted by several commercial and public domain simulators.Because many design elements are easily parameterized, design engineers currently write scripts which generate hardware description code in Verilog. These scripts work by textual substitution, and are typically ad-hoc and quite limited. Preprocessors for Verilog, on the other hand, are hampered by their macro-expansion languages, which support few data types and lack procedures. Verischemelog obviates the need for scripts and preprocessors by providing a hardware description language with list-based syntax, and Scheme to manipulate it.An interactive development environment gives early and specific feedback about errors, and structured access to the compiler and run-time environment provide a high degree of reconfigurability and extensibility of Verischemelog.},
address = {Austin},
annote = {James1999.verilog\_embedded\_into\_scheme.pdf
inproceedings
xin\_meng},
author = {James, Jennings and Eric, Beuscher},
booktitle = {Proceedings of 2nd conference on Domain-specific languages},
keywords = {James1999},
mendeley-tags = {James1999},
pages = {123--134},
publisher = {ACM New York},
title = {{Verischemelog: Verilog embedded in Scheme}},
year = {1999}
}
@misc{Nicolescu2002,
abstract = {Currently, since many SoCs include heterogeneous components such as CPUs, DSPs, ASICs, memories, buses, etc., system integration becomes a major step in the design flow. To enable this integration, we use a design approach called component based-design approach. In this approach, the validation of system integration takes most of design efforts. This paper presents an automatic method of SoCs design validation. Based on a generic simulation wrapper architecture, the presented method provides automatic generation of executable models throughout different stages of SoC design flow. A case study of validating a VDSL application shows the effectiveness of the method.},
address = {Kyoto, Japan},
annote = {581236
162-167},
author = {Nicolescu, Gabriela and Yoo, Sungjoo and Bouchhima, Aimen and Jerraya, Ahmed Amine},
booktitle = {Proceedings of the 15th international symposium on System Synthesis},
doi = {http://doi.acm.org/10.1145/581199.581236},
publisher = {ACM},
title = {{Validation in a component-based design flow for multicore SoCs}},
year = {2002}
}
@conference{wang2008analytical,
author = {Wang, M and Liu, L and Xu, W and Xu, L},
booktitle = {Networking, Architecture, and Storage, 2008. NAS'08. International Conference on},
organization = {IEEE},
pages = {255--262},
title = {{An Analytical Performance Model of IP-SAN}},
year = {2008}
}
@inproceedings{Schneider2002,
annote = {AUI},
author = {Schneider, K A and Cordy, J R},
booktitle = {Proceedings of the 35th Annual Hawaii International Conference on System Sciences, 2002. HICSS. },
pages = {3656--3665},
title = {{AUI: A programming language for developing plastic interactive software}},
year = {2002}
}
@inproceedings{Sait2001,
annote = {文中提到的SimulatedEvolution算法是把一个布局的解看成由多个可移动单元（MovableElement）组成的集合，每个ME单独可移动且对应一个评价函数G。算法主循环包括Eveluation，Selection，和Allocation三步组成。在Eveluation阶段，计算每个ME对应的G；在Selection阶段，从所有ME中选出那些G值比较低的ME并构造一个子集记为S，期间涉及一个Bias值，作为对G值的补偿（Random > Min(G+B, 1) )；不过一个常数的补偿能有多大作用呢？，在Allocation阶段，通过交换S中ME的位置，调整布局，试图找出更好解。},
author = {Sait, S M and Youssef, H and Khan, J A},
booktitle = {Genetic and Evolutionary Computer Conference 2001, GECCO-2001},
title = {{Fuzzy evolutionary algorithm for VLSI placement}},
year = {2001}
}
@misc{OSCI2009a,
author = {OSCI},
title = {{Open SystemC Initiative}},
url = {http://www.systemc.org},
year = {2009}
}
@article{Rinker2001,
abstract = {We describe a system, developed as part of the Cameron project, which compiles programs written in a single-assignment subset of C called SA-C into dataflow graphs and then into VHDL. The primary application domain is image processing. The system consists of an optimizing compiler which produces dataflow graph to VHDL translator. The method used for the translation is described here, along with some results on an application. The objective is not to produce yet another design entry tool, but rather to shift the programming paradigm from HDLs to an algorithmic level, thereby extending the realm of hardware design to the application programmer.},
annote = {Rinker2001.An automated process for compiling dataflow graphs into reconfigurable hardware.pdf
article
Xin Meng
Data flow analysis
Dataflow graphs;Reconfigurable hardware;Single Assignment C;Very high description languages;},
author = {Rinker, R and Carter, M and Patel, A and Chawathe, M and Ross, C and Hammes, J and Najjar, W A and Bohm, W},
isbn = {1063-8210},
journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
keywords = {Algorithms,Computer hardware,Computer hardware description languages,Image processing,Program compilers,Rinker2001},
mendeley-tags = {Rinker2001},
number = {1},
pages = {130--139},
title = {{An automated process for compiling dataflow graphics into reconfigurable hardware}},
volume = {9},
year = {2001}
}
@inproceedings{Wang1998,
abstract = {The ability to analyze a finite state machine (fsm) has always been desired by hardware designers, since an un-analyzed fsm is clearly prone to design bugs. Unfortunately, there are too many ways to represent (code) an fsm. It is almost impossible for a tool to identify all possible fsm coding styles. In our department, at Cisco, we have a standardized fsm coding style. The standard fsm coding style allows us to easily extract an fsm. The extracted fsm is then fed to various tools for analysis: fsm reachability property, fsm coverage, and automatic fsm bubble diagram drawing. This paper will show our standard fsm coding style, how fsm are extracted, and a well known algorithm that is used to study the reachability property. Then we will show how to monitor the fsm transition coverage and also introduce a tool to automatically draw an fsm bubble diagram from the extracted fsm.},
address = {Santa Clara, CA, USA},
annote = {Wang1998-Practical FSM analysis for Verilog.pdf
inproceedings
Xin Meng
Computer hardware description languages
Software Package Verilog;Finite state machine;Hardware design;},
author = {Wang, Tsu-Hua},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Algorithms,Computer aided software engineering,Computer simulation,EI,Finite automata,Program debugging,Standards,Wang1998},
mendeley-tags = {Wang1998},
pages = {52--58},
title = {{Practical FSM analysis for Verilog}},
year = {1998}
}
@book{Bradski2008,
author = {Bradski, Gary and Kaehler, Adrian},
isbn = {0596516134},
pages = {555},
publisher = {O'Reilly Media},
title = {{Learning OpenCV: Computer Vision with the OpenCV Library}},
url = {http://www.amazon.com/Learning-OpenCV-Computer-Vision-Library/dp/0596516134},
year = {2008}
}
@article{Glover1990,
abstract = {This is the second half of a two part series devoted to the tabu search metastrategy for optimization problems. Part I introduced the fundamental ideas of tabu search as an approach for guiding other heuristics to overcome the limitations of local optimality, both in a deterministic and a probabilistic framework. Part I also reported successful applications from a wide range of settings, in which tabu search frequently made it possible to obtain higher quality solutions than previously obtained with competing strategies, generally with less computational effort. Part II, in this issue, examines refinements and more advanced aspects of tabu search. Following a brief review of notation, Part II introduces new dynamic strategies for managing tabu lists, allowing fuller exploitation of underlying evaluation functions. In turn, the elements of staged search and structured move sets are characterized, which bear on the issue of finiteness. Three ways of applying tabu search to the solution of integer programming problems are then described, providing connections also to certain nonlinear programming applications. Finally, the paper concludes with a brief survey of new applications of tabu search that have occurred since the developments reported in Part I. Together with additional comparisons with other methods on a wide body of problems, these include results of parallel processing implementations and the use of tabu search in settings ranging from telecommunications to neural networks.},
author = {Glover, F},
journal = {INFORMS Journal on Computing},
number = {1},
pages = {4},
title = {{Tabu search--part II}},
volume = {2},
year = {1990}
}
@book{Alexander2008,
author = {Alexander, Charles K and Sadiku, Matthew},
isbn = {0071284419},
publisher = {McGraw-Hill Higher Education},
title = {{Fundamentals of Electric Circuits}},
url = {http://www.amazon.co.uk/Fundamentals-Electric-Circuits-Charles-Alexander/dp/0071284419},
year = {2008}
}
@misc{TheMendeleySupportTeam2011a,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@inproceedings{BellJr.2006,
abstract = {The latest high-performance IBM PowerPC microprocessor, the POWERS chip, poses challenges for performance model validation. The current state-of-the-art is to use simple hand-coded bandwidth and latency testcases, but these are not comprehensive for processors as complex as the POWER5 chip. Applications and benchmark suites such as SPEC CPU are difficult to set up or take too long to execute on functional models or even on detailed performance models. We present an automatic testcase synthesis methodology to address these concerns. By basing testcase synthesis on the workload characteristics of an application, source code is created that largely represents the performance of the application, but which executes in a fraction of the runtime. We synthesize representative PowerPC versions of the SPEC2000, STREAM, TPC-C and Java benchmarks, compile and execute them, and obtain an average IPC within 2.4\% of the average IPC of the original benchmarks and with many similar average workload characteristics. The synthetic testcases often execute two orders of magnitude faster than the original applications, typically in less than 300K instructions, making performance model validation for today's complex processors feasible.},
author = {{Bell  Jr.}, R H and Bhatia, R R and John, L K and Stuecheli, J and Griswell, J and Tu, P and Capps, L and Blanchard, A and Thai, R},
booktitle = {Performance Analysis of Systems and Software, 2006 IEEE International Symposium on},
keywords = {IBM PowerPC microprocessor,POWERS chip,automatic testcase synthesis,automatic testing,high performance PowerPC processors,microcomputers,microprocessor chips,performance evaluation,performance model validation},
pages = {154--165},
title = {{Automatic testcase synthesis and performance model validation for high performance PowerPC processors}},
year = {2006}
}
@book{Meyer2006,
address = {Sebastopol, CA},
author = {Meyer, Eric},
edition = {3rd},
publisher = {O'Reilly Media, Inc},
title = {{CSS: The Definitive Guide}},
year = {2006}
}
@article{Keutzer2000,
author = {Keutzer, K and Malik, S and Newton, A R and Rabaey, J M and Sangiovanni-Vincentelli, A},
journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
number = {12},
pages = {1523--1543},
title = {{System-level design: Orthogonalization of concerns and platform-based design}},
volume = {19},
year = {2000}
}
@book{Williams2006,
address = {Sebastopol, CA},
author = {Williams, Hugh},
publisher = {O'Reilly Media, Inc.},
title = {{Learning MySQL}},
year = {2006}
}
@article{Coello2001,
author = {Coello, C A C},
journal = {Lecture Notes in Computer Science},
pages = {21--40},
title = {{A short tutorial on evolutionary multiobjective optimization}},
year = {2001}
}
@article{Dubois1982a,
author = {Dubois, D and Prade, H},
journal = {International Journal of General Systems},
number = {1},
pages = {43--61},
title = {{A class of fuzzy measures based on triangular norms: A general framework for the combination fo uncertain information}},
volume = {8},
year = {1982}
}
@inproceedings{Sloane2002,
annote = {Nowra},
author = {Sloane, A},
booktitle = {PROCEEDINGS OF THE ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES},
pages = {281},
title = {{Post-design domain-specific language embedding: A case study in the software engineering domain}},
year = {2002}
}
@article{Bartleson2005,
abstract = {SystemVerilog language, the design and verification methodology, developed through Accelera's standardization process to comply with IEEE standard, is discussed. SystemVerilog is the first hardware design and verification language (HDVL), which includes all the functionality of the design languages Verilog and VHDL. It helps designers in design-for-verification (DFV) methodology and reduces the simulation-synthesis mismatches. It provides a single solution to identify and control random values and to define design behavior.},
annote = {article
Xin Meng
Computer hardware description languages
Design-for-verification (DFV);SystemVerilog;Accelera (CO);Hardware design and verification language;},
author = {Bartleson, Karen},
isbn = {0192-1541},
journal = {Electronic Engineering Times},
keywords = {Bartleson2005,Computer aided design,Computer hardware,Computer simulation,Specifications,Standardization,Standards},
mendeley-tags = {Bartleson2005},
number = {1373},
pages = {10--11},
title = {{SystemVerilog is changing everything}},
year = {2005}
}
@book{Nelsen2006,
address = {New York},
annote = {norm},
author = {Nelsen, R B},
publisher = {Springer Verlag},
title = {{An introduction to copulas}},
url = {http://books.google.com/books?hl=en\&lr=\&id=oMzi2gQ3hrsC\&oi=fnd\&pg=PR7\&dq=An+Introduction+to+Copulas\&ots=jzVqie1Ytl\&sig=AkLw3nYU\_UiQUH04a2DsQ2qcJAc\#v=onepage\&q=\&f=false},
year = {2006}
}
@inproceedings{Pauer1997,
abstract = {The purpose and goals of performance modeling for multiprocessor systems using a token-based methodology in VHDL are discussed. Following this motivation, a framework for performance modeling is described, which involves modeling hardware and software at different levels of abstraction; the scope of the paper primarily addresses the high profile performance model. A commercial tool supporting this modeling framework is then introduced. The discussion continues with an overview of the real time infrared search and track algorithm, and the system design problem. Preliminary results of the performance modeling efforts and validation via code profiling is summarized, and future plans are described},
author = {Pauer, E K and Pettigrew, M N and Myers, C S and Madisetti, V K},
booktitle = {VHDL International Users' Forum, 1997. Proceedings},
keywords = {VHDL,abstraction,code profiling,hardware description languages,hardware modelling,infrared imaging,military computing,military systems,multiprocessing systems,multiprocessor systems,performance evaluation,performance modeling framework,real time infrared search processing,real time infrared track processing,real-time systems,software modelling,surveillance,system design problem,token-based methodology,tracking,validation},
pages = {33--42},
title = {{A performance modeling framework applied to real time infrared search and track processing}},
year = {1997}
}
@book{mhdl-man,
author = {Meng, Xin},
title = {{MetaHDL Reference Manual}},
url = {http://code.google.com/p/metahdl/source/browse/trunk/mhdlc/doc/MetaHDL\_man.pdf},
year = {2010}
}
@inproceedings{Kang1998,
abstract = {The feature-oriented reuse method (FORM), extended from the feature-oriented domain analysis (FODA) method, is a systematic method that focuses on capturing commonalities and differences of applications in a domain in terms of `features' and using the analysis results develop domain architectures and components. Once a domain is described and explained in terms of common and different units of computation, they are used to construct different `feasible' configurations of reusable architectures. Features are distinctively identifiable functional abstractions that must be packaged, implemented, tested, delivered, and maintained. Therefore, they are the first class objects in the development of domain-oriented software.},
annote = {inproceedings
Software engineering
Electronics bulletin board systems (EBBS) domain;Feature oriented reuse method (FORM);Feature oriented domain analysis (FODA) method;},
author = {Kang, Kyo C},
booktitle = {International Conference on Software Reuse},
keywords = {Computational complexity,Computer architecture,Data structures,Kang1998,Object oriented programming},
mendeley-tags = {Kang1998},
pages = {354--355},
publisher = {IEEE Computer Society Press},
title = {{Feature-oriented development of applications for a domain}},
year = {1998}
}
@inproceedings{Miller1999,
abstract = {This paper introduces an approach for protocol performance estimation directly from a formal model of the protocol. By using the approach presented in this paper, performance of a protocol can be quickly estimated at an early stage of protocol design. The simplicity of analysis, achieved by deterministic analysis, and the tight integration of the performance model, called the performance reachability graph (PRG), with the formal specification makes the approach in this paper a very useful protocol design-time tool. The approach provides a two way path between the specification model and the performance model. In one direction, the tight coupling between the specification and the performance models allows a protocol designer to get quick estimates of performance from the specification. In the other direction a designer can use the performance estimates to quickly identify portions of the specification responsible for undesired performance characteristics and consider changes to the specification to improve the overall performance},
author = {Miller, R E and Chaudry, Z U},
booktitle = {Performance, Computing and Communications Conference, 1999. IPCCC '99. IEEE International},
keywords = {deterministic analysis,formal specification,performance evaluation,performance model,performance models,performance reachability graph,protocol performance,protocols},
pages = {157--163},
title = {{On estimating protocol performance from a formal specification}},
year = {1999}
}
@inproceedings{Risi2001,
annote = {HyCom},
author = {Risi, W and L\'{o}pez, P and Marcos, D},
booktitle = {Proceedings of the 34th Annual Hawaii International Conference on System Sciences (HICSS-34)},
publisher = {IEEE Computer Society Washington, DC, USA},
title = {{Hycom: A domain specific language for hypermedia application development}},
volume = {9},
year = {2001}
}
@book{Vlist2002,
address = {Sebastopol, CA},
author = {van der Vlist, Eric},
publisher = {O'Reilly Media, Inc.},
title = {{XML Schema}},
year = {2002}
}
@article{Petriu2000,
abstract = {Software architecture plays an important role in determining software quality characteristics, such as maintainability, reliability, reusability, and performance. Performance effects of architectural decisions can be evaluated at an early stage by constructing and analyzing quantitative performance models, which capture the interactions between the main components of the system as well as the performance attributes of the components themselves. The paper proposes a systematic approach to building layered queueing network (LQN) performance models from a UML description of the high-level architecture of a system and more exactly from the architectural patterns used for the system. The performance model structure retains a clear relationship with the system architecture, which simplifies the task of converting performance analysis results into conclusions and recommendations related to the software architecture. The proposed approach is applied to a telecommunication product for which an LQN model is built and analyzed. The analysis shows how the performance bottleneck is moving from component to component (hardware or software) under different loads and configurations and exposes some weaknesses in the original software architecture, which prevent the system from using the available processing power at full capacity due to excessive serialization.},
author = {Petriu, D and Shousha, C and Jalnapurkar, A},
isbn = {0098-5589},
journal = {IEEE Transactions On Software Engineering},
keywords = {LQN model,LQN performance models,UML description,architectural decisions,architectural patterns,architecture based performance analysis,high-level architecture,layered queueing network,maintainability,object-oriented programming,performance analysis results,performance attributes,performance bottleneck,performance effects,performance model structure,processing power,quantitative performance models,queueing theory,reliability,reusability,serialization,software architecture,software performance evaluation,software quality,software quality characteristics,specification languages,system architecture,systematic approach,telecommunication computing,telecommunication product,telecommunication system},
number = {11},
pages = {1049--1065},
title = {{Architecture-based performance analysis applied to a telecommunication system}},
volume = {26},
year = {2000}
}
@article{Yager1988a,
annote = {定义了OWA算子和一般化的orand算子, 其归一化后的值介于AND和OR之间. 详见笔记. },
author = {Yager, R R},
journal = {IEEE transactions on Systems, Man and Cybernetics},
number = {1},
pages = {183--190},
title = {{On ordered weighted averaging aggregation operators inmulticriteria decisionmaking}},
volume = {18},
year = {1988}
}
@article{Pooley1989,
abstract = {Performance modelling and estimation of computer systems is a vital facility for any software engineer. Thus any computer-aided software engineering environment should contain tools to support this. The need to provide tools to support systematic experimentation with performance models is examined and a solution is discussed, building on the idea of an experimental frame, originally introduced by Ziegler (1976). The inter-working of these tools and the support tools in a proposed integrated modelling support environment is considered. The tools discussed are an experimental plan editor, an experiment executor and an animator. The report is based on a deliverable of the Alvey project SE/059 `Improved methods for performance modelling (SIMMER)', but has been edited to be more self-contained},
author = {Pooley, R},
isbn = {0268-6961},
journal = {Software Engineering Journal},
keywords = {Alvey,SE/059,SIMMER,animator,computer graphics,computer-aided software engineering environment,experiment executor,experimental plan editor,experimenter tool,integrated modelling support environment,performance modelling,performance models,program testing,software tools,systematic experimentation,user interfaces},
number = {3},
pages = {163--170},
title = {{An experimenter tool for an integrated modelling support environment-its role and design}},
volume = {4},
year = {1989}
}
@book{Welch2003,
address = {New York},
author = {Welch, Brent and Jones, Ken},
edition = {4th},
publisher = {Prentice Hall, Inc.},
title = {{Practical Programming in Tcl and Tk}},
year = {2003}
}
@book{Kay2008,
address = {Hoboken, NJ},
author = {Kay, Michael},
edition = {4th},
publisher = {Wrox},
title = {{XSLT 2.0 and XPath 2.0 Programmer's Reference}},
year = {2008}
}
@book{Synopsys2006,
address = {Mountain View, CA},
author = {Synopsys},
publisher = {Synopsys, Inc.},
title = {{Register Abstraction Layer User Guide}},
year = {2006}
}
@article{Kamin1997,
annote = {FPIC},
author = {Kamin, S},
journal = {University of Illinois Computer Science Report},
title = {{DSL’97—1st ACM SIGPLAN Workshop on Domain-Specific Languages in Association with POPL’97}},
year = {1997}
}
@article{Blum2003,
author = {Blum, Christian and Roli, Andrea},
doi = {10.1145/937503.937505},
isbn = {0360-0300},
journal = {ACM Computing Surveys},
number = {3},
pages = {268--308},
title = {{Metaheuristics in combinatorial optimization: Overview and conceptual comparison}},
volume = {35},
year = {2003}
}
@book{Weissman2003,
author = {Weissman, Jerry},
isbn = {0130464139},
pages = {304},
publisher = {FT Press},
title = {{Presenting to Win: The Art of Telling Your Story}},
url = {http://www.amazon.com/Presenting-Win-Telling-Your-Story/dp/0130464139},
year = {2003}
}
@book{Fowler1999,
address = {Des Moines, IA},
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
publisher = {Addison-Wesley},
title = {{Refactoring: Improving the Design of Existing Code}},
year = {1999}
}
@inproceedings{Mauw2002,
annote = {RoTL},
author = {Mauw, S and Wiersma, W T and Willemse, T A C},
booktitle = { Proceedings of the 35th Annual Hawaii International Conference on System Sciences, 2002. HICSS.},
pages = {3637--3646},
title = {{Language-driven system design}},
year = {2002}
}
@inproceedings{Yi2008,
abstract = {Using performance model to analyze the Internet service is prevailing. However, the research of the performance model for mail server retrains in the immature status. In this paper, based on the queue theory, we propose a performance model for Domino mail server. The verification and analysis of the model are also presented. The experimental results show that this model characterizes the behavior of Domino mail server well and prove that it is useful for the qualitative performance measurement of Domino mail server.},
author = {Yi, Liang and Lei, Wang and Jianfeng, Zhan and Di, R},
booktitle = {Computer Science and Software Engineering, 2008 International Conference on},
keywords = {Domino mail server,Internet,Internet service,mail server,mailing systems,performance model,queue theory,queueing theory},
pages = {473--476},
title = {{A Performance Model for Domino Mail Server}},
volume = {3},
year = {2008}
}
@book{Hofstadter1999,
author = {Hofstadter, Douglas R.},
isbn = {9780465026562},
pages = {832},
publisher = {Basic Books},
title = {{G\"{o}del, Escher, Bach: An Eternal Golden Braid}},
url = {http://www.amazon.com/G\"{o}del-Escher-Bach-Eternal-Golden/dp/0465026567},
year = {1999}
}
@article{FODOR1995,
author = {FODOR, Janos and MARICHAL, Jean-Luc and ROUBENS, Marc},
journal = {IEEE Transactions on Fuzzy Systems},
number = {2},
pages = {236--240},
title = {{Characterization of the ordered weighted averaging operators}},
volume = {3},
year = {1995}
}
@inproceedings{Walrath1997,
abstract = {Summary form only given. A performance model for a typical design represented in a high-level description language can be generated by augmenting the design components with attributes and evaluation rules. An attribute represents some performance aspect of a design that can be either assigned a base initial value or calculated using an evaluation rule. Heat dissipation, dynamic power consumption, and maximum throughput rate are just a few examples of various performance aspects that can be represented with attributes. Evaluation rules contained in the performance model can be classified as either equational or procedural. An equational performance model is a model containing only evaluation rules that are composed of mathematical operations such as addition, subtraction, and so forth. Likewise, a procedural performance model may contain equational rules, but it also has rules composed of complex programming constructs such as an assignment statement, if-then-else, case, and while control constructs and procedure calls. Our method for performance verification involves placing relational constraints on attributes in the performance model and determining whether all constraints can be satisfied simultaneously. Interval mathematics provides a convenient technique to represent relational constraints as intervals. Each attribute has an initial interval from negative infinity to positive infinity. Further constraints are specified by the user, the interval analysis technique is applied, and a verification result is produced},
author = {Walrath, J and Vemuri, R and Bradley, W},
booktitle = {European Design and Test Conference, 1997. ED\&TC 97. Proceedings},
keywords = {PDL,attributes,circuit CAD,constraint handling,equational performance model,evaluation rules,formal verification,high level synthesis,high-level description language,interval analysis,interval mathematics,partial evaluation,performance model,performance verification,procedural performance model,relational constraints,specification languages},
pages = {622},
title = {{Performance verification using partial evaluation and interval analysis}},
year = {1997}
}
@article{Yager1983,
author = {Yager, R R},
journal = {Information Sciences: an International Journal},
number = {2},
pages = {107--139},
title = {{Quantifiers in the formulation of multiple objective decision functions}},
volume = {31},
year = {1983}
}
@article{Brinksma1995,
abstract = {So far, most research in the area of formal methods has been focussed on the development of theories, methods, and tools for the design and analysis of functional, or qualitative, aspects of information-processing systems. Performance analysis, on the other hand, has always been concerned with the quantitative analysis of such systems. As a result each community has been doing its research mostly independently of the other, although a number of formal models of system behaviour have made their way into the world of performance analysis. First of all, there is the now established field of stochastic Petri nets and its application to performance modelling. More recently, there is a growing interest in the application of process algebraic techniques to performance modelling, and a number of proposals for timed, probabilistic, and stochastic process algebras have been put forward. At the same time we observe that the once clear distinction between the functional and performance properties of systems is getting blurred. With the technological means and the economical drive in place to offer a host of high-performance services to end-users there is a clear need to treat the quantitative quality-of-service parameters as requirements in functional specifications. The rapidly growing importance and proliferation of such systems not only implies a conceptual merging of functionality and performance, but also calls for the integration of qualitative and quantitative aspects in their design and realization. In our presentation we analyse to what extent the use of process algebraic techniques can contribute to an increased collaboration between the performance analysis and formal methods communities. Ideally, such collaboration should not only lead to further progress in performance analysis, but also contribute to the incorporation of performance analysis in an integrated discipline of formal design. Some of the more specific topics that we address are: design by transformation; derivation of performance models; compositionality; liveness and fairness; and true concurrency},
annote = {article
xin\_meng},
author = {Brinksma, E},
journal = {Petri Nets and Performance Models, 1995., Proceedings of the Sixth International Workshop on},
keywords = {524322,Petri nets, formal logic, parallel processing, pro},
mendeley-tags = {524322},
pages = {124--125},
title = {{Performance and formal design: a process algebraic perspective}},
year = {1995}
}
@inproceedings{Eberhart1995,
annote = {Proceedings Sixth Symposium on Micro Machine and Human Science},
author = {Eberhart, R C and Kennedy, J},
pages = {39?43},
title = {{A new optimizer using particle swarm theory}},
year = {1995}
}
@article{Tao2008,
abstract = {To update a performance model, its parameter values must be updated, and in some applications (such as autonomic systems) tracked continuously over time. Direct measurement of many parameters during system operation requires instrumentation which is impractical. Kalman filter estimators can track such parameters using other data such as response times and utilizations, which are readily observable. This paper adapts Kalman filter estimators for performance model parameters, evaluates the approximations which must be made, and develops a systematic approach to setting up an estimator. The estimator converges under easily verified conditions. Different queueing-based models are considered here, and the extension for state-based models (such as stochastic Petri nets) is straightforward.},
author = {Tao, Zheng and Woodside, C M and Litoiu, M},
isbn = {0098-5589},
journal = {Software Engineering, IEEE Transactions on},
keywords = {Kalman filter estimators,Kalman filtering,Kalman filters,Measurement,Modeling techniques,Parameter tracking,Performance model,optimal filters,parameter estimation,performance model estimation,performance model tracking,queuing-based models,software performance evaluation},
number = {3},
pages = {391--406},
title = {{Performance Model Estimation and Tracking Using Optimal Filters}},
volume = {34},
year = {2008}
}
@article{Yan2004,
abstract = {This paper describes an in-house developed language tool called VPerl used in developing a 250 MHz 32-bit high-performance low power embedded CPU core. The authors showed that use of this tool can compress the Verilog code by more than a factor of 5, increase the efficiency of the front-end design, reduce the bug rate significantly. This tool can be used to enhance the reusability of an intellectual property model, and facilitate porting design for different platforms.},
annote = {YAN2004-vperl.pdf
article
Xin Meng},
author = {Yan, Xiaolang and Yu, LongLi and Wang, Jiebing},
journal = {Journal of Zhejiang University SCIENCE},
keywords = {EI,VPerl,YAN2004},
mendeley-tags = {YAN2004},
number = {9},
pages = {1103--1105},
title = {{A front-end automation tool supporting design, verification and reuse of SOC}},
volume = {5},
year = {2004}
}
@book{Dybviq2003,
address = {Cambridge, MA},
author = {Dybviq, R Kent},
edition = {3rd},
publisher = {The MIT Press},
title = {{The Scheme Programming Language}},
year = {2003}
}
@article{Vemuri1996,
author = {Vemuri, R and Mandayam, R and Meduri, V},
journal = {Computer},
keywords = {PDL,Performance Description Language,abstraction levels,area,concurrent engineering,contractor accountability,cost,documentation,domain-independent performance-modeling tools,executable descriptions,functional modeling,graphs,high-level performance modeling language,longest path delay,performance evaluation,pre-implementation analysis,reliability,reusability,robust general-purpose environments,specification languages,system design methodologies,system performance evaluation,throughput rate,trade-off analysis},
pages = {44--53},
title = {{Performance modeling using PDL}},
volume = {29},
year = {1996}
}
@inproceedings{Alam2006,
abstract = {Performance and workload modeling has numerous uses at every stage of the high-end computing lifecycle: design, integration, procurement, installation and tuning. Despite the tremendous usefulness of performance models, their construction remains largely a manual, complex, and time-consuming exercise. We propose a new approach to the model construction, called modeling assertions (MA), which borrows advantages from both the empirical and analytical modeling techniques. This strategy has many advantages over traditional methods: incremental construction of realistic performance models, straightforward model validation against empirical data, and intuitive error bounding on individual model terms. We demonstrate this new technique on the NAS parallel CG and SP benchmarks by constructing high fidelity models for the floating-point operation cost, memory requirements, and MPI message volume. These models are driven by a small number of key input parameters thereby allowing efficient design space exploration of future problem sizes and architectures},
author = {Alam, S R and Vetter, J S},
booktitle = {Parallel and Distributed Processing Symposium, 2006. IPDPS 2006. 20th International},
keywords = {MPI message volume,error bounding,floating-point operation cost,incremental model construction,memory requirements,model validation,modeling assertions,parallel applications,parallel processing,performance evaluation,performance modeling,symbolic performance models,workload modeling},
pages = {8 pp.},
title = {{A framework to develop symbolic performance models of parallel applications}},
year = {2006}
}
@article{Gil2001,
annote = {JAMOOS},
author = {Gil, J Y and Tsoglin, Y},
journal = {Journal of Computing and Information Technology},
number = {4},
pages = {305--321},
title = {{A Domain-Specific Language for Language Processing}},
volume = {9},
year = {2001}
}
@inproceedings{Bahbouh,
abstract = {Many digital circuits with asynchronous inputs are susceptible to failure even when all their components are fault-free. They may fail as a result of metastable operation when their inputs have critical timing combinations. This paper addresses a novel priority arbiter architecture to solve the metastability problem. SPICE simulation is used to verify its performance and correctness. In contrast to other arbiters, the results showed that this new design has better immunity against metastable operation},
author = {Bahbouh, H.T. and Khalil, A.H. and Salama, A.E.},
booktitle = {Proceedings of the Sixteenth National Radio Science Conference. NRSC'99 (IEEE Cat. No.99EX249)},
doi = {10.1109/NRSC.1999.760897},
isbn = {977-5031-62-1},
pages = {C13/1--C13/4},
publisher = {Ain Shams Univ},
title = {{Novel design of priority arbiter}},
url = {http://ieeexplore.ieee.org/xpl/freeabs\_all.jsp?arnumber=760897},
year = {1999}
}
@misc{SUN-Microsystems2009,
author = {SUN-Microsystems},
title = {{SUN Grid Engine 6.2}},
url = {http://www.sun.com/software/sge/},
year = {2009}
}
@book{Greenlaw2006a,
address = {New York},
author = {Greenlaw, Raymond},
publisher = {Prentice Hall, Inc.},
title = {{Graph Theory: Modeling, Applications, and Algorithms}},
year = {2006}
}
@misc{Stallman2008,
author = {Stallman, Richard},
title = {{GNU Emacs}},
url = {http://www.gnu.org/software/emacs},
year = {2008}
}
@book{Flynn2011,
author = {Flynn, David and Aitken, Rob and Gibbons, Alan and Shi, Kaijian},
isbn = {1441944184},
pages = {320},
publisher = {Springer},
title = {{Low Power Methodology Manual: For System-on-Chip Design (Integrated Circuits and Systems)}},
url = {http://www.amazon.com/Power-Methodology-Manual-System-Chip/dp/1441944184},
year = {2011}
}
@incollection{Luk1998,
annote = {Pebble: a language for parametrised and reconfigurable hardware design
Luk1998. Pebble A Language For Parametrised and Reconfigurable Hardware Design.pdf
inbook
Xin Meng},
author = {Luk, Wayne and McKeever, Steve},
keywords = {Luk1998},
mendeley-tags = {Luk1998},
pages = {9},
publisher = {Springer Berlin / Heidelberg},
title = {{Field-Programmable Logic and Applications From FPGAs to Computing Paradigm}},
volume = {1482},
year = {1998}
}
@misc{Joy2009,
author = {Joy, Corwin and Gradman, Michael},
keywords = {dtl},
title = {{Database Template Library}},
url = {http://dtemplatelib.sourceforge.net/},
year = {2009}
}
@book{Alsina2006,
address = {Hackensack, NJ},
author = {Alsina, C and Frank, M J and Schweizer, B},
publisher = {World Scientific Pub Co Inc},
title = {{Associative functions: triangular norms and copulas}},
url = {http://books.google.com/books?hl=en\&lr=\&id=cucLc3BKN9IC\&oi=fnd\&pg=PR7\&dq=Associative+Functions:+Triangular+Norms+and+Copulas\&ots=ydkZnd5LjQ\&sig=eZNzsoBPAPWKI1lirGjxYtYmYkY\#v=onepage\&q=\&f=false},
year = {2006}
}
@article{Valenzuela2002,
author = {Valenzuela, C L and Wang, P Y},
journal = {IEEE Transactions on Evolutionary Computation},
number = {4},
pages = {390--401},
title = {{VLSI placement and area optimization using a genetic algorithm tobreed normalized postfix expressions}},
volume = {6},
year = {2002}
}
@inproceedings{Kreku2008,
abstract = {Increasing number of concurrent applications in future mobile devices will be based on parallel heterogeneous multiprocessor system-on-chip platforms using network-on-chip communication to achieve scalability. In this paper we describe a performance modeling and simulation approach to explore efficiently the application-platform solution/design space at system-level. The application behavior is abstracted to workload models that are mapped onto performance models of the execution platform for transaction level simulation. The approach provides separation of application and platform through service-oriented modeling. The experimentation of the approach in virtual network computing and mobile video player case studies is presented.},
author = {Kreku, J and Hoppari, M and Kestila, T and Yang, Qu and Soininen, J P and Tiensyrja, K},
booktitle = {Specification, Verification and Design Languages, 2008. FDL 2008. Forum on},
keywords = {mobile devices,mobile video player,network-on-chip,network-on-chip communication,parallel heterogeneous multiprocessor system-on-ch,performance evaluation,platform performance evaluation,platform performance modeling,service-oriented modeling,transaction level simulation,virtual network computing},
pages = {43--48},
title = {{Application - platform performance modeling and evaluation}},
year = {2008}
}
@article{VanEngelen2001,
author = {van Engelen, R A},
journal = {Journal of Computing and Information Technology},
number = {4},
pages = {289--304},
title = {{Atmol: A domain-specific language for atmospheric modeling}},
volume = {9},
year = {2001}
}
@inproceedings{Sauper,
author = {Sauper, C and Barzilay, R},
booktitle = {Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP},
pages = {208--216},
publisher = {{Association for Computational Linguistics\}},
title = {{Automatically Generating Wikipedia Articles: A Structure-Aware Approach}}
}
@book{Maclennan1990,
address = {Des Moines, IA},
author = {Maclennan, Bruce J},
publisher = {Addison Wesley},
title = {{Functional Programming: Practice and Theory}},
year = {1990}
}
@article{Coello1999,
annote = {介绍了一些用于进化算法的多目标评价方法, 找出Pareto最优前端.},
author = {Coello, C A C},
journal = {Knowledge and Information systems},
number = {3},
pages = {129--156},
title = {{A comprehensive survey of evolutionary-based multiobjective optimization techniques}},
volume = {1},
year = {1999}
}
@inproceedings{Maier1993,
abstract = {Quality function deployment, (QFD), an approach to synthesizing several elements of system modeling and design into single unit, is presented. Behavioral, physical, and performance modeling are usually considered as separate aspects of system design without explicit linkages. Structured methodologies have developed linkages between behavioral and physical models before, but have not considered the integration of performance models. QFD integrates performance models with traditional structured models. In this method, performance requirements such as cost, weight, and detection range are partitioned into matrices. Partitioning is done by developing a performance model, preferably quantitative, for each requirement. The parameters of the model become the engineering objectives in a QFD analysis and the models are embedded in a spreadsheet version of the traditional QFD matrices. The performance model and its parameters are used to derive part of the functional model by recognizing that a given performance model implies some structure to the functionality of the system.},
author = {Maier, M W},
booktitle = {Aerospace Applications Conference, 1993. Digest., 1993 IEEE},
keywords = {aerospace,aerospace computing,behavioural models,cost,detection range,functional model,performance modeling,physical models,quality function deployment,spreadsheet,structured methods,system modeling,systems analysis,systems engineering,weight},
pages = {187--195},
title = {{Performance analysis, quality function deployment and structured methods}},
year = {1993}
}
@book{Aho2006,
address = {Des Moines, IA},
author = {Aho, Alfred V and Lam, Monica S and Sethi, Ravi and Ullman, Jeffrey D},
edition = {2nd},
publisher = {Addison-Wesley},
title = {{Compilers: Priciples, Techniques, \& Tools}},
year = {2006}
}
@misc{SDL2000,
author = {SDL},
title = {{MSC-2000: Interaction for the new mellenium}},
url = {http://www.sdl-forum.org/MSC2000present/index.htm},
year = {2000}
}
@article{Qin2006,
abstract = {Hardware/software co-specification is a critical phase in co-design. Our co-specification process starts with a high level graphical description in Statecharts and ends with an equivalent parallel composition of hardware and software descriptions in Verilog. In this paper, we first investigate the Statecharts formalism by providing it a formal syntax and a compositional operational semantics. Based on that, a semantics-preserving linking function is designed to compile specifications written in Statecharts into Verilog. The obtained Verilog specifications are then passed to a partitioning process to generate hardware and software subspecifications, where the correctness is guaranteed by algebraic laws of Verilog. \&copy; Springer-Verlag Berlin Heidelberg 2006.},
annote = {article
Xin Meng
Systems analysis
Hardware specification;Software specification;Co-specification process;Operational semantics;Algebraic laws;},
author = {Qin, Shengchao and Chin, Wei-Ngan and He, Jifeng and Qiu, Zongyan},
isbn = {1614-5046},
journal = {Innovations in Systems and Software Engineering},
keywords = {Algebra,Computer hardware,Computer software,Qin2006,Semantics,Specifications},
mendeley-tags = {Qin2006},
number = {1},
pages = {17--38},
title = {{From Statecharts to Verilog: A formal approach to hardware/software co-specification}},
volume = {2},
year = {2006}
}
@book{Hajek2001,
annote = {norm},
author = {Hajek, P},
publisher = {Kluwer academic publishers},
title = {{Metamathematics of fuzzy logic}},
url = {http://books.google.com/books?hl=en\&lr=\&id=Eo-e8Pi-HmwC\&oi=fnd\&pg=PR7\&dq=Metamathematics+of+Fuzzy+Logic\&ots=ElYtt4Iz9\_\&sig=OnZTv8750kn2ttidrxG3mt66oq8\#v=onepage\&q=\&f=false},
year = {2001}
}
@book{Hunter2007,
address = {Hoboken, NJ},
author = {Hunter, David and Rafter, Jeff and Fawcett, Joe and van der Vlist, Eric and Ayers, Danny and Duckett, Jon and Watt, Andrew and McKinnon, Linda},
edition = {4th},
publisher = {Wrox},
title = {{Beginning XML}},
year = {2007}
}
@book{Butnariu1993,
author = {Butnariu, D and Klement, E P},
publisher = {Kluwer Academic Publishers},
title = {{Triangular norm-based measures and games with fuzzy coalitions}},
url = {http://books.google.com/books?hl=en\&lr=\&id=i-hjL27Pz-gC\&oi=fnd\&pg=PA1\&dq=Triangular+Norm-Based+Measures+and+Games+with+Fuzzy+Coalitions\&ots=dXuf1OjutO\&sig=p-ECsFyYwVnzDfADOuA09lOPeuE\#v=onepage\&q=\&f=false},
year = {1993}
}
@misc{2005a,
address = {北京},
author = {中华人民共和国国家质量监督检验检疫总局 and 中国国家标准化管理委员会},
publisher = {中华人民共和国国家质量监督检验检疫总局
中国国家标准化管理委员会},
title = {{文后参考文献著录规则 GB/T 7714-2005}},
year = {2005}
}
@misc{IEEE2005,
address = {New York},
annote = {Sep
manual
Xin Meng},
author = {IEEE},
booktitle = {IEEE std 1364-2005},
keywords = {Verilog2001},
mendeley-tags = {Verilog2001},
publisher = {IEEE Computer Society/Design Automation },
title = {{IEEE Standard for Verilog Hardware Description Language }},
year = {2005}
}
@book{2006a,
address = {北京},
author = {曹建国 and 王友德},
publisher = {科学出版社},
title = {现代黎曼几何简明教程},
year = {2006}
}
@article{2005b,
annote = {platform-based },
author = {夏宇闻},
journal = {中国集成电路},
number = {006},
pages = {26--35},
title = {{IP 核的重用与基于平台的 SoC 设计 (上)}},
year = {2005}
}
@inproceedings{Parsopoulos2002,
annote = {Proceedings of the 2002 ACM symposium on Applied computing},
author = {Parsopoulos, K E and Vrahatis, M N},
pages = {603--607},
publisher = {ACM New York, NY, USA},
title = {{Particle swarm optimization method in multiobjective problems}},
year = {2002}
}
@article{2005c,
annote = {platform-based},
author = {熊志辉 and 李思昆 and 陈吉华 and 张鲁峰},
journal = {计算机工程与科学},
number = {008},
pages = {56--59},
title = {{基于平台的 SoC 系统建模方法研究}},
volume = {27},
year = {2005}
}
@book{sv-ieee,
abstract = {This standard represents a merger of two previous standards: IEEE Std 1364\^{A}¿-2005 Verilog hardware description language (HDL) and IEEE Std 1800-2005 SystemVerilog unified hardware design, specification, and verification language. The 2005 SystemVerilog standard defines extensions to the 2005 Verilog standard. These two standards were designed to be used as one language. Merging the base Verilog language and the SystemVerilog extensions into a single standard provides users with all information regarding syntax and semantics in a single document.},
address = {New York},
author = {IEEE},
publisher = {The Institute of Electrical and Electronics Engineers, Inc.},
title = {{1800-2009 IEEE Standard for SystemVerilog - Unified Hardware Design, Specification, and Verification Language}},
url = {http://ieeexplore.ieee.org/xpl/freeabs\_all.jsp?arnumber=5354441}
}
@article{Pllana2008a,
abstract = {We address the issue of the development of performance models for programs that may be executed on large-scale computing systems. The commonly used approaches apply non-standard notations for model specification and often require that the software engineer has a thorough understanding of the underlying performance modeling technique. We propose to bridge the gap between the performance modeling and software engineering by incorporating UML. In our approach we aim to permit the graphical specification of performance model in a human-intuitive fashion on one hand, but on the other hand we aim for a machine-efficient model evaluation. The user specifies graphically the performance model using UML. Thereafter, the transformation of the performance model from the human-usable UML representation to the machine-efficient C++ representation is done automatically. We describe our methodology and illustrate it with the automatic transformation of a sample performance model.},
annote = {article
xin\_meng},
author = {Pllana, S and Benkner, S and Xhafa, F and Barolli, L},
isbn = {1530-2016},
journal = {Parallel Processing - Workshops, 2008. ICPP-W '08. International Conference on},
keywords = {4626805,C++ language, Unified Modeling Language, formal sp},
mendeley-tags = {4626805},
pages = {228--235},
title = {{Automatic Performance Model Transformation from UML to C++}},
year = {2008}
}
@article{Xu2006,
annote = {(徐晨)
(蒋华)
(袁红林)
Xu2006.A Verilog Preprocesser for moduling enhancement.pdf
article
Xin Meng
二级},
author = {Xu, Chen and Jiang, Hua and Yuan, Honglin},
journal = {计算机工程与应用},
keywords = {Xu2006},
mendeley-tags = {Xu2006},
pages = {111--113},
title = {{A Verilog Preprocesser for moduling enhancement (一种增加Verilog建模能力的预编译处理器)}},
volume = {17},
year = {2006}
}
@misc{Commission2000,
author = {Commission, International Electrotechnical},
booktitle = {IEC 61690-1},
title = {{Electronic design interchange format (EDIF) Version 3 0 0}},
url = {http://webstore.iec.ch/Webstore/webstore.nsf/0/E5CFE04EDDAD7FBDC125727F00583D23},
year = {2000}
}
@article{Canevet2003,
abstract = {A software toolset which allows Unified Modelling Language (UML) modellers to annotate models with performance information is described. An equivalent performance model is extracted from the UML, solved, and the results reflected back to the UML level. Used in this way, the toolset gives a high-level approach to software performance modelling where the benefits of the performance modelling process are achieved without significant additional notational burden.},
author = {Canevet, C and Gilmore, S and Hillston, J and Prowse, M and Stevens, P},
isbn = {1350-2387},
journal = {Computers and Digital Techniques, IEE Proceedings -},
keywords = {Java package,Markov processes,PEPA,UML,Unified Modelling Language,formal specification,high-level approach,object oriented programming,object-oriented programming,process algebra,software architecture,software performance evaluation,software performance modelling,software tools,software toolset,specification languages,stochastic process algebras},
number = {2},
pages = {107--120},
title = {{Performance modelling with the Unified Modelling Language and stochastic process algebras}},
volume = {150},
year = {2003}
}
@article{Grabisch1996,
author = {Grabisch, M},
journal = {European Journal of Operational Research},
number = {3},
pages = {445--456},
title = {{The application of fuzzy integrals in multicriteria decision making}},
volume = {89},
year = {1996}
}
@misc{Billauer2002,
abstract = {Perlilog is a command-line tool which generates Verilog modules from a set of files, which come in several other formats. It was originally designed to integrate Verilog IP cores. It's released as free software (GPL). Motivation: Anyone who has needed to integrate a few Verilog modules into something working, knows it's a headache. It's not only a mechanic task, but also a source of bugs. Since Verilog modules' interface is basically wires, the integration task requires an accurate understanding of what each wire stands for, and how it's expected to behave. Having many details to keep track on, it's common that undesidered},
annote = {unpublished
Xin Meng},
author = {Billauer, Eli},
keywords = {perlilog},
mendeley-tags = {perlilog},
title = {{Perilog}},
url = {http://billauer.co.il/perlilog.html},
year = {2002}
}
@misc{Benz2004,
author = {Benz, Chuck},
title = {{csrGen: Automated CSRs for ASIC/FPGA Processor Interfaces}},
url = {http://asics.chuckbenz.com},
year = {2004}
}
@book{Knuth1997,
author = {Knuth, Donald E.},
isbn = {0201896842},
pages = {784},
publisher = {Addison-Wesley Professional},
title = {{Art of Computer Programming, Volume 2: Seminumerical Algorithms (3rd Edition)}},
url = {http://www.amazon.com/Art-Computer-Programming-Seminumerical-Algorithms/dp/0201896842},
year = {1997}
}
@misc{Synopsys2009b,
author = {Synopsys},
title = {{OpenVera}},
url = {http://www.open-vera.com/},
year = {2009}
}
@book{Ray2003,
address = {Sebastopol, CA},
author = {Ray, Eric},
edition = {2nd},
publisher = {O'Reilly Media, Inc.},
title = {{Learning XML}},
year = {2003}
}
@article{Gandhi2006,
abstract = {The use of SystemVerilog language in the design and verification of complex chips is discussed. Designers can use the IEEE-std 1800-2005 SystemVerilog standard to capture their designs in one-third to one-half of the RTL code, which speeds up the design process and also accelerates verification, since fewer lines of RTL mean fewer bugs. Complex chips require constrained-random, coverage-driven testbenches to minimize the effort of writing manual tests, maximize reuse of verification components, and accurately assess verification progress. SystemVerilog provides all the constructs to build such testbenches and increase the chance for first-silicon success. Design and verification engineers can use SystemVerilog's capability to design intent in executable form. The language also helps in system-level design and can be used for transaction-level modeling, freely inter-mixing with models written in SystemC and sharing a common verification environment.},
annote = {article
Xin Meng
Chip scale packages
SystemVerilog;Complex chips;Testbenches;Modeling;},
author = {Gandhi, Manoj},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Computer hardware description languages,Computer simulation,Gandhi2006,Large scale systems,Logic design,Mathematical models,Semiconducting silicon},
mendeley-tags = {Gandhi2006},
number = {15},
pages = {22},
title = {{SystemVerilog: The complete solution}},
volume = {54},
year = {2006}
}
@inproceedings{492166,
abstract = {To study the performance of new architectural features, trace-driven simulation is commonly employed. Traditional trace-driven simulation models require the production of an input trace. Depending opt the needs of the simulation study, traces can contain billions of references and consume gigabytes of disk or tape storage. Execution-driven simulation eliminates the need for producing and storing input trace tapes by dynamically generating the input trace stream. The first issue addressed in the paper is the performance of an execution-driven simulation when compared to more traditional trace-driven methodologies. The time and effort spent developing each new model can make a thorough performance evaluation too costly. Instead if a reusable library of architectural simulation models (e.g., caches, branch-predictors etc.) can be constructed using an object-oriented paradigm, the cost of performing the simulation can be drastically reduced. Some of the advantages of using reusable code include: simplified implementation, improved reliability and reduced maintenance. We have developed such a set of execution-driven simulation models which were written using this object-oriented approach. The goal of this work is to provide a reusable framework for rapid prototyping of architecture-based simulation models. The framework is based on the ATOM execution-driven simulation tool provided by DEC. The simulation models are developed using portable C++},
author = {Sampogna, A and Kaeli, D R and Green, D and Silva, M and Sniezek, C J},
booktitle = {Simulation Symposium, 1996. Proceedings of the 29th Annual},
doi = {10.1109/SIMSYM.1996.492166},
keywords = {ATOM execution-driven simulation tool,architectura},
month = apr,
pages = {183--192},
title = {{Performance modeling using object-oriented execution-driven simulation}},
year = {1996}
}
@article{Kerbyson2003,
abstract = {Performance modelling can be used throughout the development, deployment and maintenance of system hardware and application software. In this work the authors illustrate three uses of performance modelling on large-scale systems: the verification of performance during system installation, the comparison of two large-scale systems, and the prediction of performance on possible future architectures. They detail how a performance model gave an expectation of the performance of ASCI Q, a 20Tflop system recently installed at Los Alamos. A comparison between ASCI Q and the Earth Simulator is also detailed, resulting in the sizing of an AlphaServer system that has the same performance as the Earth Simulator. The modelling approach is application centric. A detailed model is developed for each application of interest based on a static analysis of the code but parametrised in terms of its dynamic behaviour.},
author = {Kerbyson, D J and Hoisie, A and Wasserman, H J},
isbn = {1462-5970},
journal = {Software, IEE Proceedings -},
keywords = {ASCI Q,AlphaServer system,Earth Simulator,digital simulation,geophysics computing,hardware maintenance,large-scale systems performance modelling,parallel machines,performance evaluation,performance verification,program diagnostics,software maintenance,static analysis,supercomputers,system installation},
number = {4},
pages = {214--221},
title = {{Modelling the performance of large-scale systems}},
volume = {150},
year = {2003}
}
@book{Lamport1994a,
address = {Des Moines, IA},
author = {Lamport, Leslie},
edition = {2nd},
publisher = {Addison-Wesley},
title = {{LaTeX: A Document Preparation System}},
year = {1994}
}
@misc{Sun2009,
author = {Sun},
keywords = {myodbc},
title = {{MySQL Connector/ODBC 5.1}},
url = {http://dev.mysql.com/downloads/connector/odbc/5.1.html},
year = {2009}
}
@article{Zadeh1983,
author = {Zadeh, L A},
journal = {International series in modern applied mathematics and computer science},
pages = {149--184},
title = {{A computational approach to fuzzy quantifiers in natural languages}},
volume = {5},
year = {1983}
}
@book{Tanaka1996,
address = {New York},
author = {Tanaka, Kazuo and Niimura, T},
isbn = {0387948074},
publisher = {Springer},
title = {{An Introduction to Fuzzy Logic for Practical Applications}},
year = {1996}
}
@inproceedings{1620807,
abstract = {The present work presents a cycle-level execution-driven simulator for modern GPU architectures. We discuss the simulation model used for our GPU simulator, based in the concept of boxes and signals, and the relation between the timing simulator and the functional emulator. The simulation model we use helps to increase the accuracy and reduce the number of errors in the timing simulator while allowing for an easy extensibility of the simulated GPU architecture. We also introduce the OpenGL framework used to feed the simulator with traces from real applications (UT2004, Doom3) and a performance debugging tool (Signal Trace Visualizer). The presented ATTILA simulator supports the simulation of a whole range of GPU configurations and architectures, from the embedded segment to the high end PC segment, supporting both the unified and non unified shader architectural models.},
author = {del Barrio, V M and Gonzalez, C and Roca, J and Fernandez, A and E, Espasa},
booktitle = {Performance Analysis of Systems and Software, 2006 IEEE International Symposium on},
doi = {10.1109/ISPASS.2006.1620807},
keywords = {ATTILA,GPU simulation model,Open GL framework,computer graphic equipment,computer graphics,cycle-level execution-driven simulator,functional emulator,modern GPU architectures,performance debugging tool,performance evaluation,program debugging,signal trace visualizer,timing simulator},
month = mar,
pages = {231--241},
title = {{ATTILA: a cycle-level execution-driven simulator for modern GPU architectures}},
year = {2006}
}
@misc{Peeters2008,
author = {Peeters, Kasper},
title = {tree.hh },
url = {http://www.damtp.cam.ac.uk/user/kp229/tree/},
year = {2008}
}
@inproceedings{Bruntink2005,
abstract = {This paper reports on our experience in automatically migrating the crosscutting concerns of a large-scale software system, written in C, to an aspect-oriented implementation. We present a systematic approach for isolating crosscutting concerns, and illustrate this approach by zooming in on one particular crosscutting concern. Additionally, we compare the already existing solution to the aspect-oriented solution, and discuss advantages as well as disadvantages of both in terms of selected quality attributes. Our results show that automated migration is feasible, and that adopting an aspect-oriented approach can lead to significant improvements in source code quality, if carefully designed and managed.},
annote = {PCSL},
author = {Bruntink, M and van Deursen, A and Tourwe, T},
booktitle = {ICSM'05. Proceedings of the 21st IEEE International Conference on Software Maintenance, 2005},
pages = {37--46},
title = {{Isolating idiomatic crosscutting concerns}},
year = {2005}
}
@misc{IEEE1988,
author = {IEEE},
booktitle = {IEEE std 1076-1987},
keywords = {IEEE1988},
mendeley-tags = {IEEE1988},
publisher = {IEEE Computer Society/Design Automation },
title = {{IEEE Standard VHDL Language Reference Manual}},
year = {1988}
}
@inproceedings{Spivey1998,
abstract = {This paper presents EP3, an extensible preprocessor written in Perl. Included are directives that extend the power of Perl to the language being processed. This paper focuses on the Verilog Hardware Description language and provides a set of extended directives for Verilog in addition to the Standard EP3 directives. The EP3 engine is explained and example Verilog code is presented in both its pre and postprocessed forms.},
address = {Santa Clara, CA, USA},
annote = {Spivey1998.EP3 An extensible Perl preprocessor.pdf
inproceedings
xin\_meng
Program processors
Software Package Perl;Verilog hardware description language;},
author = {Spivey, Gary},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Codes (symbols),Computer hardware description languages,Spivey1998,Standards,Subroutines},
mendeley-tags = {Spivey1998},
pages = {106--113},
publisher = {IEEE},
title = {{EP3: an extensible Perl preprocessor}},
year = {1998}
}
@article{Macii1996,
author = {Macii, E and Poncino, M},
doi = {10.1109/ACSSC.1995.540542},
isbn = {1559375337},
journal = {Conference Record of The TwentyNinth Asilomar Conference on Signals Systems and Computers},
pages = {211--213},
publisher = {IEEE Comput. Soc. Press},
title = {{The design of easily scalable bus arbiters with different dynamic priority assignment schemes}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=540542},
year = {1996}
}
@book{Nguyen2006,
annote = {norm},
author = {Nguyen, H T and Walker, E},
publisher = {CRC Press},
title = {{A first course in fuzzy logic}},
url = {http://books.google.com/books?hl=en\&lr=\&id=\_IuuzgOJ0MgC\&oi=fnd\&pg=PA1\&dq=AnA+First+Course+in+Fuzzy+Logic\&ots=rsXTttkXsp\&sig=ORX6x7lS2hyzsJNamyueR9m4vdQ\#v=onepage\&q=\&f=false},
year = {2006}
}
@book{Bovet2005,
author = {Bovet, Daniel P. and Ph.D., Marco Cesati},
isbn = {0596005652},
pages = {944},
publisher = {O'Reilly Media},
title = {{Understanding the Linux Kernel, Third Edition}},
url = {http://www.amazon.com/Understanding-Linux-Kernel-Third-Edition/dp/0596005652},
year = {2005}
}
@book{SeanChambers2009,
annote = {refactoring},
author = {SeanChambers and Chiaretta, Simone},
title = {31天重构速成 你必须知道的重构技巧},
year = {2009}
}
@article{Ehrgott2000,
author = {Ehrgott, M and Gandibleux, X},
journal = {OR Spectrum},
number = {4},
pages = {425--460},
title = {{A survey and annotated bibliography of multiobjective combinatorial optimization}},
volume = {22},
year = {2000}
}
@article{Unveren2004,
author = {Unveren, A and Acan, A},
journal = {Integration, the VLSI Journal},
number = {2},
pages = {121--133},
title = {{An evolutionary constraint satisfaction solution for over the cell channel routing}},
volume = {37},
year = {2004}
}
@article{Jones2002,
author = {Jones, D F and Mirrazavi, S K and Tamiz, M},
journal = {European Journal of Operational Research},
number = {1},
pages = {1--9},
title = {{Multi-objective meta-heuristics: An overview of the current state-of-the-art}},
volume = {137},
year = {2002}
}
@book{Kay2002,
address = {Hoboken, NJ},
author = {Kay, Michael},
edition = {2nd},
publisher = {Wrox},
title = {{XSLT Programmer's Reference}},
year = {2002}
}
@inproceedings{Pllana2008,
abstract = {Performance is a key feature of large-scale computing systems. However, the achieved performance when a certain program is executed is significantly lower than the maximal theoretical performance of the large-scale computing system. The model-based performance evaluation may be used to support the performance-oriented program development for large-scale computing systems. In this paper we present a hybrid approach for performance modeling and prediction of parallel and distributed computing systems, which combines mathematical modeling and discrete-event simulation. We use mathematical modeling to develop parameterized performance models for components of the system. Thereafter, we use discrete-event simulation to describe the structure of system and the interaction among its components. As a result, we obtain a high-level performance model, which combines the evaluation speed of mathematical models with the structure awareness and fidelity of the simulation model. We evaluate empirically our approach with a real-world material science program that comprises more than 15,000 lines of code.},
author = {Pllana, S and Benkner, S and Xhafa, F and Barolli, L},
booktitle = {Complex, Intelligent and Software Intensive Systems, 2008. CISIS 2008. International Conference on},
keywords = {computing,discrete event simulation,discrete-event simulation,distributed computing,hybrid performance modeling,large-scale computing system,large-scale systems,mathematical modeling,parallel computing,parallel processing,prediction},
pages = {132--138},
title = {{Hybrid Performance Modeling and Prediction of Large-Scale Computing Systems}},
year = {2008}
}
@book{Cormen2003,
address = {Columbus, OH},
author = {Cormen, Thomas and Leiserson, Charles and Rivest, Ronald and Stein, Clifford},
edition = {2nd},
publisher = {McGraw-Hill },
title = {{Introduction to Algorithms}},
year = {2003}
}
@article{Li2000,
abstract = {We present hardware ML (HML), an innovative hardware description language (HDL) based on the functional programming language SML. Features of HML not found in other HDL's include polymorphic types and advanced type checking and type inference techniques. We have implemented an HML type checker and a translator for automatically generating VHDL from HML descriptions. We generate a synthesizable subset of VHDL and automatically infer types and interfaces. This paper gives an overview of HML and discusses the translation from HML to VHDL and the type inference process.},
annote = {Li2000.HML a novel hardware description language and its translation to VHDL.pdf
article
Xin Meng
Computer hardware description languages
Verilog hardware description language;HML programming language;},
author = {Li, Yanbing and Leeser, Miriam},
isbn = {1063-8210},
journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
keywords = {Interfaces (computer),Li2000,Program translators},
mendeley-tags = {Li2000},
number = {1},
pages = {1--8},
title = {{HML, a novel hardware description language and its translation to VHDL}},
volume = {8},
year = {2000}
}
@book{Lewis1998,
address = {New York},
annote = {book
Xin Meng},
author = {Lewis, Harry R and Papadimitriou, Christos H},
edition = {2nd},
keywords = {Lewis1998},
mendeley-tags = {Lewis1998},
publisher = {Prentice Hall, Inc.},
title = {{Elements of the Theory of Computation}},
year = {1998}
}
@article{Glover1989,
abstract = {This paper presents the fundamental principles underlying tabu search as a strategy for combinatorial optimization problems. Tabu search has achieved impressive practical successes in applications ranging from scheduling and computer channel balancing to cluster analysis and space planning, and more recently has demonstrated its value in treating classical problems such as the traveling salesman and graph coloring problems. Nevertheless, the approach is still in its infancy, and a good deal remains to be discovered about its most effective forms of implementation and about the range of problems for which it is best suited. This paper undertakes to present the major ideas and findings to date, and to indicate challenges for future research. Part I of this study indicates the basic principles, ranging from the short-term memory process at the core of the search to the intermediate and long term memory processes for intensifying and diversifying the search. Included are illustrative data structures for implementing the tabu conditions (and associated aspiration criteria) that underlie these processes. Part I concludes with a discussion of probabilistic tabu search and a summary of computational experience for a variety of applications. Part II of this study (to appear in a subsequent issue) examines more advanced considerations, applying the basic ideas to special settings and outlining a dynamic move structure to insure finiteness. Part II also describes tabu search methods for solving mixed integer programming problems and gives a brief summary of additional practical experience, including the use of tabu search to guide other types of processes, such as those of neural networks.},
author = {Glover, F},
journal = {INFORMS Journal on Computing},
number = {3},
pages = {190},
title = {{Tabu search--part I}},
volume = {1},
year = {1989}
}
@inproceedings{Dubois1982,
author = {Dubois, D and Prade, H},
booktitle = {Proceedings of the 2nd International Symposium of Fuzzy Sets},
pages = {39--68},
title = {{Triangular norms for fuzzy sets}},
year = {1982}
}
@article{Cho1995,
author = {Cho, S B},
journal = {International journal of approximate reasoning},
number = {4},
pages = {359--375},
title = {{Fuzzy aggregation of modular neural networks with ordered weighted averaging operators}},
volume = {13},
year = {1995}
}
@article{Bentley1986,
annote = {CHEM},
author = {Bentley, Jon},
journal = {Commun ACM},
number = {8},
pages = {711--721},
title = {{Programming pearls: little languages}},
volume = {29},
year = {1986}
}
@article{Guyer1999,
annote = {AL},
author = {Guyer, S Z and Lin, C},
title = {{An annotation language for optimizing software libraries}},
year = {1999}
}
@article{Talbi2002,
author = {Talbi, E G},
journal = {Journal of heuristics},
number = {5},
pages = {541--564},
title = {{A taxonomy of hybrid metaheuristics}},
volume = {8},
year = {2002}
}
@book{Oklobdzija2003,
author = {Oklobdzija, Vojin G. and Stojanovic, Vladimir M. and Markovic, Dejan M. and Nedovic, Nikola M.},
isbn = {047127447X},
pages = {264},
publisher = {Wiley-IEEE Press},
title = {{Digital System Clocking: High-Performance and Low-Power Aspects}},
url = {http://www.amazon.com/Digital-System-Clocking-High-Performance-Low-Power/dp/047127447X},
year = {2003}
}
@book{Mauerer2008,
author = {Mauerer, Wolfgang},
isbn = {0470343435},
pages = {1368},
publisher = {Wrox},
title = {{Professional Linux Kernel Architecture (Wrox Programmer to Programmer)}},
url = {http://www.amazon.com/Professional-Linux-Kernel-Architecture-Programmer/dp/0470343435},
year = {2008}
}
@inproceedings{Zaki2003,
abstract = {The syntax analyzer tool for Verilog programs are discussed. These tools can be used as front end to debugging and program verification tools. A Verilog design can be modeled by either the control data flow graph (CFG) or the data dependency graph (DDG). The automated tool discussed, generates the respective CFG and DDG.},
address = {Montreal, Canada},
annote = {Zaki2003-Syntax code analysis and generation for Verilog.pdf
inproceedings
Xin Meng
Program debugging
Syntax code analysis;},
author = {Zaki, Mohamed and Tahar, Sofiene},
booktitle = {Canadian Conference on Electrical and Computer Engineering},
keywords = {Computer hardware,Computer hardware description languages,Computer software,Data flow analysis,EI,Zaki2003},
mendeley-tags = {Zaki2003},
pages = {235--240},
title = {{Syntax Code Analysis and Generation for Verilog}},
volume = {1},
year = {2003}
}
@book{Beaulieu2009,
address = {Sebastopol, CA},
author = {Beaulieu, Alan},
edition = {2nd},
publisher = {O'Reilly Media, Inc.},
title = {{Learning SQL}},
year = {2009}
}
@misc{McNamara2008,
author = {McNamara, Michael},
title = {{Mac's verilog mode for Emacs}},
url = {http://www.verilog.com/verilog-mode.html},
year = {2008}
}
@inproceedings{Sirer1999,
annote = {lava},
author = {Sirer, E G and Bershad, B N},
booktitle = {Proceedings of the 2nd conference on Domain-specific languages},
pages = {1--13},
publisher = {ACM New York, NY, USA},
title = {{Using production grammars in software testing}},
year = {1999}
}
@article{Glover1990a,
author = {Glover, F},
journal = {Interfaces},
pages = {74--94},
title = {{Tabu search: a tutorial}},
year = {1990}
}
@inproceedings{Vuppala1997,
abstract = {Hardware description languages (HDLs) are frequently used to construct performance models to represent systems early in the design process. The HDLs are commonly known to be time-consuming and labor-intensive tools. For example, VHDL uses a large number of possible modeling approaches that can lead to designs which are unstructured and difficult to understand. This paper discusses a methodology to construct VHDL performance models which will help to significantly reduce the time from an initial conception to a working design. To further reduce development time, reuse of existing structural primitives is emphasized. Typical models of multi-processor architectures are very large and complex. Validation of theses models is difficult and time consuming. This paper also develops a methodology for model validation. A seventeen processor raceway architecture that was developed as a part of the ongoing RASSP (Rapid Prototyping of Application Specific Signal Processors) project, is used as a template to illustrate the new methodologies of performance model construction and model validation. The design consists of seventeen processors interconnected by multiple crossbar switches. Two software algorithms were mapped onto the architecture: a Synthetic Aperture Radar (SAR) Range Processing Algorithm and a SAR Multiswath Processing Algorithm. The methodologies developed in this thesis will considerably reduce the amount of time needed to construct and validate performance models of complex multiprocessor architectures},
author = {Vuppala, S and Gray, F G and Armstrong, J R},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
keywords = {VHDL performance,VHDL performance models,hardware description languages,model construction,multi-processor architectures,multiple crossbar switches,multiprocessing systems,multiprocessor architectures,parallel architectures,performance evaluation,validation},
pages = {29--35},
title = {{Methodology for VHDL performance model construction and validation}},
year = {1997}
}
@article{Konak2006,
author = {Konak, A and Coit, D W and Smith, A E},
journal = {Reliability Engineering and System Safety},
number = {9},
pages = {992--1007},
title = {{Multi-objective optimization using genetic algorithms: A tutorial}},
volume = {91},
year = {2006}
}
@article{Cesario2002,
abstract = {This paper presents a high-level component-based methodology and design environment for application-specific multicore SoC architectures. Component-based design provides primitives to build complex architectures from basic components. This bottom-up approach allows design-architects to explore efficient custom solutions with best performances. This paper presents a high-level component-based methodology and design environment for application-specific multicore SoC architectures. The system specifications are represented as a virtual architecture described in a SystemC-like model and annotated with a set of configuration parameters. Our component-based design environment provides automatic wrapper-generation tools able to synthesize hardware interfaces, device drivers, and operating systems that implement a high-level interconnect API. This approach, experimented over a VDSL system, shows a drastic design time reduction without any significant efficiency loss in the final circuit.},
author = {Cesario, W and Baghdadi, A and Gauthier, L and Lyonnard, D and Nicolescu, G and Paviot, Y and Yoo, S and Jerraya, A and Diaz-Nava, M},
journal = {Proceedings of the Design Automation Conference (DAC)},
pages = {789--794},
title = {{Component-Based Design Approach for Multicore SoCs}},
year = {2002}
}
@book{Sedgewick2011,
author = {Sedgewick, Robert and Wayne, Kevin},
publisher = {Addison-Wesley Professional},
title = {{Algorithms (4th Edition)}},
url = {http://www.amazon.co.uk/Algorithms-4th-Edition-ebook/dp/B004P8J1NA},
year = {2011}
}
@book{Hansen1999,
address = {Des Moines, IA},
author = {Hansen, Michael and Rischel, Hans},
edition = {1st},
publisher = {Addison Wesley},
title = {{Introduction to Programming using SML}},
year = {1999}
}
@article{Knowles2000,
author = {Knowles, J D and Corne, D W},
journal = {Evolutionary computation},
number = {2},
pages = {149--172},
title = {{Approximating the nondominated front using the pareto archived evolution strategy}},
volume = {8},
year = {2000}
}
@article{Sangiovanni-Vincentelli2001,
author = {Sangiovanni-Vincentelli, A and Martin, G},
journal = {IEEE Design \& Test of Computers},
pages = {23--33},
title = {{Platform-based design and software design methodology for embedded systems}},
year = {2001}
}
@book{Bergeron2005,
address = {New York},
author = {Bergeron, Janick and Cerny, Eduard and Hunter, Alan and Nightingale, Andy},
publisher = {Sprigner},
title = {{Verification Methodology Manual for SystemVerilog}},
year = {2005}
}
@book{Petzold2008,
author = {Petzold, Charles},
pages = {384},
publisher = {John Wiley \& Sons},
title = {{The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine}},
url = {http://www.amazon.co.uk/The-Annotated-Turing-Historic-Computability/dp/0470229055},
year = {2008}
}
@inproceedings{1263543,
abstract = {EPG-sim is a newly-developed set of tools that performs execution-driven critical path simulation, trace generation, and simulation for serial, optimistically parallelized, and parallel application codes. These capabilities are integrated within a single framework through the use of intelligent source-level instrumentation. The ability to perform execution-driven simulations driven by optimistically parallelized codes, the ability to execute these simulations on parallel hosts, the use of source-level instrumentation, and the integration of the capabilities provided by EPG-sim are among the novel contributions of this work. EPG-sim has important uses in studying parallel architectures, parallelizing compilers, and parallel applications.},
author = {Poulsen, D K and Yew, P.-C.},
booktitle = {Supercomputing '93. Proceedings},
doi = {10.1109/SUPERC.1993.1263543},
issn = {1063-9535},
keywords = {EPG-sim,execution-driven critical path simulation},
pages = {860--869},
title = {{Execution-driven tools for parallel simulation of parallel architectures and applications}},
year = {1993}
}
@book{Wall2000,
address = {Sebastopol, CA},
author = {Wall, Larry and Christiansen, Tom and Orwant, Jon},
edition = {3rd},
publisher = {O'Reilly Media, Inc.},
title = {{Programming Perl}},
year = {2000}
}
@misc{Boost2009,
author = {Boost},
title = {{Boost C++ Library}},
url = {http://www.boost.org},
year = {2009}
}
@article{Zadeh1973,
author = {Zadeh, L A},
journal = {IEEE Transactions on Systems, Man, and Cybernetics},
pages = {28--44},
title = {{Outline of a new approach to the analysis of complex systems and decision processes}},
volume = {3},
year = {1973}
}
@book{Churiwala2011,
author = {Churiwala, Sanjay and Garg, Sapan},
isbn = {1441992952},
pages = {220},
publisher = {Springer},
title = {{Principles of VLSI RTL Design: A Practical Guide}},
url = {http://www.amazon.com/Principles-VLSI-RTL-Design-Practical/dp/1441992952},
year = {2011}
}
@book{Czarnecki2000,
address = {Des Moines, IA},
author = {Czarnecki, Krysztof and Eisenecker, Ulrich},
publisher = {Addison-Wesley Professional},
title = {{Generative Programming: Methods, Tools, and Applications}},
year = {2000}
}
@book{Bhasker2004,
address = {Allentown, PA},
author = {Bhasker, J},
edition = {2nd},
publisher = {Star Galaxy Publishing},
title = {{A SystemC Primer}},
year = {2004}
}
@book{Chang1999,
author = {Chang, H and Cooke, L and Hunt, M},
publisher = {Kluwer academic publishers},
title = {{Surviving the SOC revolution: a guide to platform-based design}},
year = {1999}
}
@article{xreg-paper-jzu,
abstract = {Traditional module based reuse methodology for SoC design has some drawbacks when faced with reuse of structure and abstract contents. This paper proposes a fine-grained reuse methodology named FGRX based on XML Schema as an extension to traditional methodology. By carefully analyzing existing designs, some smaller logic blocks, code snippets and abstract contents can be abstracted as reusable objects, which can be further used to construct a primitive set. Inter-dependencies between abstract reusable objects are organized in reusing rules set. Primitive set and reusing rule set are formally defined using XML Schema. Similar designs are described at primitive level in XML format, which is statically validated by a checker that is automatically generated by XML Validator according to the defined XML Schema. Translation rules are defined in XSLT to translate primitive design description into other standard design file formats. Detailed semantic checks can be implemented in XSLT to thoroughly validate design. FGRX and its application were discussed in detail via a case study in paper. FGRX was used several chip development projects and proven helpful to maximize the reuse of existing design, simplify development of similar module or chips in same product line, get significant code reduction, and improve team efficiency.},
author = {Meng, Xin and Shen, Haibin and Yan, Xiaolang},
doi = {10.3785/j.issn.1008-973X.2011.03.015},
journal = {Journal of Zhejiang University (Engineering Science)},
number = {3},
pages = {486--494},
title = {{An XML Schema based fine-grained SoC reuse methodology}},
volume = {45},
year = {2011}
}
@inproceedings{AjmoneMarsan1994,
abstract = {Performance analysis and formal correctness verification of computer communication protocols and distributed systems have traditionally been considered as two separate fields. However, their integration can be achieved by using formal description techniques as paradigms for performance modeling. The authors investigate the possibility of using LOTOS, one of the two formal specification languages that have been standardized by ISO, as the formal basis for performance modeling. A LOTOS extension which encompasses both timing and probabilistic aspects is proposed, and a general performance model derivable from extended LOTOS specification is identified. The performance model is open to different evaluation techniques. A simple example, a stop-and-wait protocol, is used to concretely demonstrate the new approach},
author = {{Ajmone Marsan}, M and Bianco, A and Ciminiera, L and Sisto, R and Valenzano, A},
booktitle = {Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, 1994., MASCOTS '94., Proceedings of the Second International Workshop on},
keywords = {ISO,LOTOS extension,LOTOS specification,LOTOS-based design,computer communication protocols,distributed systems,formal correctness verification,formal description techniques,formal specification,formal specification languages,formal verification,general performance model,performance analysis,performance evaluation,performance model,performance modeling,probabilistic aspects,protocols,specification languages,stop-and-wait protocol},
pages = {292--298},
title = {{Integrating performance analysis in the context of LOTOS-based design}},
year = {1994}
}
@article{Zitzler2004,
author = {Zitzler, E and Laumanns, M and Bleuler, S},
journal = {Metaheuristics for Multiobjective Optimisation},
pages = {3--38},
title = {{A tutorial on evolutionary multiobjective optimization}},
volume = {535},
year = {2004}
}
@article{Chen:2009:RLC:1592451.1592453,
address = {New York, NY, USA},
author = {Chen, Hubie},
doi = {http://doi.acm.org/10.1145/1592451.1592453},
issn = {0360-0300},
journal = {ACM Comput. Surv.},
keywords = { Schaefer's theorem, polymorphisms, propositional logic, quantified formulas,Constraint satisfaction},
month = dec,
number = {1},
pages = {2:1----2:32},
publisher = {ACM},
title = {{A rendezvous of logic, complexity, and algebra}},
url = {http://doi.acm.org/10.1145/1592451.1592453},
volume = {42},
year = {2009}
}
@misc{Graphviz2009,
author = {Graphviz},
keywords = {dot},
title = {{Graph Visualization software}},
url = {http://www.graphviz.org/},
year = {2009}
}
@inproceedings{Jian2007,
abstract = {The economic view analyzes the enterprise from the performance point of view, which is a significant component of the existing CIM architecture. Based on former conceptual frameworks of the economic view research, this paper points to performance modeling and knowledge representation, learning and management. Firstly, a fuzzy performance modeling method is proposed, aligned with a process model; and a related fuzzy performance measurement method is then presented. Secondly, to represent performance knowledge, the formalization of the fuzzy performance model is discussed, which will facilitate performance knowledge management. Thirdly, the fuzzy performance knowledge repository is suggested to be established with a learning mechanism and methods to retrieve and reuse fuzzy performance models being proposed.},
author = {Jian, Zhou and Browne, J and Xuan, Zhou and Folan, P and Qing, Li and Tianyuan, Xiao},
booktitle = {Systems, Man and Cybernetics, 2007. ISIC. IEEE International Conference on},
keywords = {CIM architecture,computer integrated manufacturing,economic view,enterprise,fuzzy performance knowledge repository,fuzzy performance measurement method,fuzzy performance model construction,fuzzy set theory,industrial economics,knowledge management,knowledge representation,learning mechanism},
pages = {354--359},
title = {{Fuzzy performance model construction \& formalization: its use/reuse in the Economic View}},
year = {2007}
}
@article{Nicolescu2002a,
author = {Nicolescu, G and Yoo, S and Bouchhima, A and Jerraya, A A},
journal = {Proceedings of the 15th international symposium on System Synthesis},
pages = {162--167},
title = {{Validation in a component-based design flow for multicore SoCs}},
year = {2002}
}
@inproceedings{Pllana2005,
abstract = {High-performance computing is essential for solving large problems and for reducing the time to solution for a single problem. Current top high-performance computing systems contain 1000's of processors. Therefore, new tools are needed to support the program development that will exploit high degrees of parallelism. The issue of model-based performance evaluation of real world programs on large scale systems is addressed in this paper. We present the Performance Prophet, which is a performance modeling and prediction tool for parallel and distributed programs. One of the main contributions of this paper is our methodology for reducing the time needed to evaluate the model. In addition, we describe our method for automatic performance model generation. We have implemented Performance Prophet in Java and C++. We illustrate our approach by modeling and simulating a real-world material science parallel program.},
author = {Pllana, S and Fahringer, T},
booktitle = {Parallel Processing, 2005. ICPP 2005 Workshops. International Conference Workshops on},
isbn = {1530-2016},
keywords = {C++ language,Java,Performance Prophet,automatic performance model generation,distributed programs,high-performance computing,material science parallel program,parallel programming,parallel programs,performance modeling tool,performance prediction tool,program development,software performance evaluation,software tools},
pages = {509--516},
title = {{Performance Prophet: a performance modeling and prediction tool for parallel and distributed programs}},
year = {2005}
}
@article{Gondow2002,
annote = {ACML},
author = {Gondow, K and Kawashima, H},
journal = {Electronic Notes in Theoretical Computer Science},
number = {3},
pages = {30--49},
title = {{Towards ANSI C program slicing using XML}},
volume = {65},
year = {2002}
}
@article{mhdl-paper,
abstract = {Configurable parameterized System-On-a-Chip (SoC) design using industry standard Hardware Description Language (HDL) is complicate and hard to maintain. A Domain-specific Language (DSL) named MetaHDL was presented for synthesizable functional description of configurable digital Very Large Scale Integrated (VLSI) circuits, ranging from logic oriented low-level module design to Intellectual Property (IP) based SoC integration. MetaHDL uses inference and parameter tracing technologies and has specific optimizations for circuit’s structure and functional descriptions, so as to improve language expressiveness, code readability and maintainability, and achieved over 65\% code reduction. MetaHDL provides a two-level code configuration system consisting comprehensive preprocessor and parameter tracing mechanism to ease the reuse-oriented module design and IP integration. MetaHDL has been used in the Unified Threat Management (UTM) chip development project, addressed various design challenges of complex reuse scenarios, and improved the project efficiency and quality.},
author = {Meng, Xin and Shen, Haibin and Yan, Xiaolang},
doi = {10.3785/j.issn.1008-973X.2010.06.005},
journal = {Journal of Zhejiang University (Engineering Science)},
keywords = {VLSI design,domain-specific language,hardware description language,reusable design},
number = {6},
pages = {1079--1085},
title = {{MetaHDL: inference and parameter tracing oriented domain-specific language for hardware description}},
volume = {44},
year = {2010}
}
@misc{JAPISoft2008,
author = {JAPISoft},
title = {{Editix XML Editor}},
url = {http://www.editix.com},
year = {2008}
}
@inproceedings{Chamberlain1998,
abstract = {ZPL is a parallel array language designed for high performance scientific and engineering computations. Unlike other parallel languages, ZPL is founded on a machine model (the CTA) that accurately abstracts contemporary MIMD parallel computers. This makes it possible to correlate ZPL programs with machine behavior. As a result, programmers can reason about how code will perform on a typical parallel machine and thereby make informed decisions between alternative programming solutions. The paper describes ZPL's performance model and its syntactic cues for conveying operation cost. The what you see is what you get (WYSIWYG) nature of ZPL operations is demonstrated on the IBM SP-2, Intel Paragon, SGI Power Challenge, and Cray T3E. Additionally, the model is used to evaluate two algorithms for matrix multiplication. Experiments show that the performance model correctly predicts the faster solution on all four platforms for a range of problem sizes},
author = {Chamberlain, B L and Lin, C and Choi, SungEun and Snyder, L and Lewis, E C and Weathersby, W D},
booktitle = {High-Level Parallel Programming Models and Supportive Environments, 1998. Proceedings. Third International Workshop on},
keywords = {CTA,Cray T3E,IBM SP-2,Intel Paragon,SGI Power Challenge,WYSIWYG,WYSIWYG performance model,ZPL operations,ZPL parallel array language,ZPL programs,contemporary MIMD parallel computers,machine behavior,machine model,mathematics computing,matrix multiplication,operation cost,parallel architectures,parallel languages,parallel machine,parallel programming,performance model,programming solutions,syntactic cues},
pages = {50--61},
title = {{ZPL's WYSIWYG performance model}},
year = {1998}
}
@article{Zadeh1965,
author = {Zadeh, L A},
journal = {Fuzzy Systems and AI Reports and Letters},
pages = {129--136},
title = {{Fuzzy sets}},
volume = {61},
year = {1965}
}
@book{Rixner2002,
annote = {513009},
author = {Rixner, Scott},
isbn = {0-7923-7545-9},
pages = {136},
publisher = {Kluwer Academic Publishers},
title = {{Stream processor architecture}},
year = {2002}
}
@book{Boyd2004,
author = {Boyd, Stephen and Vandenberghe, Lieven},
isbn = {0521833787},
pages = {730},
publisher = {Cambridge University Press},
title = {{Convex Optimization}},
url = {http://www.amazon.com/Convex-Optimization-Stephen-Boyd/dp/0521833787},
year = {2004}
}
@book{Kang1990,
address = {Pittsburph, PA},
annote = {11
book
Xin Meng},
author = {Kang, Kyo C and Cohen, S G and {Hess  Novak W. E.}, J A and Peteron, A S},
keywords = {Kang1990},
mendeley-tags = {Kang1990},
publisher = {Software Engineering Institute, Carnegie Mellon University},
title = {{Feature-Oriented domain analysis (FODA) feasibility study}},
year = {1990}
}
@book{Trzaskalik2002,
address = {Heidelberg},
author = {Trzaskalik, Tadeusz and Michnik, Jerzy},
publisher = {Physica-Verlag Heidelberg},
title = {{Multiple Objective and Goal Programming: Recent Developments (Advances in Intelligent and Soft Computing)}},
year = {2002}
}
@article{2006b,
abstract = {设计Pareto档案多目标粒子群优化（PAMOPSO）．该算法利用改进的强度Pareto进化算法2（SPEA2）对外部档案进行维护．并在维护过程中，为每个粒子从档案中选取合适的全局最好位置，将档案维护和全局最好位置选取结合在一起．将该算法应用于5个测试实例并与3种多目标优化算法比较，计算结果表明该算法性能良好},
author = {雷德明 and 吴智铭},
journal = {模式识别与人工智能},
number = {004},
pages = {475--480},
title = {{Pareto 档案多目标粒子群优化}},
volume = {19},
year = {2006}
}
@book{DeMarco1999,
abstract = {Demarco and Lister demonstrate that the major issues of software development are human, not technical. Their answers aren't easy--just incredibly successful. New second edition features eight all-new chapters},
address = {New York},
annote = {Feb
Amazon rating 5 stars
book
Xin Meng
ISBN-10: 0932633439 ISBN-13: 978-0932633439},
author = {DeMarco, Tom and Lister, Timothy},
edition = {2nd},
keywords = {Tom1999},
mendeley-tags = {Tom1999},
publisher = {Dorset House Publishing Company, Incorporated},
title = {{Peopleware: Productive Projects and Teams}},
url = {http://www.amazon.com/Peopleware-Productive-Projects-Tom-DeMarco/dp/0932633439/ref=pd\_bbs\_sr\_1?ie=UTF8\&s=books\&qid=1196599090\&sr=8-1},
year = {1999}
}
@inproceedings{Walrath1996,
abstract = {Tradeoff analysis is a central aspect of any design process. Languages and tools to support performance modeling and tradeoff analysis are necessary to facilitate rapid prototyping of designs. An effective modeling and evaluation environment reduces the overall design time of both the prototype and the final product by helping designers in determining which parameters of a design are critical for meeting a set of desired performance goals. This paper describes a case study in performance modeling using a language called PDL (Performance Modeling Language). The PDL system supports tradeoff analysis and performance visualization. This paper also addresses some of the key issues for successful tradeoff analysis during rapid prototyping and explains how many features of PDL make it a suitable choice for this purpose},
address = {Chicago, IL},
author = {Walrath, J and Chatha, S and Vemuri, R and Narasimhan, N and Srinivasan, V},
booktitle = {Proceedings of International Conference on Application Specific Systems, Architectures and Processors, 1996. ASAP 96. },
keywords = {PDL,Performance Modeling Language,performance modeling,performance visualization,rapid prototyping,software performance evaluation,software prototyping,tradeoff analysis},
pages = {313--322},
title = {{Performance modeling and tradeoff analysis during rapid prototyping}},
year = {1996}
}
@inproceedings{Beidas2004,
abstract = {Few analytical performance models that relate performance figure of merit to architectural design decisions are reported in recent studies of network-on-chip, which prevents the development of effective system-level synthesis techniques. We propose an analytical performance model based on queuing theory for a network-on-chip platform recently reported, which features an extremely simple programming model, while providing superior performance measures when compared with alternative architectures. We developed a multi-processor simulation framework, which can simulate an application at the instruction set level given an architecture configuration, to validate the analytical performance model. The accuracy and applicability of the proposed model is illustrated by two real-life applications, namely an SSL security acceleration processor and MP3 decoder.},
author = {Beidas, R and Jianwen, Zhu},
booktitle = {Embedded Systems for Real-Time Multimedia, 2004. ESTImedia 2004. 2nd Workshop on},
keywords = {MP3 decoder,SSL security acceleration processor,analytical performance model,architectural design decision,architecture configuration,computer architecture,context-flow system-on-chip platform,high level synthesis,instruction set level,instruction sets,microprogramming,multiprocessor simulation framework,network-on-chip,programming model,queueing theory,queuing theory,queuing-theoretic performance model,real-life application,real-time systems,system-level synthesis techniques,system-on-chip},
pages = {21--26},
title = {{A queuing-theoretic performance model for context-flow system-on-chip platforms}},
year = {2004}
}
@article{VanGemund2003,
abstract = {Performance prediction is an important engineering tool that provides valuable feedback on design choices in program synthesis and machine architecture development. We present an analytic performance modeling approach aimed to minimize prediction cost, while providing a prediction accuracy that is sufficient to enable major code and data mapping decisions. Our approach is based on a performance simulation language called PAMELA. Apart from simulation, PAMELA features a symbolic analysis technique that enables PAMELA models to be compiled into symbolic performance models that trade prediction accuracy for the lowest possible solution cost. We demonstrate our approach through a large number of theoretical and practical modeling case studies, including six parallel programs and two distributed-memory machines. The average prediction error of our approach is less than 10 percent, while the average worst-case error is limited to 50 percent. It is shown that this accuracy is sufficient to correctly select the best coding or partitioning strategy. For programs expressed in a high-level, structured programming model, such as data-parallel programs, symbolic performance modeling can be entirely automated. We report on experiments with a PAMELA model generator built within a dataparallel compiler for distributed-memory machines. Our results show that with negligible program annotation, symbolic performance models are automatically compiled in seconds, while their solution cost is in the order of milliseconds.},
author = {van Gemund, A J C},
isbn = {1045-9219},
journal = {Parallel and Distributed Systems, IEEE Transactions on},
keywords = {PAMELA simulation language,analytic performance modeling,average worst-case error,data mapping decisions,distributed memory systems,distributed-memory machines,machine architecture development,parallel compiler,parallel processing,parallel programming,parallel programs,parallel systems,parallelising compilers,partitioning strategy,performance evaluation,performance prediction,program synthesis,symbolic performance modeling},
number = {2},
pages = {154--165},
title = {{Symbolic performance modeling of parallel systems}},
volume = {14},
year = {2003}
}
@inproceedings{Gray2003,
annote = {MSF},
author = {Gray, J and Karsai, G},
booktitle = {36th Annual Hawaii International Conference on System Sciences (HICSS'03)-Track},
pages = {6--9},
title = {{An examination of DSLs for concisely representing model traversals and transformations}},
volume = {9},
year = {2003}
}
@article{Mernik2005,
abstract = {Domain-specific languages (DSLs) are languages tailored to a specific application domain. They offer substantial gains in expressiveness and ease of use compared with general-purpose programming languages in their domain of application. DSL development is hard, requiring both domain knowledge and language development expertise. Few people have both. Not surprisingly, the decision to develop a DSL is often postponed indefinitely, if considered at all, and most DSLs never get beyond the application library stage. Although many articles have been written on the development of particular DSLs, there is very limited literature on DSL development methodologies and many questions remain regarding when and how to develop a DSL. To aid the DSL developer, we identify patterns in the decision, analysis, design, and implementation phases of DSL development. Our patterns improve and extend earlier work on DSL design patterns. We also discuss domain analysis tools and language development systems that may help to speed up DSL development. Finally, we present a number of open problems. \&copy; 2005 ACM.},
annote = {article
Computer programming languages
Domain-specific language (DSL);Application language;Domain analysis;Language development system;},
author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony M},
isbn = {0360-0300},
journal = {ACM Computing Surveys},
keywords = {Decision theory,Knowledge acquisition,Logic design,Mernik2005,Pattern recognition},
mendeley-tags = {Mernik2005},
number = {4},
pages = {316--344},
title = {{When and how to develop domain-specific languages}},
volume = {37},
year = {2005}
}
@misc{Siek2009,
author = {Siek, Jeremy},
title = {{The Boost Graph Library}},
url = {http://www.boost.org/doc/libs/1\_38\_0/libs/graph/doc/table\_of\_contents.html},
year = {2009}
}
@inproceedings{Kennedy1995,
author = {Kennedy, J and Eberhart, R},
booktitle = {IEEE International Conference on Neural Networks, 1995. Proceedings.},
title = {{Particle swarm optimization}},
volume = {4},
year = {1995}
}
@misc{Eclipse2008,
author = {Eclipse},
title = {{Eclipse - an open development platform}},
url = {http://www.eclipse.org},
year = {2008}
}
@inproceedings{Devadas1995,
annote = {讨论了各种降低功耗的优化方法.},
author = {Devadas, S and Malik, S},
booktitle = {Proceedings of the 32nd ACM/IEEE conference on Design automation},
pages = {242--247},
publisher = {ACM New York, NY, USA},
title = {{A survey of optimization techniques targeting low power VLSI circuits}},
year = {1995}
}
@book{Alexandrescu2001,
address = {Des Moines, IA},
author = {Alexandrescu, Andrei},
publisher = {Addison-Wesley Professional},
title = {{Modern C++ Design: Generic Programming and Design Patterns Applied}},
year = {2001}
}
@article{Cardoso:2010:CRC:1749603.1749604,
abstract = {Reconfigurable computing platforms offer the promise of substantially accelerating computations through the concurrent nature of hardware structures and the ability of these architectures for hardware customization. Effectively programming such reconfigurable architectures, however, is an extremely cumbersome and error-prone process, as it requires programmers to assume the role of hardware designers while mastering hardware description languages, thus limiting the acceptance and dissemination of this promising technology. To address this problem, researchers have developed numerous approaches at both the programming languages as well as the compilation levels, to offer high-level programming abstractions that would allow programmers to easily map applications to reconfigurable architectures. This survey describes the major research efforts on compilation techniques for reconfigurable computing architectures. The survey focuses on efforts that map computations written in imperative programming languages to reconfigurable architectures and identifies the main compilation and synthesis techniques used in this mapping.},
address = {New York, NY, USA},
author = {Cardoso, Jo\~{a}o M P and Diniz, Pedro C and Weinhardt, Markus},
doi = {http://doi.acm.org/10.1145/1749603.1749604},
issn = {0360-0300},
journal = {ACM Comput. Surv.},
keywords = {Compilation,FPGA,custom-computing platforms,hardware compilers,high-level synthesis,mapping methods,reconfigurable computing},
month = jun,
number = {4},
pages = {13:1----13:65},
publisher = {ACM},
title = {{Compiling for reconfigurable computing: A survey}},
url = {http://doi.acm.org/10.1145/1749603.1749604},
volume = {42},
year = {2010}
}
@article{pml-paper,
abstract = {Traditional modeling method based on module descriptions is not accurate, flexible and expansive in design iteration. This paper proposes a transaction dataflow based modeling methodology named TBPM. System can easily be modeled by data flow specification, resource allocation, performance parameter annotation, and arbitration algorithm specification. This method focuses on parameters used in performance analysis. It eliminates complexities of module descriptions, simplifies modeling process, and improves efficiency of analysis. Core TBPM modeling concepts were implemented in a C++ generic library called TDFLib. SystemC timing controlling mechanism was integrated in TDFLib. A domain specific language named PML was designed to describe SoC performance model. PML source code was compiled to C++ code that only contain TDFLib API calling. C++ code was further compiled and linked with reusable simulation framework to con-struct an executable model to perform cycle-accurate simulation under control of SystemC kernel. All runtime status ware dumped into MySQL database for post analysis. The methodology was adopted in a real chip development project and was proven helpful for performance validation in architecture design stage. It is highlighted for quick model creation, effi-cient performance analysis for parallel transaction processing and fast design space exploration.},
author = {Meng, Xin and Shen, Haibin and Yan, Xiaolang},
doi = {10.3785/j.issn.1008-973X.2011.02.019},
journal = {Journal of Zhejiang University (Engineering Science)},
number = {2},
pages = {314--322},
title = {{SoC performance modeling methodology and implementation based on transaction dataflow}},
volume = {45},
year = {2011}
}
@inproceedings{Bhatia2006,
abstract = {Current state-of-art HPCMP performance modeling techniques primarily rely on combining a performance profile of an application on a well-known HPC architecture, and the machine characteristics of an emerging architecture to project an application's performance on the emerging architecture. Existing profiling and tracing tools on well-known architectures are typically used to collect the necessary performance data by executing applications and benchmarks on available systems. Since the performance enhancing features of novel processing devices may be significantly different from a conventional microprocessor system, current performance modeling schemes have limited applicability on systems like the Cray X1E vector supercomputer and parallel systems with accelerator devices like Cray XD1, which contains FPGAs. We employ an application modeling paradigm that allows a user to develop not only "architecture aware" but also "application aware"performance models. We extend the modeling assertions (MA) framework that permits a user to develop multi-resolution, parameterized symbolic models. We demonstrate the application of our modeling scheme by augmenting the MA models with performance enhancing attributes of the Cray X1E Multistrearning Processors (MSPs). Using the extended MA framework, we develop symbolic performance models of critical code blocks of an HPCMP 71-06 benchmark called HYCOM - an ocean modeling code. By representing the code characteristics of the critical code blocks in terms of both unique architectural attributes and key input parameters of the HYCOM application, we manage to reduce and sustain performance prediction error rates to less than 30\%},
author = {Bhatia, N and Alam, S R and Vetter, J S},
booktitle = {HPCMP Users Group Conference, 2006},
keywords = {Cray X1E Multistrearning Processors,Cray X1E vector supercomputer,Cray XD1,HPC architectures,HPCMP performance modeling,microprocessor system,modeling assertions framework,parallel architectures,parallel machines,parallel systems,performance evaluation},
pages = {367--373},
title = {{Performance Modeling of Emerging HPC Architectures}},
year = {2006}
}
@book{Walsh2010,
author = {Walsh, Norman},
pages = {552},
publisher = {O'Reilly Media},
title = {{DocBook 5: The Definitive Guide}},
url = {http://www.amazon.co.uk/DocBook-5-The-Definitive-Guide/dp/0596805020},
year = {2010}
}
@book{Scott2005,
address = {Burlington, MA},
annote = {book
Xin Meng},
author = {Scott, Michael L},
edition = {2nd},
keywords = {Scott2005},
mendeley-tags = {Scott2005},
publisher = {Morgan Kaufmann},
title = {{Programming Language Pragmatics}},
year = {2005}
}
@inproceedings{Vuppala1997a,
abstract = {Hardware description languages (HDLs) are frequently used to construct performance models to represent systems early in the design process. The HDLs are commonly known to be time-consuming and labor-intensive tools. For example, VHDL uses a large number of possible modeling approaches that can lead to designs which are unstructured and difficult to understand. This paper discusses a methodology to construct VHDL performance models which will help to significantly reduce the time from an initial conception to a working design. To further reduce development time, reuse of existing structural primitives is emphasized. Typical models of multi-processor architectures are very large and complex. Validation of theses models is difficult and time consuming. This paper also develops a methodology for model validation. A seventeen processor raceway architecture that was developed as a part of the ongoing RASSP (Rapid Prototyping of Application Specific Signal Processors) project, is used as a template to illustrate the new methodologies of performance model construction and model validation. The design consists of seventeen processors interconnected by multiple crossbar switches. Two software algorithms were mapped onto the architecture: a Synthetic Aperture Radar (SAR) Range Processing Algorithm and a SAR Multiswath Processing Algorithm. The methodologies developed in this thesis will considerably reduce the amount of time needed to construct and validate performance models of complex multiprocessor architectures},
address = {Blacksburg, VA },
annote = {article
xin\_meng},
author = {Vuppala, S and Gray, F G and Armstrong, J R},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
keywords = {598604,hardware description languages, multiprocessing sy},
mendeley-tags = {598604},
pages = {29--35},
title = {{Methodology for VHDL performance model construction and validation}},
year = {1997}
}
@article{Grotschel1995,
author = {Grotschel, M and Lovasz, L and Algorithms, A S G},
journal = {Handbook of combinatorics},
pages = {1541--1597},
title = {{Combinatorial optimization}},
volume = {2},
year = {1995}
}
@book{Austern1999,
address = {Des Moines, IA},
author = {Austern, Matthew H},
publisher = {Addison-Wesley Professional},
title = {{Generic Programming and the STL: Using and Extending the C++ Standard Template Library}},
year = {1999}
}
@inproceedings{Arnold1997,
abstract = {Different synthesis vendors support different subsets of Verilog. One such subset is the implicit style state machine (multiple uses of edge triggered events within on always block). With this style, one can obtain working silicon in less time because the implicit style is more like software design. Unfortunately, most synthesis vendors do not support the implicit style. To make the implicit style more accessible, a freely available synthesis preprocessor is described here that converts implicit style always blocks into other equivalent Verilog, which can then be synthesized by most commercial synthesis tools. This paper discusses advantages of the implicit style, how the preprocessor translates implicit style code into a one-hot design, and why the language subset (non-blocking assignment) was chosen so that the semantics of the synthesized Verilog can agree with the simulation semantics defined IEEE 1364. More information about our preprocessor can be found at http://plum.uwyo.edu/<sup>(tilde)</sup>vito or http://cs.brockport.edu/<sup>(tilde)</sup>jshuler/vito/.},
address = {Santa Clara, CA, USA},
annote = {inproceedings
xin\_meng
Computer aided logic design
Verilog hardware description language;Software package Synopsys design compiler;},
author = {Arnold, Mark G and Shuler, James D},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Arnold1997,Computational linguistics,Computer hardware description languages,Computer simulation,Computer software,Electric network synthesis,Program processors},
mendeley-tags = {Arnold1997},
pages = {38--45},
title = {{Synthesis preprocessor that converts implicit style Verilog into one-hot designs}},
year = {1997}
}
@misc{SyncRO2008,
author = {SyncRO},
title = {{oXygen XML Editor and XSLT debugger}},
url = {http://www.oxygenxml.com},
year = {2008}
}
@inproceedings{Palnitkar1994,
abstract = {In this paper we describe a novel approach to verify finite state machines. We describe the finite state machine(FSM) trace analysis tool that analyzes run time traces of finite state machines while the FSMs are being simulated and reports to the user information about state transitions and arcs traversed. During the flow, this tool creates a separate verilog monitor routine for each FSM in the design and these monitor routines print out the necessary information. Therefore, this tool is useful for all Verilog FSM designers because they do not have to include arc monitoring in their verilog code when writing the FSMs. The FSM analysis tool is integrated well into the Verilog/Synopsys design methodology.},
address = {Santa Clara, CA, USA},
annote = {Palnitkar1994-FSM analysis tool.pdf
inproceedings
Xin Meng
Finite automata
Finite state machine trace analysis program;Run time tracers;Arc monitoring;Verilog monitor routines;},
author = {Palnitkar, Samir and Saggurti, Prasad and Kuang, Ser-Hou},
booktitle = {Proceedings of the 1994 International Verilog HDL Conference},
keywords = {Computer aided analysis,Computer hardware description languages,Computer simulation,Computer software,EI,Monitoring,Palnitkar1994,Response time (computer systems),Systems analysis,User interfaces},
mendeley-tags = {Palnitkar1994},
pages = {52--57},
title = {{Finite state machine trace analysis program}},
year = {1994}
}
@article{Lin1997,
abstract = {There has been rapid growth in the demand for mobile communications that has led to intensive research and development of complex PCS (personal communication services) networks. Capacity planning and performance modeling are necessary to maintain a high quality of service to the PCS subscriber while minimizing costs. Effective and practical performance models for large-scale PCS networks are available. Two new performance models are presented in this article which can be solved using analytical techniques. The first is the so-called portable population model, based on the flow equivalent assumption (the rate of portables into a cell equals the rate of portables out of the cell). The model provides the steady-state portable population distribution in a cell that is independent of the portable residual time distribution, which can be used by simulations to reduce the necessary execution time by reaching the steady state more rapidly. Additionally, this model can be used to study the blocking probability of a low (portable) mobility PCS network and the performance of portable deregistration strategies. The second model is the so-called portable movement model which can be used to study location tracking and handoff algorithms. The model assumes that the arriving calls to a portable form a Poisson process, and portable residual times have a general distribution. This model can be used to study location-tracking algorithms and handoff algorithms. It is shown that under some assumptions, the analytic techniques are consistent with the simulation model},
author = {Lin, Yi-Bing},
isbn = {0163-6804},
journal = {Communications Magazine, IEEE},
keywords = {blocking probability,capacity planning,cellular radio,execution time,flow equivalent assumption,handoff algorithms,large-scale PCS networks,location-tracking algorithms,mobile communications,mobile radio,performance modeling,performance models,personal communication networks,personal communication services,portable deregistration strategies,portable movement model,portable population model,portable residual time distribution,quality of service,steady-state portable population distribution,tracking},
number = {2},
pages = {102--107},
title = {{Modeling techniques for large-scale PCS networks}},
volume = {35},
year = {1997}
}
@book{Copeland2004,
author = {Copeland, B. Jack.},
pages = {624},
publisher = {Clarendon Press},
title = {{The Essential Turing}},
url = {http://www.amazon.co.uk/The-Essential-Turing-Jack-Copeland/dp/0198250800},
year = {2004}
}
@inproceedings{Smarkusky2000,
abstract = {Performance modeling and evaluation techniques are essential when designing and implementing distributed software systems. Constructing performance models for such systems can require significant effort. This paper presents Hierarchical Performance Modeling as a technique to model performance for different layers of abstraction. Once the system architecture and software functionality have been specified, this model supports performance model generation for the evaluation and analysis of computation delays of software processes, communication delays of distributed software architectures, and hardware platform alternatives. A simplified example is presented to illustrate the concepts of the Hierarchical Performance Model},
address = {Antibes-Juan les Pins },
annote = {article
xin\_meng},
author = {Smarkusky, D and Ammar, R and Antonios, I and Sholl, H},
booktitle = {Fifth IEEE Symposium on Computers and Communications, 2000. Proceedings. ISCC 2000. },
keywords = {860714,distributed processing, software architecture, sof},
mendeley-tags = {860714},
pages = {659--664},
title = {{Hierarchical performance modeling for distributed system architectures}},
year = {2000}
}
@article{2007,
author = {刘淳安 and 王宇平},
journal = {电子学报},
number = {006},
pages = {1118--1121},
title = {动态多目标优化的进化算法及其收敛性分析},
volume = {35},
year = {2007}
}
@inproceedings{Bourque2006,
abstract = {A major difficulty with current organizational performance models in software engineering management is to represent many possible viewpoints quantitatively and in a consolidated manner, while at the same time keeping track of the values of the individual dimensions of performance. The models currently proposed do not meet the analytical requirements of software engineering management when various viewpoints must be taken into account concurrently. This paper presents a selection of multidimensional models of performance in software engineering and in management. It then describes the proposed concepts for a tool for multidimensional performance modeling in software engineering management. The tool would adopt an organizational framework of performance and build upon an open, generic and geometrical approach to performance modeling called QEST. It would also enable the user to select different visualization techniques to analyze data. In addition, the proposed tool would allow the user to iteratively define, collect and analyze multidimensional measures at each life cycle phase, and even enter potential results for subsequent phases. The initial test bed of the proposed tool would be the repository of project data of the International Software Benchmarking Standards Group (ISBSG)},
author = {Bourque, P and Stroian, V and Abran, A},
booktitle = {Industrial Electronics, 2006 IEEE International Symposium on},
keywords = {ISBSG,International Software Benchmarking Standards Grou,Multidimensional management models,Performance modeling,QEST,Visualization,geometrical approach,life cycle phase,multidimensional performance modeling,organisational aspects,organizational performance models,software engineering,software engineering management,software management,visualization techniques},
pages = {3252--3257},
title = {{Proposed Concepts for a Tool for Multidimensional Performance Modeling in Software Engineering Management}},
volume = {4},
year = {2006}
}
@book{Hopcroft2006,
address = {Des Moines, IA},
author = {Hopcroft, John E and Motwani, Rajeev and Ullman, Jeffrey D},
edition = {3rd},
publisher = {Addison Wesley},
title = {{Introduction to Automata Theory, Languages, and Computation}},
year = {2006}
}
@misc{TheMendeleySupportTeam2011b,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@book{Courant1998,
author = {Courant, Richard and John, Fritz},
isbn = {354065058X},
pages = {661},
publisher = {Springer},
title = {{Introduction to Calculus and Analysis, Vol. 1 (Classics in Mathematics)}},
url = {http://www.amazon.com/Introduction-Calculus-Analysis-Classics-Mathematics/dp/354065058X},
year = {1998}
}
@misc{PCI-SIG2003,
author = {PCI-SIG},
booktitle = {PCI-SIG},
title = {{PCI Express Base Specification Revision 1.0a}},
year = {2003}
}
@inproceedings{Wang2006,
abstract = {In this paper, we study the performance modeling of a MAC protocol for ad hoc networks. Dual busy tone multiple access (DBTMA) is one of the MAC protocols designed for ad hoc networks. The existing performance model of DBTMA fails to take into consideration multi-cell interference, known as hidden terminal problem. We present a performance analysis that takes into account the multi-cell interference. The numerical results show lower channel throughput than that predicted by the existing performance model of DBTMA protocol. The numerical results are verified through simulation. Further, we extend our analytical model to power-controlled networks},
author = {Wang, X and Ali, M M},
booktitle = {Communications, 2006 23rd Biennial Symposium on},
keywords = {DBTMA,MAC protocol,access protocols,ad hoc networks,dual busy tone multiple access,interference (signal),medium access control,multi-access systems,multicell interference,performance modeling,power-controlled network},
pages = {190--193},
title = {{Performance Modeling of Ad Hoc Networks with Multi-Cell Interference}},
year = {2006}
}
@book{Duckett2001,
address = {Hoboken, NJ},
author = {Duckett, Jon and Ozu, Nik and Williams, Kevin and Mohr, Stephen and Cagle, Kurt and Griffin, Oliver and Norton, Francis and Stokes-Rees, Ian and Tennison, Jeni},
edition = {1st},
publisher = {Wrox},
title = {{Professional XML Schemas}},
year = {2001}
}
@book{Norman2010,
author = {Norman, Walsh and Hamilton, Richard L.},
isbn = {0596805020},
pages = {550},
publisher = {O'Reilly Media},
title = {{DocBook 5: The Definitive Guide}},
url = {http://www.amazon.com/DocBook-Definitive-Guide-Walsh-Norman/dp/0596805020},
year = {2010}
}
@inproceedings{Ammon1997,
abstract = {In a simulation-based design process developed for the Rapid Prototyping of Application-Specific Signal Processors program (RASSP), an abstract VHDL performance model forms a virtual prototype of a full DSP system that is timing- and data-faithful. Full-system models provide early design verification by simulating application software and hardware in an integrated co-design development. This paper describes the process of applying Omniview's PMW tool suite to the design of an image-classification system. The Performance Modeling Workbench (PMW) tool suite lets engineers create high-fidelity performance models of multiprocessor systems. The design process uses performance models for trade-off analyses among designs with different hardware/software architectures. The tool helps designers determine if the candidate design could satisfy performance requirements, identify bottlenecks and over-design, and optimize system performance},
author = {Ammon, J and Hein, C},
booktitle = {VHDL International Users' Forum, 1997. Proceedings},
keywords = {DSP system,Omniview,PMW tool suite,Performance Modeling Workbench,RASSP,Rapid Prototyping of Application-Specific Signal P,VHDL,application specific integrated circuits,circuit analysis computing,design verification,digital signal processing chips,hardware architectures,hardware description languages,hardware software codesign,high level synthesis,high-fidelity performance models,image classification,image classification system,multiprocessing systems,multiprocessor systems,performance evaluation,performance modeling,program,simulation,simulation-based design process,software architectures,system performance optimization,virtual machines,virtual prototype},
pages = {209--215},
title = {{VHDL-based performance modeling: an application of the PMW tool suite to an image classification system}},
year = {1997}
}
@book{Manolakis2011,
author = {Manolakis, Dimitris G. and Ingle, Vinay K.},
isbn = {0521110025},
pages = {1016},
publisher = {Cambridge University Press},
title = {{Applied Digital Signal Processing: Theory and Practice}},
url = {http://www.amazon.com/Applied-Digital-Signal-Processing-Practice/dp/0521110025},
year = {2011}
}
@inproceedings{Ebeling2007,
abstract = {All modern hardware design makes use of hardware description languages like Verilog and VHDL. Thus these languages are presented very early in the curriculum, often in the first design course. Unfortunately, these languages often cause substantial confusion for students learning hardware design, particularly students that have experience writing programs in sequential languages like C and Java. To address this problem, we have defined a language called Abstract Verilog which is similar to Verilog, but which has well-defined, clean parallel execution semantics. Abstract Verilog has a somewhat restricted syntax in order to reduce the cognitive load for new students. However, almost any program that can be written in Verilog can be written in Abstract Verilog, where it is shorter and easier to understand. We have used Abstract Verilog successfully in both introductory and advanced design classes. \&copy; 2007 IEEE.},
address = {San Diego, CA, United States},
annote = {Ebeling2007.abstract.verilog.pdf
inproceedings
Xin Meng
Computer hardware description languages
Hardware design;Design courses;},
author = {Ebeling, Carl and French, Brian},
booktitle = {Proceedings - MSE 2007: 2007 IEEE International Conference on Microelectronic Systems Education: Educating Systems Designers for the Global Economy and a Secure World},
keywords = {Ebeling2007,Electronics engineering,Engineering education,Java programming language,Learning systems,Semantics,Students},
mendeley-tags = {Ebeling2007},
pages = {105--106},
title = {{Abstract verilog: A hardware description language for novice students}},
year = {2007}
}
@book{Lutz2007,
author = {Lutz, Mark},
isbn = {0596513984},
pages = {752},
publisher = {O'Reilly Media},
title = {{Learning Python, 3rd Edition}},
url = {http://www.amazon.com/Learning-Python-3rd-Mark-Lutz/dp/0596513984},
year = {2007}
}
@article{Deursen2000,
author = {van Deursen, Arie and Klint, Paul and Visser, Joost},
journal = {ACM SIGPLAN Notices},
number = {6},
pages = {26--36},
title = {{Domain-specific languages: an annotated bibliography}},
volume = {35},
year = {2000}
}
@book{Elliott1999,
author = {Elliott, J P},
publisher = {Kluwer Academic Publishers},
title = {{Understanding behavioral synthesis: a practical guide to high-level design}},
url = {http://www.google.com/books?id=u\_PfoOeJls4C\&printsec=frontcover\&hl=zh-CN},
year = {1999}
}
@article{Consel1998,
annote = {S-XML},
author = {Consel, C and Marlet, R},
journal = {Lecture Notes in Computer Science},
pages = {170--194},
title = {{Architecturing software using: A methodology for language development}},
year = {1998}
}
@inproceedings{Li2000a,
abstract = {Large software systems are composed of interdependent distributed components, some developed in-house, some commercially available, and others developed by the customer. The system architecture, that is, the components comprising the system and their interconnections, typically varies for each design. Performance prediction is important for such software, including helping designers to select better designs and helping them to adjust the software architecture for better performance. To predict the overall system performance, we must have performance data for each component. Performance modelling for reused components was reported elsewhere. This paper presents a technology and its accompanying tool suite to obtain performance models of new components in a formal software architectural design specification given in a communicating extended finite state machine (CEFSM) model. Performance data for such new components are not available and must be collected through simulation. Our technique includes three steps: component specification instrumentation; simulation; and component stochastic performance model derivation from simulation trace. We applied our technology to a telecom application to predict the performance of its new components. Combined with the performance models of reused components from previous work, we were able to predict performance of the entire architectural design},
author = {Li, J J and Horgan, J R},
booktitle = {Simulation Symposium, 2000. (SS 2000) Proceedings. 33rd Annual},
keywords = {communicating extended finite state machine,component specification,finite state machines,formal software architectural design specification,formal specification,large software systems,simulation trace,software architecture,software component performance prediction,software designs,software performance evaluation,software tools,stochastic performance model,system architecture,telecom application,telecommunication computing,tool suite,virtual machines},
pages = {283--290},
title = {{Simulation-trace-based component performance prediction}},
year = {2000}
}
@article{Coello2000,
author = {Coello, C A},
journal = {ACM Computing Surveys (CSUR)},
number = {2},
pages = {109--143},
title = {{An updated survey of GA-based multiobjective optimization techniques}},
volume = {32},
year = {2000}
}
@article{Spinnato2004,
abstract = {Hybrid architectures are systems where a high performance general purpose computer is coupled to one or more special purpose devices (SPDs). Such a system can be the optimal choice for several fields of computational science. Configuring the system and finding the optimal mapping of the application tasks onto the hybrid machine often is not straightforward. Performance modeling is a tool to tackle and solve these problems. We have developed a performance model to simulate the behavior of a hybrid architecture consisting of a parallel multiprocessor where some nodes are the host of a GRAPE board. GRAPE is a very high performance SPD used in computational astrophysics. We validate our model on the architecture at our disposal, and show examples of predictions that our model can produce.},
author = {Spinnato, P F and van Albada, G D and Sloot, P M A},
isbn = {1045-9219},
journal = {Parallel and Distributed Systems, IEEE Transactions on},
keywords = {GRAPE board,N-body codes,N-body problems,distributed hybrid architecture,multiprocessing systems,parallel multiprocessor,parallel processing,performance modeling,special purpose computers,special purpose device,system configuration},
number = {1},
pages = {81--92},
title = {{Performance modeling of distributed hybrid architectures}},
volume = {15},
year = {2004}
}
@article{Liu2007,
author = {Liu, D and Tan, K C and Goh, C K and Ho, W K},
journal = {IEEE Transactions on Systems, Man, and Cybernetics, Part B},
number = {1},
pages = {42--50},
title = {{A multiobjective memetic algorithm based on particle swarm optimization}},
volume = {37},
year = {2007}
}
@article{Cai2007,
abstract = {讨论程序员因为各种干扰而造成的效率下降，除了涉及一般概念上的干扰（电话、Instant Messager、行政事务、开会等），还讲到了程序语言和编程工具本身也会迫使程序员不断考虑不同层次的问题，而这些层次间的切换（Context Swicth）也是一种常常被人们忽视的干扰。},
annote = {http://www.billauer.co.il/perlilog.html
(蔡学镛)
article
Xin Meng},
author = {Cai, Xueyong},
journal = {程序员},
keywords = {Cai2007},
mendeley-tags = {Cai2007},
pages = {85},
title = {{无所不在的Context Switch}},
url = {http://www.billauer.co.il/perlilog.html},
volume = {12},
year = {2007}
}
@book{Needham1999,
author = {Needham, Tristan},
isbn = {0198534469},
pages = {616},
publisher = {Oxford University Press, USA},
title = {{Visual Complex Analysis}},
url = {http://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469},
year = {1999}
}
@book{Budd2006,
address = {Berkeley, CA},
author = {Budd, Andy and Collison, Simon and Moll, Cameron},
publisher = {friends of ED},
title = {{CSS Mastery: Advanced Web Standards Solutions}},
year = {2006}
}
@book{Miles2006,
address = {Sebastopol, CA},
author = {Miles, Russ},
publisher = {O'Reilly Media, Inc.},
title = {{Learning UML 2.0}},
year = {2006}
}
@misc{TheMendeleySupportTeam2011c,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:home/xin\_meng/Documents/MendeleyDesktop/FAQ.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@misc{Paxson1995,
author = {Paxson, Vern},
title = {{flex: The Fast Lexical Analyzer}},
url = {http://flex.sourceforge.net},
year = {1995}
}
@book{Coello2007,
address = {New York },
author = {Coello, C A C and Lamont, G B and {Van Veldhuizen}, D A},
publisher = {Springer-Verlag},
title = {{Evolutionary algorithms for solving multi-objective problems}},
year = {2007}
}
@article{2004a,
author = {彭宇 and 彭喜元 and 刘兆庆},
journal = {电子学报},
number = {002},
pages = {209--213},
title = {微粒群算法参数效能的统计分析},
volume = {32},
year = {2004}
}
@book{Paulson1996,
annote = {book
Xin Meng},
author = {Paulson, Lawrence C},
keywords = {Paulson1996},
mendeley-tags = {Paulson1996},
publisher = {Cambridge University Press},
title = {{ML for the Working Programmer}},
year = {1996}
}
@inproceedings{Min2008,
abstract = {In this paper we propose a component-based analytical performance model for IP-SAN. We model four key components within IP-SAN individually and they are IP network, cache, RAID and disks. We validate these component models and compose them to give an entire IP-SAN performance model. The entire IP-SAN model analyzes the performance of an IP-SAN configuration under multiple synchronous workloads by using closed queueing network model and under asynchronous workload by using open queueing network model. We also validate the entire IP-SAN performance model against a real IP-SAN system. The theoretical results are compared with the results from a real IP-SAN using a variety of synthetic workloads. These experiments prove that the component-based method is an appropriate way to build performance model for a complex storage system. To our knowledge, this is the first exploration into building analytical performance model for entire IP-SAN system and validating against a real system. We also identify areas for future research in the performance analysis of real IP-SAN.},
address = {Chongqing },
author = {Min, Wang and Liu, Liu and Wei, Xu and Lu, Xu},
booktitle = {International Conference on Networking, Architecture, and Storage, 2008. NAS '08. },
keywords = {IP network,IP networks,IP-SAN,IP-SAN system,RAID,asynchronous workload,cache storage,closed queueing network model,component-based analytical performance model,disk storage,multiple synchronous workloads,open queueing network model,performance model,queueing theory,storage area networks},
pages = {255--262},
title = {{An Analytical Performance Model of IP-SAN}},
year = {2008}
}
@inproceedings{Raghuwanshi2004,
address = {Cairns, Australia},
author = {Raghuwanshi, M M and Kakde, O G},
booktitle = {The 8th Asia Pacific Symposium on Intelligent and Evolutionary Systems},
publisher = {Citeseer},
title = {{Survey on multiobjective evolutionary and real coded genetic algorithms}},
year = {2004}
}
@inproceedings{Visser2004,
address = {NY, USA},
annote = {SWUL},
author = {Visser, Eelco},
booktitle = {Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
pages = {365--383},
publisher = {ACM New York, },
title = {{Concrete syntax for objects: domain-specific language embedding and assimilation without restrictions}},
year = {2004}
}
@inproceedings{Mittra1996,
abstract = {This paper describes VIP, a Verilog Interpreter for Preprocessing. The single pass interpreter converts the extended standard of the Verilog language proposed in LRM2.0a by OVI to the existing standard as in LRM1.0, thus enabling the simulation of the newly written code by the existing simulators. Even if the upcoming standard of the IEEE working committee 1364 disregards the LRM2.0a standard, this tool will continue to be an important option for easy code management in future. The two new features which have been included to be checked by the interpreter are the array of instances and the parameterized macro definition. Also the flexibility and performance of the interpreter has been compared with the other existing preprocessor.},
address = {Santa Clara, CA, USA},
annote = {Mittra1996.VIP a Verilog Interpreter for Preprocessing.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog interpreter for preprocessing;Open Verilog international;Language reference manual;},
author = {Mittra, Swapnajit},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Algorithms,Computer aided design,Computer hardware,Computer simulation,Data processing,Database systems,Macros,Mittra1996,Program compilers,Program interpreters},
mendeley-tags = {Mittra1996},
pages = {34--38},
title = {{VIP: a Verilog interpreter for preprocessing}},
year = {1996}
}
@inproceedings{Sait2002,
annote = {Proceedings of the 2002 Congress on Evolutionary Computation},
author = {Sait, S M and Minhas, M R and Khan, J A},
booktitle = {Proceedings of the 2002 Congress on Evolutionary Computation},
pages = {372--377},
title = {{Performance and low-power driven VLSI standard cell placement using tabu search}},
volume = {1},
year = {2002}
}
@book{Rudin1986,
author = {Rudin, Walter},
isbn = {0070542341},
pages = {483},
publisher = {McGraw-Hill Science/Engineering/Math},
title = {{Real and Complex Analysis (International Series in Pure and Applied Mathematics)}},
url = {http://www.amazon.com/Complex-Analysis-International-Applied-Mathematics/dp/0070542341},
year = {1986}
}
@misc{Jones1996,
annote = {language level},
author = {Jones, Cpaers},
publisher = {Software Productivity Research, Inc.},
title = {{Programming Languages Table}},
url = {http://www.spr.com/programming-languages-table.html},
volume = {2009},
year = {1996}
}
@book{Bhasker2009,
author = {Bhasker, J. and Chadha, Rakesh},
isbn = {0387938192},
pages = {592},
publisher = {Springer},
title = {{Static Timing Analysis for Nanometer Designs: A Practical Approach}},
url = {http://www.amazon.com/Static-Timing-Analysis-Nanometer-Designs/dp/0387938192},
year = {2009}
}
@book{Abelson1996,
author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
isbn = {0070004846},
pages = {657},
publisher = {McGraw-Hill Science/Engineering/Math},
title = {{Structure and Interpretation of Computer Programs, Second Edition}},
url = {http://www.amazon.com/Structure-Interpretation-Computer-Programs-Edition/dp/0070004846},
year = {1996}
}
@book{Stayton2007,
author = {Stayton, Bob},
isbn = {0974152137},
pages = {588},
publisher = {Sagehill Enterprises},
title = {{DocBook XSL: The Complete Guide (4th Edition)}},
url = {http://www.amazon.com/DocBook-XSL-Complete-Guide-4th/dp/0974152137},
year = {2007}
}
@article{2005d,
author = {熊志辉 and 李思昆 and 陈吉华 and 张鲁峰},
journal = {计算机工程与科学},
number = {008},
pages = {56--59},
title = {{基于平台的 SoC 系统建模方法研究}},
volume = {27},
year = {2005}
}
@article{Schnarr2001,
annote = {Facile},
author = {Schnarr, E C and Hill, M D and Larus, J R},
journal = {ACM SIGPLAN Notices},
number = {5},
pages = {321--331},
title = {{Facile: A language and compiler for high-performance processor simulators}},
volume = {36},
year = {2001}
}
@inproceedings{Gelinas1996,
abstract = {This paper describes the implementation of Vstyle, a proprietary Verilog coding style checker implemented in yacc and c. The emphasis of this paper is not on any particular set of coding practices, but on how to craft a tool which validates that coding practices are being followed. As with any proprietary tool, the benefits must be weighed with the cost of development and support. This paper demonstrates a method of implementation which delivers the most basic style verification with a modest coding effort, and which can be extended over time to yield increasing benefit.},
address = {Santa Clara, CA, USA},
annote = {Gelinas1996.Vstyle a coding style analyzer for synthesizable Verilog.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog coding style checker;Coding style analyzer;Synopsys;},
author = {Gelinas, Bob},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Coding errors,Computer aided design,Computer hardware,Computer software,Encoding (symbols),Gelinas1996},
mendeley-tags = {Gelinas1996},
pages = {50--57},
title = {{Vstyle: a coding style analyzer for synthesizable Verilog}},
year = {1996}
}
@book{Mason1992,
address = {Sebastopol, CA},
author = {Mason, Tony and Levine, John R and Brown, Doug},
edition = {2nd},
publisher = {O'Reilly Media},
title = {{Lex \& Yacc}},
year = {1992}
}
@book{Pedroni2004,
address = {Cambridge, MA},
author = {Pedroni, Volnei A},
publisher = {The MIT Press},
title = {{Circuit Design with VHDL}},
year = {2004}
}
@inproceedings{Crew1997,
author = {Crew, R F},
booktitle = {Proceedings of the USENIX Conference on Domain-Specific Languages},
pages = {229--242},
title = {{ASTLOG: A language for examining abstract syntax trees}},
year = {1997}
}
@inproceedings{Buffenberger2001,
annote = {SSC},
author = {Buffenberger, J and Gruell, K},
booktitle = {Proceedings of the 34th Annual Hawaii International Conference on System Sciences, 2001},
pages = {10},
title = {{A language for software subsystem composition}},
year = {2001}
}
@inproceedings{Ghosal2005,
author = {Ghosal, P and Samanta, T and Rahaman, H and Dasgupta, P},
booktitle = {2nd Indian International Conference on Artificial Intelligence (IICAI-05)},
title = {{Recent Trends in the Application of Meta-Heuristics to VLSI Layout Design}},
year = {2005}
}
@book{Synopsys2005,
address = {Mountain View, CA},
author = {Synopsys},
publisher = {Synopsys, Inc.},
title = {{OpenVera Language Reference Manual: Testbench}},
year = {2005}
}
@inproceedings{Kukkala2005,
abstract = {This paper presents a new performance modeling approach for the design of embedded real-time systems using UML 2.0. The approach responds to the lack of specific semantics for the performance modeling. The existing UML metamodel is extended by defining stereotypes to include the message latency and execution time in UML statecharts. The information may contain both the real-time constraints and measured values that are back-annotated to the UML model. Further, fully automated model transformation is used to visualize this information with sequence diagrams. The modeling approach has been prototyped with the UML implementation of a WLAN medium access control protocol. The experiences proved the approach to be practical and intuitive.},
author = {Kukkala, P and Hannikainen, M and Hamalainen, T D},
booktitle = {System-on-Chip, 2005. Proceedings. 2005 International Symposium on},
keywords = {UML 2.0,UML metamodel,UML statechart,Unified Modeling Language,WLAN medium access control protocol,access protocols,embedded real-time systems design,embedded systems,performance modeling,semantics,sequence diagram},
pages = {50--53},
title = {{Performance Modeling and Reporting for the UML 2.0 Design of Embedded Systems}},
year = {2005}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@inproceedings{Balasubramanian1997,
abstract = {Performance modeling is widely used to efficiently and rapidly assess the ability of multiprocessor architectures to effectively execute a given algorithm. In a typical design environment, VHDL performance models of hardware components are interconnected to form structural models of the large multiprocessor architectures. Algorithm features are described in application specific tools. Other automated tools partition the software among the various processors. Performance models evaluate the system performance. Several iterations may be needed before a suitable configuration is obtained. This paper describes a set of tools that directly interface the VHDL performance models to the algorithm partitioning tools which will significant reduce the time and effort needed to prepare the various models. A methodology that integrates several commercial tools is provided},
address = {Blacksburg, VA},
author = {Balasubramanian, P and Gray, F G},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
keywords = {VHDL performance models,algorithm partitioning tools,hardware description languages,multiprocessing systems,multiprocessor architectures,parallel architectures,performance evaluation},
pages = {36--41},
title = {{Interfacing VHDL performance models to algorithm partitioning tools}},
year = {1997}
}
@book{Klement2000,
author = {Klement, E P and Mesiar, R and Pap, E},
publisher = {Kluwer Academic Pub},
title = {{Triangular norms}},
url = {http://books.google.com/books?hl=en\&lr=\&id=rIyqcjfKMN4C\&oi=fnd\&pg=PR11\&dq=Associative+Functions:+Triangular+Norms+and+Copulas\&ots=bnQwIfLk3D\&sig=ScxeJrpDtwhDVTglmPt9GxUyXmM\#v=onepage\&q=\&f=false},
year = {2000}
}
@book{Friedl2006,
address = {Sebastopol, CA},
author = {Friedl, Jeffrey},
publisher = {O'Reilly Media, Inc.},
title = {{Mastering Regular Expressions}},
year = {2006}
}
@book{Corbet2005,
author = {Corbet, Jonathan and Rubini, Alessandro and Kroah-Hartman, Greg},
isbn = {0596005903},
pages = {640},
publisher = {O'Reilly Media},
title = {{Linux Device Drivers, 3rd Edition}},
url = {http://www.amazon.com/Linux-Device-Drivers-3rd-Edition/dp/0596005903},
year = {2005}
}
@article{Klarlund1999,
annote = {FIDO},
author = {Klarlund, N and Schwartzbach, M I},
journal = {IEEE Transactions On Software Engineering},
number = {3},
pages = {378--386},
title = {{A domain-specific language for regular sets of strings and trees}},
volume = {25},
year = {1999}
}
@book{Lim2010,
author = {Lim, Sung Kyu},
isbn = {9048176824},
pages = {300},
publisher = {Springer},
title = {{Practical Problems in VLSI Physical Design Automation}},
url = {http://www.amazon.com/Practical-Problems-Physical-Design-Automation/dp/9048176824},
year = {2010}
}
@book{Knuth2008,
author = {Knuth, Donald E.},
isbn = {9780321534965},
pages = {240},
publisher = {Addison-Wesley Professional},
title = {{The Art of Computer Programming, Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions}},
url = {http://www.amazon.com/Art-Computer-Programming-Fascicle-Combinatorial/dp/0321534964},
year = {2008}
}
@book{Aarts2003,
author = {Aarts, E and Lenstra, J K},
publisher = {Princeton Univ Pr},
title = {{Local search in combinatorial optimization}},
url = {http://www.google.com/books?hl=zh-CN\&lr=\&id=NWghN9G7q9MC\&oi=fnd\&pg=PR7\&dq=local+search+in+combinatorial+optimization\&ots=XpRqtDDyNm\&sig=Zw4Y7X-aUMgDrpUutbyydwDtxVw},
year = {2003}
}
@book{Wang2006a,
author = {Wang, Laung-Terng and Wu, Cheng-Wen and Wen, Xiaoqing},
isbn = {0123705975},
pages = {808},
publisher = {Morgan Kaufmann},
title = {{VLSI Test Principles and Architectures: Design for Testability (Systems on Silicon)}},
url = {http://www.amazon.co.uk/VLSI-Test-Principles-Architectures-Testability/dp/0123705975},
year = {2006}
}
@book{Glover1997,
address = {New York},
author = {Glover, F and Laguna, M},
publisher = {Springer},
title = {{Tabu search}},
year = {1997}
}
@article{Thibault1999,
annote = {GAL},
author = {Thibault, S A and Marlet, R and Consel, C},
journal = {IEEE Transactions On Software Engineering},
number = {3},
pages = {363--377},
title = {{Domain-specific languages: from design to implementation - application to video device drivers generation}},
volume = {25},
year = {1999}
}
@inproceedings{Lee2006,
abstract = {Domain requirements are fundamental for software reuse and are the product of domain analysis. This paper presents an ontology based approach to elicit and analyze domain requirements. An ontology definition is given out. Problem domain is decomposed into several sub problem domains by using subjective decomposition method. The top-down refinement method is used to refine each sub problem domain into primitive requirements. Abstract stakeholders are used instead of real ones when decomposing problem domain and domain primitive requirements are represented by ontology. Not only domain commonality, variability and qualities are presented, but also reasoning logic is used to detect and handle incompleteness and inconsistency of domain requirements. In addition, a case of 'spot and futures transaction' domain is used to illustrate the approach. \&copy; 2006 IEEE.},
address = {Hangzhou},
annote = {inproceedings
Data structures
Ontology;Stakeholders;Reasoning logic;Transaction;},
author = {Lee, Yuqin and Zhao, Wenyun},
booktitle = {First International Multi-Symposiums on Computer and Computational Sciences, IMSCCS'06},
keywords = {Computational methods,Computer software,Data reduction,Formal logic,Lee2006,Problem solving},
mendeley-tags = {Lee2006},
pages = {364--371},
publisher = {IEEE Computer Society},
title = {{An ontology-based approach for domain requirements elicitation and analysis}},
url = {http://dx.doi.org/10.1109/IMSCCS.2006.252},
volume = {2},
year = {2006}
}
@book{sv-lrm,
address = {Napa, CA},
author = {Gerousis, Vassilios and Srouji, Johny and Pieper, Karen and Smith, David and Boyd, Stefen and Korpusik, Neil and Haque, Faisal and Meier, Steve and Samad, Arif and Mittra, Swapnajit and Khoory, Ghassan and Sutherland, Stuart and Pierce, Brad},
publisher = {Napa, CA},
title = {{SystemVerilog 3.1a Language Reference Manual Accellera's Extentions to Verilog}},
year = {2004}
}
@article{Xiong2001,
author = {Xiong, J and Johnson, J and Johnson, R and Padua, D},
journal = {ACM SIGPLAN Notices},
number = {5},
pages = {298--308},
title = {{SPL: A language and compiler for DSP algorithms}},
volume = {36},
year = {2001}
}
@article{Maliniak2006,
abstract = {The kind of infrastructure built for hardware description language, System Verilog, in the verification realm that is useful for the designers is discussed. System Verilog involves a number of verification concepts, primarily in the areas of design, assertions, and testbench creation, that were previously embodied in separate and sometimes proprietary languages. System Verilog can be broken out into four key segments including design, assertions, test-bench capabilities, and verification coverage analysis. One of the most popular, and most readily adopted, System Verilog features is its assertions capabilities. Using assertions with RTL is a quick and relatively easy way to make use of System Verilog to improve verification. System Verilog assertions can significantly improve the productivity of the verification engineer. The biggest advantages provided by System Verilog environment is the ability to work within the constrained-random stimulus methodology.},
annote = {article
Xin Meng
Computer programming languages
Testbench creation;Proprietary languages;Test-bench capabilities;},
author = {Maliniak, David},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Constraint theory,Electronics engineering,Maliniak2006,Productivity},
mendeley-tags = {Maliniak2006},
number = {11},
pages = {49--55},
title = {{System Verilog gains a foothold in verification}},
volume = {54},
year = {2006}
}
@book{Siek2001,
address = {Des Moines, IA},
author = {Siek, Jeremy G and Lee, Lie-Quan and Lumsdaine, Andrew},
publisher = {Addison-Wesley Professional},
title = {{The Boost Graph Library: User Guide and Reference Manual}},
year = {2001}
}
@inproceedings{Cvetkovic1999,
annote = {Evolutionary Computation, 1999. CEC 99. Proceedings of the 1999 Congress on},
author = {Cvetkovic, D and Parmee, I C},
booktitle = {Proceedings of the 1999 Congress on Evolutionary Computation, 1999. CEC 99. },
title = {{Genetic algorithm-based multi-objective optimisation and conceptualengineering design}},
volume = {1},
year = {1999}
}
@book{Lyons1996,
author = {Lyons, Richard G.},
isbn = {0201634678},
pages = {544},
publisher = {Pearson Education},
title = {{Understanding Digital Signal Processing}},
url = {http://www.amazon.com/Understanding-Digital-Signal-Processing-Richard/dp/0201634678},
year = {1996}
}
@article{Marler2004,
author = {Marler, R T and Arora, J S},
journal = {Structural and Multidisciplinary Optimization},
number = {6},
pages = {369--395},
title = {{Survey of multi-objective optimization methods for engineering}},
volume = {26},
year = {2004}
}
@misc{SpringSoft2009,
author = {SpringSoft},
title = {{Verdi Automated Debug System: nLint}},
url = {http://www.springsoft.com/products/debug-automation/verdi},
year = {2009}
}
@book{McFarland2006,
address = {Sebastopol, CA},
author = {McFarland, David},
edition = {1st},
publisher = {Pogue Press, O'Reilly},
title = {{CSS: The Missing Manual }},
year = {2006}
}
@article{Maliniak2003,
abstract = {An overview of the support for assertion-driven debugging added to Novas' debug system was presented. Users can read in results generated by SystemVerilog-based simulators and use the debuggers to quickly hunt down bugs and map them to the SystemVerilog source code. A latest clock-tree debug and analysis capability enables users to easily detect and check clock-domain crossings.},
annote = {article
Xin Meng
Program debugging
Source codes;},
author = {Maliniak, David},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Codes (symbols),Computer software,Maliniak2003,Simulators,Standards},
mendeley-tags = {Maliniak2003},
number = {16},
pages = {36 --},
title = {{SystemVerilog support leads debuggers' upgrades}},
volume = {51},
year = {2003}
}
@article{Yager1988,
author = {Yager, Ronald R.},
journal = {IEEE transactions on Systems, Man and Cybernetics},
number = {1},
pages = {183--190},
title = {{On ordered weighted averaging aggregation operators inmulticriteria decisionmaking}},
volume = {18},
year = {1988}
}
@inproceedings{Cao2003,
abstract = {Feature modeling is commonly used to capture the commonalities and variabilities of systems in a domain during Domain Analysis. The output of feature modeling will be some reusable assets (components, patterns, domain-specific language, etc.) to be fed into the application engineering phase for ultimate software products. But current practice lacks an automatic approach for seamless generation of reusable assets from feature models. This paper presents an algorithm for generating sets of instance descriptions (feature instances) from feature models of a domain and applies this algorithm in creating a Generic Feature Modeling Environment for automating Feature-Oriented Domain Analysis.},
address = {Las Vegas, NV, United States},
annote = {inproceedings
Object oriented programming
Feature modeling;Domain analysis;Generative programing;},
author = {Cao, Fei and Bryant, Barrett R and Burt, Carol C and Huang, Zhisheng and Raje, Rajeev R and Olson, Andrew M and Auguston, Mikhail},
booktitle = {Proceedings of the International Conference on Software Engineering Research and Practise},
keywords = {Algorithms,Cao2003,Computer hardware description languages,Computer programming,XML},
mendeley-tags = {Cao2003},
pages = {944--949},
title = {{Automating Feature-Oriented Domain Analysis}},
volume = {2},
year = {2003}
}
@inproceedings{Bystrov,
abstract = {The paper presents asynchronous design solutions to the problem of Priority Arbitration which is defined in the following form. A system consists of multiple, physically concurrent, processes with a shared resource. The discipline of resource allocation is a function of parameters of the active requests, which are assigned to the requests either statically or dynamically. This function can be defined in an (arbitrary) combinatorial way (contrary to conventional, `topological', mappings, such as that used in a daisy-chain arbiter). The proposed designs are quasi-speed-independent. Furthermore, the priority logic, in the dynamic case, has the following architectural feature: it is a tree structure in which the control flow is maximally decoupled from the data-path by means of an early propagation of the `valid'-`invalid' signals, concurrently, with processing the priority data. This lends to significant reduction in the overall arbitration delay when the number of active requests is low},
author = {Bystrov, A. and Kinniment, D.J. and Yakovlev, A.},
booktitle = {Proceedings Sixth International Symposium on Advanced Research in Asynchronous Circuits and Systems (ASYNC 2000) (Cat. No. PR00586)},
doi = {10.1109/ASYNC.2000.836990},
isbn = {0-7695-0586-4},
pages = {128--137},
publisher = {IEEE Comput. Soc},
title = {{Priority arbiters}},
url = {http://ieeexplore.ieee.org/xpl/freeabs\_all.jsp?arnumber=836990},
year = {2000}
}
@misc{Gorham2009,
author = {Gorham, Nick},
title = {{unixODBC}},
url = {http://www.unixodbc.org/},
year = {2009}
}
@book{lazowska1984quantitative,
author = {Lazowska, E D and Zahorjan, J and Graham, G S and Sevcik, K C},
isbn = {0137469756},
publisher = {Prentice-Hall, Inc. Upper Saddle River, NJ, USA},
title = {{Quantitative system performance: computer system analysis using queueing network models}},
year = {1984}
}
@book{Wong2004,
author = {Wong, Ban and Mittal, Anurag and Cao, Yu and Starr, Greg W.},
isbn = {0471466107},
pages = {416},
publisher = {Wiley-Interscience},
title = {{Nano-CMOS Circuit and Physical Design}},
url = {http://www.amazon.com/Nano-CMOS-Circuit-Physical-Design-Wong/dp/0471466107},
year = {2004}
}
@misc{OSCI2009b,
author = {OSCI},
title = {{SystemC Transaction Level Modeling}},
url = {http://www.systemc.org/},
year = {2009}
}
@book{Tennison2001,
address = {Hoboken, NJ},
author = {Tennison, Jeni},
publisher = {Wiley},
title = {{XSLT and XPath On The Edge}},
year = {2001}
}
@misc{Microsoft2009,
author = {Microsoft},
keywords = {odbc},
title = {{ODBC API Reference}},
url = {http://msdn.microsoft.com/en-us/library/ms714562(VS.85).aspx},
year = {2009}
}
@inproceedings{Launchbury1999,
annote = {Hawk},
author = {Launchbury, J and Lewis, J R and Cook, B},
booktitle = {Proceedings of the fourth ACM SIGPLAN international conference on Functional programming},
pages = {60--69},
publisher = {ACM New York, NY, USA},
title = {{On embedding a microarchitectural design language within Haskell}},
year = {1999}
}
@inproceedings{Smith2007,
abstract = {XML-based interchange formats for performance models provide a mechanism whereby performance model information may be transferred among modeling tools. For example, the PMIF allows diverse tools to exchange queueing network model information. Formats have also been defined for the interchange of LQN, UML, Petri Nets, and others. These formats specify the model and a set of parameters for one run. For model studies, however, it is useful to be able to specify multiple runs, or experiments, for the model. This paper presents an XML interchange schema extension for defining a set of model runs and the output desired from them. It has the expressive power to specify iterations, alternations, assignments of values, actions based on model results and more. Examples illustrate how the experiment interchange extension can be used with a wide variety of performance modeling paradigms. A prototype proves the concept.},
author = {Smith, C U and Llado, C M and Puigjaner, R and Williams, L G},
booktitle = {Quantitative Evaluation of Systems, 2007. QEST 2007. Fourth International Conference on the},
keywords = {XML,XML interchange schema extension,XML-based interchange format,eXtensible Markup Language,electronic data interchange,performance model information,performance modeling paradigm,queueing network model information,queueing theory},
pages = {91--100},
title = {{Interchange Formats for Performance Models: Experimentation and Ouput}},
year = {2007}
}
@inproceedings{Smaragdakis1997,
author = {Smaragdakis, Y and Batory, D},
booktitle = {USENIX Conference on Domain-Specific Languages},
pages = {257270},
title = {{DiSTiL: A transformation library for data structures}},
year = {1997}
}
@misc{Darringer2007,
abstract = {Currently, since many SoCs include heterogeneous components such as CPUs, DSPs, ASICs, memories, buses, etc., system integration becomes a major step in the design flow. To enable this integration, we use a design approach called component based-design approach. In this approach, the validation of system integration takes most of design efforts. This paper presents an automatic method of SoCs design validation. Based on a generic simulation wrapper architecture, the presented method provides automatic generation of executable models throughout different stages of SoC design flow. A case study of validating a VDSL application shows the effectiveness of the method.},
address = {San Diego, California},
annote = {1278670
760-764},
author = {Darringer, John A},
booktitle = {Proceedings of the 44th annual conference on Design automation},
doi = {http://doi.acm.org/10.1145/1278480.1278670},
publisher = {ACM},
title = {{Multi-core design automation challenges}},
year = {2007}
}
@misc{Donnelly2006,
author = {Donnelly, Charles and Stallman, Richard},
title = {{Bison - GNU parser generator}},
url = {http://www.gnu.org/software/bison},
year = {2006}
}
@book{Dougherty1997,
address = {Sebastopol, CA},
author = {Dougherty, Dale and Robbins, Arnold},
edition = {2nd},
publisher = {O'Reilly Media},
title = {sed \& awk},
year = {1997}
}
@article{Felleisen2004,
annote = {S-XML},
author = {Felleisen, M and Findler, R and Flatt, M and Krishnamurthi, S},
journal = {Dr. Dobb’s Journal},
number = {4},
pages = {45--49},
title = {{Building little languages with macros}},
volume = {29},
year = {2004}
}
@book{int-wb,
author = {Xu, Xin},
publisher = {Exar},
title = {{Panther2 DMA INT workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_dma\_int\_workbook.doc}
}
@book{intel-wp-vmdq-in-mcore,
publisher = {Intel},
title = {{White Paper: Improving Network Performance in Multi-Core Systems}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/White Paper Improving Network Performance in Multi-Core Systems.pdf}
}
@book{rng-wb,
author = {Yao, Zongfu},
publisher = {Exar},
title = {{Panther2 RNG Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_RNG\_workbook.docx}
}
@book{spi-wb,
author = {Qiao, Bin},
publisher = {Exar},
title = {{Panther2 SPI Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2 SPI  Workbook.docx}
}
@book{usb-uart,
file = {::},
pages = {20},
publisher = {Silicon Labs},
title = {{Single-Chip USB To UART Bridge}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/silicon-labs/cp2103-usb-uart.pdf},
year = {2010}
}
@book{p2-tsmc-cell,
author = {TSMC},
file = {::},
publisher = {TSMC},
title = {{TSMC 40nm CLN40Gv1.2 RVt 0.9 Volt sc12mc C40 Standard Cell Library Databook (revision 2.0)}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/IO/sc12mc\_cln40g\_base\_rvt\_c40\_databook.pdf},
year = {2010}
}
@book{p2-spec,
author = {Zhang, Yuhong},
publisher = {Exar},
title = {{Panther II Specification}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/High Level Planning/panther2\_spec.pdf}
}
@book{Page2008,
file = {::},
pages = {1--52},
publisher = {Cortina Systems and Cisco Systems},
title = {{Interlaken Protocol Definition}},
year = {2008}
}
@book{intel-dell-vmware,
publisher = {Intel},
title = {{Intelligent Queueing Technologies for Virtualization A Dell-Intel-VMware Ecosystem Solution to Enhance Performance}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/Intelligent Queueing Technologies for virtualization a Dell-Intel-VMware ecosystem solution to enchance performance.pdf}
}
@book{odc-wb,
author = {Qian, Liguo},
publisher = {Exar},
title = {{Panther2 ODC workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_ODC\_workbook.docx}
}
@book{rrcwrc-wb,
author = {Yang, Yong},
publisher = {Exar},
title = {{Panther2 RRC WRC workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2 RRC WRC workbook.docx}
}
@book{p2-image-flash,
author = {Micron},
file = {::},
pages = {90},
publisher = {Micron},
title = {{Micron Serial NOR Flash Memory (3V, 256Mb: Multiple I/O Serial Flash Memory Features)}},
year = {2011}
}
@book{p2-top-io,
file = {::},
publisher = {Exar},
title = {{Panther2 Top IO Spreadsheet}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Physical Design/packaging/panther2\_top\_io\_r5.xlsx},
year = {2012}
}
@article{Intel2010,
author = {Intel},
file = {::},
journal = {October},
number = {December},
title = {{Intel ® 82599 10 GbE Controller Datasheet}},
year = {2010}
}
@book{intel-vmdq-tech-wp,
publisher = {Intel},
title = {{Intel VMDq Technology White Paper}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/Virtual Machine Device queues (VMDq) Technical White Paper.pdf}
}
@book{p2-tsmc-io,
author = {TSMC},
file = {::},
keywords = {General Purpose I/O,Interface IP},
number = {August},
pages = {75},
publisher = {TSMC},
title = {{TSMC 40nm CLN40G Process Pad Limited , 0 . 9V Core , 1 . 8V I/O Programmable General Purpose I/O Library Databook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/IO/io\_gppr\_cln40g\_t18\_09\_18\_rvt\_pl\_userguide.pdf},
year = {2011}
}
@book{p2-tsmc-pll,
author = {TSMC},
file = {::;::},
pages = {11},
publisher = {TSMC},
title = {{TSMC Macrocell Datasheet: PGN45GS18MF3000-3000 MHz Clock Generator}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/PLL/DB\_PGN45GS18MF3000\_110A.pdf},
year = {2008}
}
@book{p2-pll-appnote,
author = {Pll, Tsmc N},
file = {::},
publisher = {TSMC},
title = {{TSMC N40 PLL General Application Note}},
year = {2008}
}
@book{intel-ms,
publisher = {Intel},
title = {{Advanced Virtualization I/O Queuing Technologies An Intel-Microsoft Perspective}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/Advanced Virtualization IO Queuing Technologies An Intel-Microsoft Perspective.pdf}
}
@book{cdmgr-wb,
author = {Wu, Zuguang},
publisher = {Exar},
title = {{Panther2 CD Manager Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2 CD Manager Workbook.docx}
}
@book{p2-tsmc-efuse,
author = {TSMC},
file = {::;::},
pages = {12},
publisher = {TSMC},
title = {{TSMC Electrical Fuse Datasheet}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/eFuse/DBTEF45GS128X8HD18\_PH\_110B.pdf},
year = {2009}
}
@misc{sata-ahci,
author = {Synopsys},
file = {::},
title = {{DesignWare Cores SATA AHCI Databook}},
year = {2009}
}
@book{intel-wp-vmdq,
author = {Chinni, Shefali and Hiremane, Radhakrishna},
publisher = {Intel},
title = {{White Paper: Virtual Machine Device Queues (VMDq)}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/White Paper Virtual Machine Device Queues (VMDq).pdf}
}
@book{vsemi-phy,
author = {VSEMI},
file = {::},
pages = {231},
publisher = {VSEMI},
title = {{1-8 Gbps Physical (PHY) Layer IP Module Design Specifications}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/PHY/exar.1.1.0.20120113/vdualphy\_t40\_datasheet\_exar.1.3.0.20120503.pdf},
year = {2012}
}
@book{p2-mrd,
author = {Fryar, J},
publisher = {Exar},
title = {{Panther II Market Requestments Document (MRD), Version 1.0}},
url = {http://intradept/Engineering/HifnProjects/panther2/PRDSchedule/Panther II MRD v1.0.pdf},
year = {2010}
}
@book{regs-wb,
author = {Xu, Xin},
publisher = {Exar},
title = {{Panther2 DMA REGS workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_dma\_regs\_workbook.doc}
}
@book{pk-wb,
author = {Hu, Larry},
publisher = {Exar},
title = {{Panther2 PKP Manager Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2 PKP Manager Workbook.doc}
}
@book{sk-wb,
author = {Zhang, Xunxia},
publisher = {Exar},
title = {{Panther2 SKcore misc Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_SKcore\_misc\_workbook.docx}
}
@book{synopsys-pcie-ep-man,
author = {Synopsys},
booktitle = {Design},
file = {::},
number = {December},
title = {{DesignWare Cores PCI Express User Manual (version 3.90a)}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/PCIe/Synopsys/PCI-Express3.90a/DWC\_pcie\_user.pdf},
year = {2010}
}
@book{intel-vt-arch-spec,
publisher = {Intel},
title = {{Intel Virtualization Technology for Directed I/O}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Intel.Virtualization.Technology/Intel Virtualization Technology for Direct IO architecture specification.pdf}
}
@book{l64-wb,
author = {Hu, Larry},
publisher = {Exar},
title = {{Panther2 L64 Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2 L64 Workbook.doc}
}
@book{pst-board-guide,
author = {Zhang, Yuhong},
file = {::},
publisher = {Exar},
title = {{Panther2 Board Guideline}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Post Silicon Test/panther2\_board\_guideline-commented by Dengkui.docx}
}
@book{efuse-wb,
author = {He, Jie},
publisher = {Exar},
title = {{Panther2 OTP Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_OTP\_workbook.docx}
}
@book{ilk-wb,
author = {Qian, Liguo},
publisher = {Exar},
title = {{Panther2 Interlaken Interface Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther 2 Interlaken Interface Workbook.docx}
}
@book{gpio-wb,
author = {He, Jie},
publisher = {Exar},
title = {{Panther2 GPIO Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/panther2\_gpio\_cbar\_zf.docx}
}
@book{cs-wb,
author = {Qian, Liguo},
publisher = {Exar},
title = {{Panther2 CS workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_CS\_workbook.docx}
}
@book{Yao2011,
author = {Yao, Zongfu},
file = {::},
publisher = {Exar},
title = {{Panther2 Temperature Sensor Workbook}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Design/Workbook2010/Panther2\_temperature\_sensor\_workbook.docx},
year = {2011}
}
@book{synopsys-pcie-ep-ref,
author = {Synopsys},
booktitle = {Architecture},
file = {::},
number = {December},
title = {{DesignWare Cores PCI Express Endpoint Core Reference Manual (version 3.90a)}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/PCIe/Synopsys/PCI-Express3.90a/DWC\_pcie\_ep\_reference.pdf},
year = {2010}
}
@book{Stayton2007b,
author = {Stayton, Bob},
file = {::},
pages = {588},
publisher = {Sagehill Enterprises},
title = {{DocBook XSL: The Complete Guide (4th Edition)}},
url = {http://www.amazon.com/DocBook-XSL-Complete-Guide-4th/dp/0974152137},
year = {2007}
}
@book{Petzold2008a,
author = {Petzold, Charles},
file = {::},
pages = {384},
publisher = {John Wiley \& Sons},
title = {{The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine}},
url = {http://www.amazon.co.uk/The-Annotated-Turing-Historic-Computability/dp/0470229055},
year = {2008}
}
@book{Silberschatz2004,
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
file = {::},
pages = {944},
publisher = {Wiley},
title = {{Operating System Concepts 7th source code}},
url = {http://www.amazon.com/Operating-System-Concepts-Abraham-Silberschatz/dp/0471694665},
year = {2004}
}
@book{Knuth2008a,
author = {Knuth, Donald E.},
file = {::},
pages = {240},
publisher = {Addison-Wesley Professional},
title = {{The Art of Computer Programming, Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions}},
url = {http://www.amazon.com/Art-Computer-Programming-Fascicle-Combinatorial/dp/0321534964},
year = {2008}
}
@book{Sedgewick2011a,
author = {Sedgewick, Robert and Wayne, Kevin},
file = {::},
publisher = {Addison-Wesley Professional},
title = {{Algorithms (4th Edition)}},
url = {http://www.amazon.co.uk/Algorithms-4th-Edition-ebook/dp/B004P8J1NA},
year = {2011}
}
@book{Copeland2004a,
author = {Copeland, B. Jack.},
file = {::},
pages = {624},
publisher = {Clarendon Press},
title = {{The Essential Turing}},
url = {http://www.amazon.co.uk/The-Essential-Turing-Jack-Copeland/dp/0198250800},
year = {2004}
}
@book{Rosenberg1996,
address = {Marshall},
author = {Rosenberg, Jonathan B.},
file = {::},
pages = {272},
publisher = {Wiley},
title = {{How Debuggers Work}},
year = {1996}
}
@book{Unknown,
author = {刘汝佳},
file = {::},
title = {几何基础知识与应用}
}
@book{Patterson2008,
author = {Patterson, David A. and Hennessy, John L.},
file = {::},
publisher = {Morgan Kaufmann},
title = {{Computer Organization and Design, Fourth Edition, Fourth Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)}},
url = {http://www.amazon.com/Computer-Organization-Design-Fourth-Architecture/dp/0123744938},
year = {2008}
}
@book{2004,
author = {刘汝佳 and 黄亮},
file = {::;::;::},
pages = {428},
title = {算法艺术与信息学竞赛},
url = {http://product.china-pub.com/16323},
year = {2004}
}
@book{Hennessy2002,
author = {Hennessy, John L. and Patterson, David A.},
file = {::;::;::;::;::;::;::;::;::;::;::;::;::;::;::;::},
publisher = {Morgan Kaufmann},
title = {{Computer Architecture: A Quantitative Approach, 3rd Edition}},
url = {http://www.amazon.com/Computer-Architecture-Quantitative-Approach-3rd/dp/1558605967},
year = {2002}
}
@misc{Unknown,
author = {刘汝佳},
file = {::},
title = {杂题选}
}
@book{1999,
address = {北京},
author = {杨东屏 and 李昂生},
file = {::},
isbn = {7030063783},
pages = {369},
publisher = {科学出版社},
title = {可计算性理论},
year = {1999}
}
@book{Robbins2003,
author = {Robbins, Kay A. and Robbins, Steve},
file = {::},
keywords = {programming,unix},
mendeley-tags = {programming,unix},
pages = {912},
publisher = {Prentice Hall},
title = {{UNIX Systems Programming: Communication, Concurrency and Threads}},
url = {http://www.amazon.com/UNIX-Systems-Programming-Communication-Concurrency/dp/0130424110},
year = {2003}
}
@book{Tanenbaum2002,
author = {Tanenbaum, Andrew S.},
file = {::},
keywords = {network},
mendeley-tags = {network},
pages = {912},
publisher = {Prentice Hall},
title = {{Computer Networks (4th Edition)}},
url = {http://www.amazon.com/Computer-Networks-4th-Andrew-Tanenbaum/dp/0130661023},
year = {2002}
}
@book{Walsh2010a,
author = {Walsh, Norman},
file = {::},
pages = {552},
publisher = {O'Reilly Media},
title = {{DocBook 5: The Definitive Guide}},
url = {http://www.amazon.co.uk/DocBook-5-The-Definitive-Guide/dp/0596805020},
year = {2010}
}
@book{Abelson1996a,
author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
file = {::},
pages = {657},
publisher = {McGraw-Hill Science/Engineering/Math},
title = {{Structure and Interpretation of Computer Programs, Second Edition}},
url = {http://www.amazon.com/Structure-Interpretation-Computer-Programs-Edition/dp/0070004846},
year = {1996}
}
@book{Knuth1997a,
author = {Knuth, Donald E.},
file = {::},
pages = {784},
publisher = {Addison-Wesley Professional},
title = {{The Art of Computer Programming, Volume 2: Seminumerical Algorithms (2nd Edition)}},
url = {http://www.amazon.com/Art-Computer-Programming-Seminumerical-Algorithms/dp/0201896842},
year = {1997}
}
@book{Bunce2000a,
author = {Bunce, Tim and Descartes, Alligator},
file = {::},
pages = {364},
publisher = {O'Reilly Media, Inc.},
title = {{Programming the Perl DBI}},
url = {http://www.amazon.com/Programming-Perl-DBI-Tim-Bunce/dp/1565926994},
year = {2000}
}
@book{Martin2011,
author = {Martin, Robert C.},
file = {::},
pages = {256},
publisher = {Prentice Hall},
title = {{The Clean Coder: A Code of Conduct for Professional Programmers}},
url = {http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr\_1\_1?ie=UTF8\&qid=1325638007\&sr=8-1},
year = {2011}
}
@book{Unknown,
author = {刘汝佳},
file = {::},
title = {基础数据结构}
}
@book{Spinellis2009,
author = {Spinellis, Diomidis and Gousios, Georgios},
file = {::},
isbn = {059651798X},
publisher = {O'Reilly Media},
title = {{Beautiful Architecture: Leading Thinkers Reveal the Hidden Beauty in Software Design}},
url = {http://www.amazon.com/Beautiful-Architecture-Leading-Thinkers-Software/dp/059651798X},
year = {2009}
}
@book{2009,
address = {北京},
author = {俞甲子 and 石凡 and 潘爱民},
file = {::},
publisher = {电子工业出版社},
title = {程序员的自我修养},
year = {2009}
}
@book{computer-system-prog,
author = {Bryant, Randal E. and O'Hallaron, David R.},
file = {::},
publisher = {Prentice Hall},
title = {{Computer Systems: A Programmer's Perspective}},
url = {http://www.amazon.com/Computer-Systems-Programmers-Randal-Bryant/dp/013034074X},
year = {2002}
}
@book{Lazowska1984a,
author = {Lazowska, Edward D.},
file = {::},
pages = {417},
publisher = {Prentice Hall},
title = {{Quantitative System Performance, Computer System Analysis Using Queuing Network Models}},
url = {http://www.amazon.com/Quantitative-Performance-Computer-Analysis-Queuing/dp/0137469756},
year = {1984}
}
@book{Unknown,
author = {刘汝佳},
file = {::},
title = {高级数据结构}
}
@book{Raymond2003,
author = {Raymond, Eric S.},
file = {::},
keywords = {architecture,programming,unix},
mendeley-tags = {architecture,programming,unix},
pages = {560},
publisher = {Addison-Wesley Professional},
title = {{The Art of UNIX Programming}},
url = {http://www.amazon.com/Art-UNIX-Programming-Eric-Raymond/dp/0131429019},
year = {2003}
}
@misc{Unknown,
author = {垂钓听竹轩},
file = {::},
title = {{Prolog学习资料}}
}
@book{Bradski2008,
author = {Bradski, Gary and Kaehler, Adrian},
file = {::;::},
isbn = {0596516134},
pages = {555},
publisher = {O'Reilly Media},
title = {{Learning OpenCV: Computer Vision with the OpenCV Library}},
url = {http://www.amazon.com/Learning-OpenCV-Computer-Vision-Library/dp/0596516134},
year = {2008}
}
@article{Herlihy1991,
author = {Herlihy, Maurice},
file = {::},
journal = {ACM Transactions on Programming Languages and Systems},
number = {1},
pages = {124--149},
title = {{Wait-Free Synchronization}},
volume = {11},
year = {1991}
}
@book{Norman2010,
author = {Norman, Walsh and Hamilton, Richard L.},
file = {::},
pages = {550},
publisher = {O'Reilly Media},
title = {{DocBook 5: The Definitive Guide}},
url = {http://www.amazon.com/DocBook-Definitive-Guide-Walsh-Norman/dp/0596805020},
year = {2010}
}
@book{Unknown,
author = {刘汝佳},
file = {::},
title = {图结构和基本问题}
}
@book{D,
author = {Knuth, Donald E.},
file = {::},
publisher = {Addison-Wesley},
title = {{The Art of Computer Programming, pre-fascicle 2A, A Draft of Section 7.2.1.1: Generating all n-tuples}}
}
@techreport{Synopsys2006a,
author = {Synopsys},
file = {::},
keywords = {clock,synthesis},
mendeley-tags = {clock,synthesis},
pages = {71},
title = {{Clock gating methodology for power and CTS QoR}},
year = {2006}
}
@inproceedings{Jadcherla2009,
abstract = {Low power techniques},
address = {San Jose},
author = {Jadcherla, Srikanth},
booktitle = {SNUG},
file = {::},
keywords = {low power},
mendeley-tags = {low power},
title = {{Low Power Verification}},
year = {2009}
}
@book{Chaturvedi,
author = {Chaturvedi, Shubhyant},
booktitle = {DATE 2006},
file = {::},
keywords = {cdc},
mendeley-tags = {cdc},
number = {Cdc},
pages = {17},
publisher = {AMD},
title = {{Structural Clock Domain Crossing Analysis using PrimeTime}},
year = {2006}
}
@book{BA2006,
author = {BA, Mike Tooley},
file = {::},
isbn = {0750669233},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {440},
publisher = {Newnes},
title = {{Electronic Circuits - Fundamentals \& Applications, Third Edition}},
url = {http://www.amazon.com/Electronic-Circuits-Fundamentals-Applications-Third/dp/0750669233/ref=sr\_1\_3?ie=UTF8\&qid=1313420978\&sr=8-3},
year = {2006}
}
@book{Group2010,
address = {New York},
author = {Group, Design Automation Standards Committee of the IEEE Computer Society and the IEEE Standards Association Corporate Advisory},
file = {::},
keywords = {package},
mendeley-tags = {package},
pages = {374},
publisher = {IEEE Press},
title = {{IEEE Standard for IP-XACT, Standard Structure for Packaging, Integrating, and Reusing IP withing Tool Flows (IEEE Std 1685-2009)}},
year = {2010}
}
@techreport{Unknowna,
author = {王良清},
file = {::},
keywords = {low power},
mendeley-tags = {low power},
pages = {41},
title = {{Low Power基础培训}}
}
@techreport{Unknownb,
author = {黄信融},
file = {::},
keywords = {dft},
mendeley-tags = {dft},
title = {{Design for Testability with DFT Compiler and TetraMax}}
}
@book{vmm-book-en,
author = {Bergeron, Janick and Cerny, Eduard and Hunter, Alan and Nightingale, Andy},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
pages = {510},
publisher = {Springer},
title = {{Verification Methodology Manual for SystemVerilog}},
url = {http://www.amazon.com/Verification-Methodology-Manual-SystemVerilog-Bergeron/dp/0387255389},
year = {2005}
}
@book{Synopsys2012,
author = {Synopsys},
file = {::},
number = {June},
pages = {347},
title = {{Timing Constraints and Optimization User Guide (G-2012.06)}},
year = {2012}
}
@book{Pierret1996,
author = {Pierret, Robert F.},
file = {::},
isbn = {0201543931},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {303},
publisher = {Addison Wesley},
title = {{Semiconductor Device Fundamentals}},
url = {http://www.amazon.com/Semiconductor-Device-Fundamentals-Robert-Pierret/dp/0201543931/ref=sr\_1\_1?ie=UTF8\&qid=1313421068\&sr=8-1},
year = {1996}
}
@book{Keating2002,
author = {Keating, Michael},
file = {::},
keywords = {rtl},
mendeley-tags = {rtl},
pages = {292},
publisher = {Springer},
title = {{Reuse Methodology Manual for System-on-a-Chip Designs, 3rd edition}},
url = {http://www.amazon.com/Reuse-Methodology-Manual-System--Designs/dp/1402071418/ref=sr\_1\_1?ie=UTF8\&qid=1322103507\&sr=8-1},
year = {2002}
}
@book{sv-for-verif,
author = {Spear, Christian B.},
file = {::},
isbn = {978-0387765297},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
pages = {429},
publisher = {Springer},
title = {{SystemVerilog for Verification: A Guide to Learning the Testbench Language Features}},
url = {http://www.amazon.com/SystemVerilog-Verification-Learning-Testbench-Language/dp/0387765298},
year = {2008}
}
@book{Sze2006a,
author = {Sze, Simon M. and Ng, Kwok K.},
file = {::},
isbn = {0471143235},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {832},
publisher = {Wiley-Interscience},
title = {{Physics of Semiconductor Devices, 3rd ed}},
url = {http://www.amazon.com/Physics-Semiconductor-Devices-Simon-Sze/dp/0471143235},
year = {2006}
}
@book{OSCI2002a,
author = {OSCI},
file = {::},
keywords = {systemc},
mendeley-tags = {systemc},
title = {{SystemC Version 2.0 User's Guide}},
year = {2002}
}
@book{Society2012,
address = {New York},
author = {Society, Design Automation Standards Committee of the IEEE Computer},
file = {::},
keywords = {systemc},
mendeley-tags = {systemc},
pages = {638},
publisher = {IEEE Press},
title = {{IEEE Standard for Standard SystemC Language Reference Manual (IEEE Std 1666-2011)}},
year = {2012}
}
@book{Lim2010b,
author = {Lim, Sung Kyu},
file = {::},
keywords = {synthesis},
mendeley-tags = {synthesis},
pages = {300},
publisher = {Springer},
title = {{Practical Problems in VLSI Physical Design Automation}},
url = {http://www.amazon.com/Practical-Problems-Physical-Design-Automation/dp/9048176824},
year = {2010}
}
@book{Athavale2005,
address = {San Jose},
author = {Athavale, Abhijit and Christensen, Carl},
file = {::},
keywords = {fpga},
mendeley-tags = {fpga},
pages = {210},
publisher = {Xilinx},
title = {{High-Speed Serial I/O Made Simple A Designer's Guide with FPGA Applications}},
year = {2005}
}
@book{Flynn2011a,
author = {Flynn, David and Aitken, Rob and Gibbons, Alan and Shi, Kaijian},
file = {::},
keywords = {low power},
mendeley-tags = {low power},
pages = {320},
publisher = {Springer},
title = {{Low Power Methodology Manual: For System-on-Chip Design (Integrated Circuits and Systems)}},
url = {http://www.amazon.com/Power-Methodology-Manual-System-Chip/dp/1441944184},
year = {2011}
}
@book{Oklobdzija2003a,
author = {Oklobdzija, Vojin G. and Stojanovic, Vladimir M. and Markovic, Dejan M. and Nedovic, Nikola M.},
file = {::},
keywords = {clock,synthesis},
mendeley-tags = {clock,synthesis},
pages = {264},
publisher = {Wiley-IEEE Press},
title = {{Digital System Clocking: High-Performance and Low-Power Aspects}},
url = {http://www.amazon.com/Digital-System-Clocking-High-Performance-Low-Power/dp/047127447X},
year = {2003}
}
@book{vmm-book-cn,
abstract = {VMM},
address = {北京},
author = {Bergeron, Janick and Cerny, Eduard and Hunter, Alan and Nightingale, Andrew},
file = {::},
isbn = {9787811240795},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {北京航空航天大学出版社},
title = {{SystemVerilog验证方法学}},
translator = {夏宇闻 and 杨雷 and 陈先勇 and 徐伟俊 and 杨鑫},
year = {2007}
}
@book{IEEE2008,
author = {IEEE},
file = {::;::},
pages = {208},
title = {{IEEE Standard Test Access Port and Boundary-Scan Architecture (Std 1149.1-2001)}},
year = {2008}
}
@book{OSCI2004,
author = {OSCI},
file = {::},
keywords = {systemc},
mendeley-tags = {systemc},
title = {{SystemC 2.1 Overview}},
year = {2004}
}
@book{Wang2006c,
author = {Wang, Laung-Terng and Wu, Cheng-Wen and Wen, Xiaoqing},
file = {::},
keywords = {dft},
mendeley-tags = {dft},
pages = {808},
publisher = {Morgan Kaufmann},
title = {{VLSI Test Principles and Architectures: Design for Testability (Systems on Silicon)}},
url = {http://www.amazon.co.uk/VLSI-Test-Principles-Architectures-Testability/dp/0123705975},
year = {2006}
}
@book{Bhatnagar2002,
author = {Bhatnagar, Himanshu},
file = {::},
keywords = {synthesis},
mendeley-tags = {synthesis},
pages = {341},
publisher = {KLUWER ACADEMIC PUBLISHERS},
title = {{ADVANCED ASIC CHIP SYNTHESIS Using Synopsys Design Compiler Physical Compiler and PrimeTime}},
year = {2002}
}
@book{sv-functional-coverage,
author = {Piziali, Andrew},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
pages = {213},
publisher = {Springer},
title = {{Functional Verification Coverage Measurement and Analysis}},
url = {http://www.amazon.com/Functional-Verification-Coverage-Measurement-Analysis/dp/0387739920},
year = {2007}
}
@book{Sutherland2006a,
author = {Sutherland, Stuart and Davidmann, Simon and Flake, Peter},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
pages = {418},
publisher = {Springer},
title = {{SystemVerilog for Design Second Edition: A Guide to Using SystemVerilog for Hardware Design and Modeling}},
url = {http://www.amazon.com/SystemVerilog-Design-Second-Hardware-Modeling/dp/0387333991},
year = {2006}
}
@book{Dekoker,
author = {Laurent, Charles and Nguyen, Phuong and Dekoker, Joseph and Spagnuolo, Domenique},
file = {::},
keywords = {cdc},
mendeley-tags = {cdc},
pages = {17},
publisher = {Sigma Designs, Inc.},
title = {{An all-inclusive solution for clock domain crossings}},
year = {2012}
}
@book{Syno,
author = {Synopsys},
file = {::},
keywords = {low power},
mendeley-tags = {low power},
pages = {24},
publisher = {Synopsys},
title = {{Low Power Verification Overview}},
year = {2009}
}
@book{vlog-ieee,
address = {New York},
author = {IEEE},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {The Institute of Electrical and Electronics Engineers, Inc.},
title = {{IEEE Std 1364-2001, IEEE Standard Verilog Hardware Description Language}},
year = {2001}
}
@book{sv-ieee,
abstract = {This standard represents a merger of two previous standards: IEEE Std 1364\^{A}¿-2005 Verilog hardware description language (HDL) and IEEE Std 1800-2005 SystemVerilog unified hardware design, specification, and verification language. The 2005 SystemVerilog standard defines extensions to the 2005 Verilog standard. These two standards were designed to be used as one language. Merging the base Verilog language and the SystemVerilog extensions into a single standard provides users with all information regarding syntax and semantics in a single document.},
address = {New York},
author = {IEEE},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {The Institute of Electrical and Electronics Engineers, Inc.},
title = {{1800-2009 IEEE Standard for SystemVerilog - Unified Hardware Design, Specification, and Verification Language}},
url = {http://ieeexplore.ieee.org/xpl/freeabs\_all.jsp?arnumber=5354441}
}
@book{Intent2009,
author = {Synopsys},
file = {::},
number = {September},
pages = {28},
publisher = {Synopsys},
title = {{UPF Power Intent}},
year = {2009}
}
@book{Bhasker2009a,
author = {Bhasker, J. and Chadha, Rakesh},
file = {::},
keywords = {sta},
mendeley-tags = {sta},
pages = {592},
publisher = {Springer},
title = {{Static Timing Analysis for Nanometer Designs: A Practical Approach}},
url = {http://www.amazon.com/Static-Timing-Analysis-Nanometer-Designs/dp/0387938192},
year = {2009}
}
@book{stabasic,
author = {陈麒旭},
file = {::},
keywords = {sta},
mendeley-tags = {sta},
pages = {37},
title = {静态时序分析基础及应用},
year = {2011}
}
@book{Alexander2008a,
author = {Alexander, Charles K and Sadiku, Matthew},
file = {::},
keywords = {circuits},
mendeley-tags = {circuits},
publisher = {McGraw-Hill Higher Education},
title = {{Fundamentals of Electric Circuits}},
url = {http://www.amazon.co.uk/Fundamentals-Electric-Circuits-Charles-Alexander/dp/0071284419},
year = {2008}
}
@book{Hu2005,
author = {Hu, Jasper and Wang, Yongliu},
file = {::},
keywords = {synthesis},
mendeley-tags = {synthesis},
pages = {32},
publisher = {VeriSilicon},
title = {{Clock gating for low power design}},
year = {2005}
}
@book{Fonstad1994a,
author = {Fonstad, Clifton G.},
file = {::},
isbn = {0070214964},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {640},
publisher = {Mcgraw-Hill College},
title = {{Microelectronic Devices and Circuits}},
url = {http://www.amazon.com/Microelectronic-Devices-Circuits-Clifton-Fonstad/dp/0070214964},
year = {1994}
}
@book{Synopsys2009,
author = {Synopsys},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {Synopsys},
title = {{VMM Primers C-2009.06}},
year = {2009}
}
@book{JanM.RabaeyEditor1995,
editor = {Rabaey, Jan M. and Pedram, Massoud},
file = {::},
keywords = {low power},
mendeley-tags = {low power},
pages = {388},
publisher = {Springer},
title = {{Low Power Design Methodologies}},
url = {http://www.amazon.com/Methodologies-Springer-International-Engineering-Computer/dp/0792396308},
year = {1995}
}
@book{Pokhrel,
author = {Pokhrel, Khem and Rajah, Avinash and Dozier, Aleta and Kernen, Justin and {Ankit Shah}},
file = {::},
keywords = {cdc,clock},
mendeley-tags = {cdc,clock},
pages = {18},
publisher = {Intel},
title = {{A fast and flexible method of full chip clock planning for 32nm System on a Chip Khem Pokhrel Avinash Rajah}},
year = {2006}
}
@book{Churiwala2011a,
author = {Churiwala, Sanjay and Garg, Sapan},
file = {::},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {220},
publisher = {Springer},
title = {{Principles of VLSI RTL Design: A Practical Guide}},
url = {http://www.amazon.com/Principles-VLSI-RTL-Design-Practical/dp/1441992952},
year = {2011}
}
@book{OSCI2002,
author = {OSCI},
file = {::},
keywords = {systemc},
mendeley-tags = {systemc},
publisher = {OSCI},
title = {{Functional Specification for SystemC 2.0}},
year = {2002}
}
@book{Sadiku2007a,
author = {Sadiku, Matthew N.O. Alexand Charles K.\&},
file = {::},
keywords = {circuits},
mendeley-tags = {circuits},
publisher = {McGraw Hill},
title = {{Fundamentals of Electric Circuits. Third Edition}},
url = {http://www.amazon.com/Fundamentals-Electric-Circuits-Matthew-Alexand/dp/B0019ALZ1I},
year = {2007}
}
@book{Synopsys2009a,
author = {Synopsys},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
title = {{VMM Standard Library User Guide (C-2009.06 VMM Version 1.7)}},
year = {2009}
}
@inproceedings{Aklilu2008,
author = {Aklilu, Noah and Redhead, Anthony and Trehan, Pervinder},
booktitle = {SNUG San Jose 2008},
file = {::},
keywords = {rtl,syn},
mendeley-tags = {rtl,syn},
title = {{Getting Synchronous Resets Right}},
year = {2008}
}
@book{vmm-guide-1.1,
author = {Synopsys},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {Synopsys Inc.},
title = {{SystemVerilog VMM 1.1 Workshop Student Guide (VCS 2009.12)}},
year = {2010}
}
@book{OSCI2009,
author = {OSCI},
file = {::},
keywords = {systemc},
mendeley-tags = {systemc},
pages = {194},
publisher = {OSCI},
title = {{OSCI TLM-2.0 Language Reference Manual}},
year = {2009}
}
@book{Ayers2009a,
author = {Ayers, John E.},
file = {::},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {598},
publisher = {CRC Press},
title = {{Digital Integrated Circuits: Analysis and Design}},
url = {http://www.amazon.com/Digital-Integrated-Circuits-Analysis-Design/dp/142006987X},
year = {2009}
}
@article{Venkatachalam2005,
abstract = {Power consumption is a major factor that limits the performance of computers. We survey the “state of the art” in techniques that reduce the total power consumed by a microprocessor system over time. These techniques are applied at various levels ranging from circuits to architectures, architectures to system software, and system software to applications. They also include holistic approaches that will become more important over the next decade. We conclude that power management is a multifaceted discipline that is continually expanding with new techniques being developed at every level. These techniques may eventually allow computers to break through the “power wall” and achieve unprecedented levels of performance, versatility, and reliability. Yet it remains too early to tell which techniques will ultimately solve the power problem.},
author = {Venkatachalam, Vasanth and Franz, Michael},
file = {::},
issn = {0360-0300},
journal = {ACM Computing Surveys (CSUR)},
keywords = {Energy dissipation,low power,power reduction},
mendeley-tags = {low power},
number = {3},
pages = {195},
title = {{Power reduction techniques for microprocessor systems}},
url = {http://portal.acm.org/citation.cfm?id=1108957},
volume = {37},
year = {2005}
}
@book{vlog-rtl,
author = {IEEE},
file = {::},
keywords = {systemverilog},
mendeley-tags = {systemverilog},
publisher = {Design Automation Standards Committee of the IEEE Computer Society},
title = {{IEEE P1364.1 / D1.6 Draft Standard for Verilog Register Transfer Level Synthesis}}
}
@book{Amos2011,
author = {Amos, Doug and Lesea, Austin and Richter, Ren\'{e}},
file = {::},
isbn = {1617300047},
keywords = {fpga},
mendeley-tags = {fpga},
pages = {494},
publisher = {Synopsys Press},
title = {{FPGA-based Prototyping Methodology Manual: Best Practices in Design-for-Prototyping}},
url = {http://www.amazon.com/FPGA-based-Prototyping-Methodology-Design-Prototyping/dp/1617300047},
year = {2011}
}
@book{sv-tb,
author = {Bergeron, Janick},
file = {::},
keywords = {systemverilog,verif},
mendeley-tags = {systemverilog,verif},
pages = {414},
publisher = {Springer},
title = {{Writing Testbenches using SystemVerilog}},
url = {http://www.amazon.com/Writing-Testbenches-SystemVerilog-Janick-Bergeron/dp/0387292217},
year = {2006}
}
@book{Wong2004a,
author = {Wong, Ban and Mittal, Anurag and Cao, Yu and Starr, Greg W.},
file = {::},
keywords = {circuits},
mendeley-tags = {circuits},
pages = {416},
publisher = {Wiley-Interscience},
title = {{Nano-CMOS Circuit and Physical Design}},
url = {http://www.amazon.com/Nano-CMOS-Circuit-Physical-Design-Wong/dp/0471466107},
year = {2004}
}
@book{Voß2010,
author = {Vo\ss, Herbert},
file = {::},
title = {{Math Mode}},
year = {2010}
}
@book{2006,
author = {吴凯},
file = {::},
title = {{GBT7714-2005.bst：利用BibTEX生成符合GB/T 7714-2005的参考文献}},
year = {2006}
}
@book{Goossens1997a,
author = {Goossens, Michel and Rahtz, Sebastian and Mittelbach, Frank},
file = {::},
pages = {608},
publisher = {Addison-Wesley Professional},
title = {{The LaTeX Graphics Companion: Illustrating Documents with TeX and Postscript(R)}},
url = {http://www.amazon.com/LaTeX-Graphics-Companion-Illustrating-Postscript/dp/0201854694},
year = {1997}
}
@book{Guru1999,
author = {Guru, TeX},
file = {::;::;::;::;::;::;::;::;::;::;::;::;::;::;::},
title = {{LaTeX 2e Manual}},
year = {1999}
}
@book{Reckdahl2006,
author = {Reckdahl, Keith},
file = {::;::},
pages = {124},
title = {{Using Imported Graphics in LATEX and pdfLATEX (插图指南)}},
year = {2006}
}
@book{Knuth1986a,
author = {Knuth, Donald E.},
file = {::;::},
pages = {384},
publisher = {Addison-Wesley Professional},
title = {{The Metafont Book}},
url = {http://www.amazon.com/Computers-Typesetting-Metafont-Book/dp/0201134454},
year = {1986}
}
@book{Mittelbach2004,
author = {Mittelbach, Frank and Goossens, Michel and Braams, Johannes and Carlisle, David and Rowley, Chris},
file = {::},
pages = {1120},
publisher = {Addison-Wesley Professional},
title = {{The LaTeX Companion (Tools and Techniques for Computer Typesetting)}},
url = {http://www.amazon.com/LaTeX-Companion-Techniques-Computer-Typesetting/dp/0201362996},
year = {2004}
}
@book{Knuth1986,
author = {Knuth, Donald E.},
file = {::;::;::},
isbn = {0201134470},
keywords = {undefined},
publisher = {Addison-Wesley Professional},
title = {{The texbook}},
url = {http://www.amazon.com/Computers-Typesetting-Donald-E-Knuth/dp/0201134470},
year = {1986}
}
@book{Hartke2006,
author = {Hartke, Stephen G},
booktitle = {Computer},
file = {::},
title = {{A Survey of Free Math Fonts for TEX and LaTeX}},
year = {2006}
}
@book{Partl2009,
author = {Partl, Hubert and Hyna, Irene and Schlegl, Elisabeth},
file = {::},
title = {{The Not So Short Introduction to LaTeX 2e}},
url = {http://tobi.oetiker.ch/lshort/lshort.pdf},
year = {2009}
}
@book{Huang2008,
author = {Huang, Alpha},
file = {::},
title = {{水木清华的LaTeX Notes}},
year = {2008}
}
@book{KMC2008,
author = {KMC},
file = {::},
title = {{XeTeX about font字体调用简介}},
year = {2008}
}
@book{Goossens1999a,
author = {Goossens, Michel and Rahtz, Sebastian and Gurari, Eitan M. and Moore, Ross and Sutor, Robert S.},
file = {::},
pages = {560},
publisher = {Addison-Wesley Professional},
title = {{The LaTeX Web Companion: Integrating TeX, HTML, and XML}},
url = {http://www.amazon.com/LaTeX-Web-Companion-Integrating-HTML/dp/0201433117},
year = {1999}
}
@book{Goossens2010,
author = {Goossens, Michel},
file = {::},
title = {{The XeTeX Companion}},
year = {2010}
}
@book{Gratzer2007,
author = {Gr\"{a}tzer, George},
file = {::},
pages = {619},
publisher = {Springer},
title = {{More Math Into LaTeX, 4th Edition}},
url = {http://www.amazon.com/More-Math-Into-LaTeX-4th/dp/0387322892},
year = {2007}
}
@book{Lamport1994,
author = {Lamport, Leslie},
file = {::},
pages = {288},
publisher = {Addison-Wesley Professional},
title = {{LaTeX: A Document Preparation System User's Guide and Reference Manual (2nd Edition)}},
url = {http://www.amazon.com/LaTeX-Document-Preparation-System-2nd/dp/0201529831},
year = {1994}
}
@book{Berry2010a,
author = {Berry, Karl},
title = {{The TeX Live Guide}},
url = {texmf/doc/texlive/texlive-en/texlive-en.pdf},
year = {2010}
}
@book{Lyanry,
author = {Lyanry},
file = {::},
title = {{xeTeX/LaTeX中文排版之胡言乱语}}
}
@book{Berry2010,
author = {Berry, Karl and Weber, Olaf and Hoekwater, Taco},
pages = {63},
title = {{Kpathsea library}},
url = {texmf/doc/kpathsea/kpathsea.pdf},
year = {2010}
}
@book{TUG2004,
author = {TUG},
pages = {20},
title = {{A Directory Structure for TeX Files}},
url = {./texmf-dist/doc/generic/tds/tds.pdf},
year = {2004}
}
@book{Rudin2004,
address = {北京},
author = {Rudin, Walter},
file = {::;::},
isbn = {7111134176},
pages = {306},
publisher = {机械工业出版社},
title = {数学分析原理},
translator = {赵慈庚},
year = {2004}
}
@book{Levin2008,
author = {Levin, David A. and Peres, Yuval and Wilmer, Elizabeth L.},
file = {::},
pages = {387},
title = {{Markov Chains and Mixing Times}},
year = {2008}
}
@book{2006,
address = {北京},
author = {龚昇},
file = {::},
isbn = {703014032X},
pages = {108},
publisher = {科学出版社},
title = {线性代数五讲},
year = {2006}
}
@book{Kline2005a,
author = {Kline, Morris},
file = {::},
publisher = {上海科学技术出版社},
title = {古今数学思想 (二)},
translator = {张理京 and 邓东泉},
year = {2005}
}
@book{Kline2005,
author = {Kline, Morris},
file = {::},
publisher = {上海科学技术出版社},
title = {古今数学思想 (一)},
translator = {张理京 and 邓东泉},
year = {2005}
}
@book{Boyd2004a,
author = {Boyd, Stephen and Vandenberghe, Lieven},
file = {::},
pages = {730},
publisher = {Cambridge University Press},
title = {{Convex Optimization}},
url = {http://www.amazon.com/Convex-Optimization-Stephen-Boyd/dp/0521833787},
year = {2004}
}
@book{Monk1976a,
author = {Monk, J.D.},
file = {::},
pages = {548},
publisher = {Springer},
title = {{Mathematical Logic (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Mathematical-Logic-Graduate-Texts-Mathematics/dp/0387901701},
year = {1976}
}
@book{Whitehead2009c,
author = {Whitehead, Alfred North and Russell, Bertrand},
file = {::},
pages = {500},
publisher = {Merchant Books},
title = {{Principia Mathematica - Volume Three}},
url = {http://www.amazon.com/Principia-Mathematica-Alfred-North-Whitehead/dp/160386184X},
year = {2009}
}
@book{Kline2005c,
author = {Kline, Morris},
file = {::},
publisher = {上海科学技术出版社},
title = {古今数学思想 (四)},
translator = {张理京 and 邓东泉},
year = {2005}
}
@book{Stroock2005a,
author = {Stroock, Daniel W.},
file = {::},
isbn = {3540234993},
pages = {171},
publisher = {Springer},
title = {{An Introduction to Markov Processes (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Introduction-Markov-Processes-Graduate-Mathematics/dp/3540234993},
year = {2005}
}
@book{Bollobas1998a,
author = {Bollobas, Bela},
file = {::},
pages = {408},
publisher = {Springer},
title = {{Modern Graph Theory}},
url = {http://www.amazon.com/Modern-Graph-Theory-Bela-Bollobas/dp/0387984887},
year = {1998}
}
@book{Rotman1994,
author = {Rotman, Joseph J.},
file = {::},
pages = {536},
publisher = {Springer},
title = {{An Introduction to the Theory of Groups}},
url = {http://www.amazon.com/Introduction-Theory-Groups-Joseph-Rotman/dp/0387942858},
year = {1994}
}
@book{Hungerford1980a,
author = {Hungerford, Thomas W.},
file = {::},
pages = {528},
publisher = {Springer},
title = {{Algebra (Graduate Texts in Mathematics) (v. 73)}},
url = {http://www.amazon.com/Algebra-Graduate-Texts-Mathematics-v/dp/0387905189},
year = {1980}
}
@book{2006,
address = {北京},
author = {曹建国 and 王友德},
file = {::},
isbn = {7-03-016435-0},
publisher = {科学出版社},
title = {现代黎曼几何简明教程},
year = {2006}
}
@book{Loeve1978a,
author = {Loeve, M.},
file = {::},
pages = {436},
publisher = {Springer},
title = {{Probability Theory II (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Probability-Theory-Graduate-Texts-Mathematics/dp/0387902627},
year = {1978}
}
@book{Needham1999a,
author = {Needham, Tristan},
file = {::;::},
pages = {616},
publisher = {Oxford University Press, USA},
title = {{Visual Complex Analysis}},
url = {http://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469},
year = {1999}
}
@book{A··2010,
address = {北京},
author = {A·я·辛钦},
file = {::},
isbn = {9787115226914},
pages = {171},
publisher = {人民邮电出版社},
title = {数学分析八讲},
translator = {王会林 and 齐发友},
year = {2010}
}
@book{2005,
author = {徐诚浩},
file = {::},
publisher = {高等教育出版社},
title = {连分数与历法},
year = {2005}
}
@book{Loeve1977a,
author = {Loeve, M.},
file = {::},
pages = {452},
publisher = {Springer},
title = {{Probability Theory I (v. 1)}},
url = {http://www.amazon.com/Probability-Theory-I-v-1/dp/0387902104},
year = {1977}
}
@book{Bondy2007a,
author = {Bondy, Adrian and Murty, U.S.R.},
file = {::},
pages = {654},
publisher = {Springer},
title = {{Graph Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Graph-Theory-Graduate-Texts-Mathematics/dp/1846289696},
year = {2007}
}
@book{Rudin1986a,
author = {Rudin, Walter},
file = {::;::},
pages = {483},
publisher = {McGraw-Hill Science/Engineering/Math},
title = {{Real and Complex Analysis (International Series in Pure and Applied Mathematics)}},
url = {http://www.amazon.com/Complex-Analysis-International-Applied-Mathematics/dp/0070542341},
year = {1986}
}
@book{Jacobson2009c,
author = {Jacobson, Nathan},
file = {::},
pages = {528},
publisher = {Dover Publications},
title = {{Basic Algebra I: Second Edition}},
url = {http://www.amazon.com/Basic-Algebra-Second-Nathan-Jacobson/dp/0486471896},
year = {2009}
}
@book{2001,
author = {柯朗, R. and 约翰, F.},
file = {::},
title = {微积分和数学分析引论 第二卷},
url = {http://www.china-pub.com/24854\#ml},
year = {2001}
}
@book{Whitehead2009a,
author = {Whitehead, Alfred North and Russell, Bertrand},
file = {::},
pages = {684},
publisher = {Merchant Books},
title = {{Principia Mathematica - Volume One}},
url = {http://www.amazon.com/Principia-Mathematica-Alfred-North-Whitehead/dp/1603861823},
year = {2009}
}
@book{·b·,
author = {Б·b·格涅坚科 and A·я·辛钦},
file = {::},
title = {概率论浅说}
}
@book{Marker2010a,
author = {Marker, David},
file = {::},
pages = {356},
publisher = {Springer New York},
title = {{Model Theory: An Introduction}},
url = {http://www.amazon.com/Model-Theory-Introduction-David-Marker/dp/1441931570},
year = {2010}
}
@book{Morandi1996a,
author = {Morandi, Patrick},
file = {::},
pages = {281},
publisher = {Springer},
title = {{Field and Galois Theory (Graduate Texts in Mathematics) (v. 167)}},
url = {http://www.amazon.com/Field-Galois-Theory-Graduate-Mathematics/dp/0387947531},
year = {1996}
}
@book{Hofstadter1999,
author = {Hofstadter, Douglas R.},
file = {::;::},
isbn = {9780465026562},
pages = {832},
publisher = {Basic Books},
title = {{G\"{o}del, Escher, Bach: An Eternal Golden Braid}},
url = {http://www.amazon.com/G�del-Escher-Bach-Eternal-Golden/dp/0465026567},
year = {1999}
}
@book{Whitehead2009d,
author = {Whitehead, Alfred North and Russell, Bertrand},
file = {::},
pages = {808},
publisher = {Merchant Books},
title = {{Principia Mathematica - Volume Two}},
url = {http://www.amazon.com/Principia-Mathematica-Alfred-North-Whitehead/dp/1603861831},
year = {2009}
}
@book{Lang2002a,
author = {Lang, Serge},
file = {::},
pages = {912},
publisher = {Springer},
title = {{Algebra}},
url = {http://www.amazon.com/Algebra-Serge-Lang/dp/038795385X},
year = {2002}
}
@book{Artin1991a,
author = {Artin, Michael},
file = {::},
pages = {672},
publisher = {Prentice Hall},
title = {{Algebra}},
url = {http://www.amazon.com/Algebra-Michael-Artin/dp/0130047635},
year = {1991}
}
@book{Walicki2011a,
author = {Walicki, Michal},
file = {::},
pages = {300},
publisher = {World Scientific Pub Co Inc},
title = {{Introduction to Mathematical Logic}},
url = {http://www.amazon.com/Introduction-Mathematical-Logic-Michal-Walicki/dp/9814343862},
year = {2011}
}
@book{Unknown,
author = {陈省身},
file = {::},
title = {组合矩阵论}
}
@book{Roman2005a,
author = {Roman, Steven},
file = {::},
pages = {335},
publisher = {Springer},
title = {{Field Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Field-Theory-Graduate-Texts-Mathematics/dp/0387276777},
year = {2005}
}
@book{Diestel2006a,
author = {Diestel, Reinhard},
file = {::},
pages = {415},
publisher = {Springer},
title = {{Graph Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Graph-Theory-Graduate-Texts-Mathematics/dp/3540261834},
year = {2006}
}
@book{A··,
author = {A·я·辛钦},
file = {::},
title = {连分数}
}
@book{Edwards1984a,
author = {Edwards, Harold M.},
file = {::},
pages = {172},
publisher = {Springer},
title = {{Galois Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Galois-Theory-Graduate-Texts-Mathematics/dp/038790980X},
year = {1984}
}
@book{2001,
address = {北京},
author = {冯克勤},
file = {::},
isbn = {7030081900},
pages = {419},
publisher = {科学出版社},
title = {代数数论},
year = {2001}
}
@book{2004,
author = {齐民友},
file = {::},
publisher = {高等教育出版社},
title = {重温微积分},
year = {2004}
}
@book{Kline2005b,
author = {Kline, Morris},
file = {::},
publisher = {上海科学技术出版社},
title = {古今数学思想 (三)},
translator = {张理京 and 邓东泉},
year = {2005}
}
@book{2004,
address = {北京},
author = {李文林},
file = {::},
isbn = {7040113619},
pages = {426},
publisher = {高等教育出版社},
title = {数学史概论},
year = {2004}
}
@book{2004,
address = {北京},
author = {钱敏平 and 龚光鲁},
file = {::},
isbn = {7301035470},
pages = {406},
publisher = {北京大学出版社},
title = {随机过程论},
year = {2004}
}
@book{Strang2009a,
author = {Strang, Gilbert},
file = {::},
pages = {584},
publisher = {Wellesley Cambridge Press},
title = {{Introduction to Linear Algebra, Fourth Edition}},
url = {http://www.amazon.com/Introduction-Linear-Algebra-Fourth-Gilbert/dp/0980232716},
year = {2009}
}
@book{Courant1998a,
author = {Courant, Richard and John, Fritz},
file = {::;::},
pages = {661},
publisher = {Springer},
title = {{Introduction to Calculus and Analysis, Vol. 1 (Classics in Mathematics)}},
url = {http://www.amazon.com/Introduction-Calculus-Analysis-Classics-Mathematics/dp/354065058X},
year = {1998}
}
@book{Everest2005a,
author = {Everest, G. and Ward, Thomas},
file = {::},
pages = {302},
publisher = {Springer},
title = {{An Introduction to Number Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Introduction-Number-Theory-Graduate-Mathematics/dp/1852339179},
year = {2005}
}
@book{Apostol1974a,
author = {Apostol, Tom M.},
file = {::},
pages = {492},
publisher = {Addison Wesley},
title = {{Mathematical Analysis, Second Edition}},
url = {http://www.amazon.com/Mathematical-Analysis-Second-Tom-Apostol/dp/0201002884},
year = {1974}
}
@book{2009,
address = {合肥},
author = {奚宏生},
file = {::},
isbn = {978-7-312-02260-9},
publisher = {中国科学技术大学出版社},
title = {随机过程引论},
year = {2009}
}
@book{Jacobson2009b,
author = {Jacobson, Nathan},
file = {::},
pages = {704},
publisher = {Dover Publications},
title = {{Basic Algebra II: Second Edition}},
url = {http://www.amazon.com/Basic-Algebra-II-Nathan-Jacobson/dp/048647187X},
year = {2009}
}
@article{Schulman1992,
author = {Schulman, Leonard J. Y.},
file = {::},
keywords = {interactive coding,noisy channel},
title = {{Communication in the presence of noise}},
url = {http://portal.acm.org/citation.cfm?id=170353},
year = {1992}
}
@book{Lin2004a,
author = {Lin, Shu and Costello, Daniel J.},
file = {::},
pages = {1272},
publisher = {Prentice Hall},
title = {{Error Control Coding (2nd Edition)}},
url = {http://www.amazon.com/Error-Control-Coding-2nd-Shu/dp/0130426725},
year = {2004}
}
@book{2005,
address = {北京},
author = {陈鲁生 and 沈世镒},
file = {::},
isbn = {7040161389},
publisher = {高等教育出版社},
title = {编码理论基础},
year = {2005}
}
@book{J.McEliece2004,
address = {北京},
author = {J.McEliece, Robert},
edition = {第二版},
file = {::},
pages = {290},
publisher = {电子工业出版社},
title = {信息论与编码理论},
year = {2004}
}
@book{Lyons1996a,
author = {Lyons, Richard G.},
file = {::},
pages = {544},
publisher = {Pearson Education},
title = {{Understanding Digital Signal Processing}},
url = {http://www.amazon.com/Understanding-Digital-Signal-Processing-Richard/dp/0201634678},
year = {1996}
}
@book{MacKay2002a,
author = {MacKay, David J. C.},
file = {::},
isbn = {0521642981},
pages = {550},
publisher = {Cambridge University Press},
title = {{Information Theory, Inference \& Learning Algorithms}},
url = {http://www.amazon.com/Information-Theory-Inference-Learning-Algorithms/dp/0521642981},
year = {2002}
}
@book{Lint1998a,
author = {van Lint, J.H.},
file = {::},
pages = {227},
publisher = {Springer},
title = {{Introduction to Coding Theory (Graduate Texts in Mathematics)}},
url = {http://www.amazon.com/Introduction-Coding-Theory-Graduate-Mathematics/dp/3540641335},
year = {1998}
}
@book{Lint2003,
author = {Lint, J.H.van},
file = {::},
isbn = {750620116X},
keywords = {coding},
mendeley-tags = {coding},
pages = {227},
publisher = {Springer-Verlag},
title = {编码论导论 (中文版)},
year = {2003}
}
@book{Manolakis2011a,
author = {Manolakis, Dimitris G. and Ingle, Vinay K.},
file = {::},
pages = {1016},
publisher = {Cambridge University Press},
title = {{Applied Digital Signal Processing: Theory and Practice}},
url = {http://www.amazon.com/Applied-Digital-Signal-Processing-Practice/dp/0521110025},
year = {2011}
}
@book{Sweeney2002a,
author = {Sweeney, Peter},
file = {::},
pages = {240},
publisher = {Wiley},
title = {{Error Control Coding: From Theory to Practice}},
url = {http://www.amazon.com/Error-Control-Coding-Theory-Practice/dp/047084356X},
year = {2002}
}
@book{McClelland2003,
address = {海口},
author = {McClelland, J.S.},
file = {::},
isbn = {7-5443-0722-0},
publisher = {海南出版社},
title = {西方政治思想史},
translator = {彭淮栋},
year = {2003}
}
@book{Unknown,
author = {刘瑜},
file = {::;::;::},
title = {余欢}
}
@book{Adler2011,
author = {Adler, Alfred},
file = {::},
keywords = {baby},
mendeley-tags = {baby},
publisher = {上海人民出版社},
title = {儿童的人格教育},
translator = {彭正梅 and 彭莉莉},
year = {2011}
}
@book{2003,
address = {南京},
author = {陈家麟},
file = {::},
isbn = {7-214-03426-3},
publisher = {江苏人民出版社},
title = {当代心理学},
year = {2003}
}
@book{Sowell,
author = {Sowell, Thomas},
file = {::},
title = {美国种族简史},
translator = {沈宗美}
}
@book{Benedict2006a,
abstract = {文化模式},
author = {Benedict, Ruth},
file = {::},
pages = {320},
publisher = {Mariner Books},
title = {{Patterns of Culture 文化模式}},
translator = {王炜},
url = {http://www.amazon.com/Patterns-Culture-Ruth-Benedict/dp/0618619550},
year = {2006}
}
@book{2009a,
author = {希区柯克},
file = {::},
publisher = {中央编译出版社},
title = {希区柯克悬念故事集},
translator = {王强},
year = {2009}
}
@book{Unknown,
address = {北京},
author = {唐士其},
file = {::},
isbn = {7-301-05604-4},
publisher = {北京大学出版社},
title = {西方政治思想史}
}
@book{Chang2007,
author = {Chang, Chuan C},
file = {::},
pages = {266},
publisher = {BookSurge Publishing},
title = {{Fundamentals of Piano Practice [Paperback]}},
url = {http://www.amazon.com/Fundamentals-Piano-Practice-Chuan-Chang/dp/1419678590/ref=sr\_1\_1?ie=UTF8\&qid=1322098323\&sr=8-1},
year = {2007}
}
@book{Weissman2003,
author = {Weissman, Jerry},
file = {::},
isbn = {0130464139},
pages = {304},
publisher = {FT Press},
title = {{Presenting to Win: The Art of Telling Your Story}},
url = {http://www.amazon.com/Presenting-Win-Telling-Your-Story/dp/0130464139},
year = {2003}
}
@book{1996,
address = {北京},
author = {徐友渔 and 周国平 and 陈嘉映 and 尚杰},
file = {::},
isbn = {7-108-00849-1},
publisher = {三联书店},
title = {语言与哲学: 当代英美与德法哲学传统比较研究},
year = {1996}
}
@book{Unknown,
author = {刘瑜},
file = {::;::},
title = {送你一颗子弹}
}
@book{Adler2006,
author = {Adler, Ronald B. and Rodman, George},
file = {::},
pages = {544},
publisher = {Oxford University Press, Incorporated; 9th edition},
title = {{Understanding Human Communication Ninth Edition}},
url = {http://www.amazon.com/Understanding-Human-Communication--Text-Only/dp/0007077483/ref=sr\_1\_1?ie=UTF8\&qid=1324357649\&sr=8-1},
year = {2006}
}
@book{Roskin2000,
author = {Roskin, Michael G. and Cord, Robert L. and Medeiros, James A. and Jones, Waiter S.},
file = {::},
isbn = {7-5080-2183-5},
publisher = {华夏出版社},
title = {政治科学},
translator = {林震 and 王锋},
year = {2000}
}
@book{Unknown,
author = {野夫},
file = {::},
title = {尘世挽歌}
}
@book{Unknownc,
author = {吴军},
file = {::},
title = {数学之美与浪潮之颠}
}
@book{Cross2009,
author = {Cross, Christopher T. and Woods, Taniesha A. and Schweingruber, Heidi},
file = {::},
pages = {398},
publisher = {The National Academies Press},
title = {{Mathematics Learning in Early Childhood: Paths Toward Excellence and Equity}},
year = {2009}
}
@misc{1984,
author = {李重光},
booktitle = {Journal of contaminant hydrology},
file = {::},
issn = {1873-6009},
month = mar,
pages = {203},
pmid = {20926156},
title = {基本乐理简明教程},
url = {http://www.amazon.cn/基本乐理简明教程-李重光/dp/B0017PEZ62/ref=pd\_sim\_b\_1},
volume = {120-121},
year = {1984}
}
@book{1992,
address = {北京},
author = {尼采},
file = {::},
isbn = {7-108-00445-3},
publisher = {三联书店},
title = {论道德的谱系},
year = {1992}
}
@book{2000,
address = {天津},
author = {徐大同},
file = {::},
isbn = {7-5309-3124-5},
publisher = {天津教育出版社},
title = {西方政治思想史},
year = {2000}
}
@book{Productions2001a,
author = {Productions, Robert McConnell},
file = {::},
pages = {432},
publisher = {Webster's New World},
title = {{Webster's New World Robert's Rules of Order Simplified and Applied}},
url = {http://www.amazon.com/Websters-World-Roberts-Simplified-Applied/dp/0764563998},
year = {2001}
}
@book{M.Copi2007,
author = {M.Copi, Irving and Cohen, Carl},
file = {::;::},
issn = {1873-6009},
month = mar,
pages = {756},
pmid = {20926156},
title = {{Introduction to Logic 逻辑学导论 第11版}},
translator = {张建军 and 潘天群},
volume = {120-121},
year = {2007}
}
@book{Kelly2010,
author = {Kelly, Kevin},
file = {::},
isbn = {0670022152},
pages = {416},
publisher = {Viking Adult},
title = {{What Technology Wants}},
url = {http://www.amazon.com/What-Technology-Wants-Kevin-Kelly/dp/B004Y6MT6O/ref=sr\_1\_1?ie=UTF8\&qid=1324357418\&sr=8-1},
year = {2010}
}
@book{Robert1995,
author = {Robert, Henry M.},
file = {::},
publisher = {商务印书馆},
title = {议事规则},
translator = {王宏昌},
year = {1995}
}
@book{Ericsson2006,
editor = {Ericsson, K. Anders and Charness, Neil and Feltovich, Paul J. and Hoffman, Robert R.},
file = {::},
pages = {918},
publisher = {Cambridge University Press},
title = {{The Cambridge Handbook of Expertise and Expert Performance (Cambridge Handbooks in Psychology)}},
url = {http://www.amazon.com/Cambridge-Expertise-Performance-Handbooks-Psychology/dp/0521600812},
year = {2006}
}
@book{2012,
author = {刘宇昆},
file = {::},
pages = {11},
title = {手中纸, 心中爱},
year = {2012}
}
@book{Unknownf,
author = {莫言},
file = {::},
title = {蛙}
}
@book{BrianW.Kernighan2011,
annote = {amazon.com: c programming language (2nd edition) (0076092003106): brian w. kernighan, dennis m. ritchie: books},
author = {{Brian W. Kernighan} and {Dennis M. Ritchie}},
file = {::},
pages = {274},
publisher = {Prentice Hall},
title = {{The C Programming Language (2nd edition)}},
url = {http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628/ref=sr\_1\_1?ie=UTF8\&qid=1340761616\&sr=8-1\&keywords=c+programming+language},
year = {2011}
}
@book{Unknown,
author = {严蔚敏 and 吴伟民},
file = {::},
isbn = {9787302023685},
pages = {334},
publisher = {清华大学出版社},
title = {数据结构c语言版.pdf},
year = {2007}
}
@book{Stroustrup2008a,
author = {Stroustrup, Bjarne},
file = {::;::;::;::;::},
pages = {1272},
publisher = {Addison-Wesley Professional},
title = {{Programming: Principles and Practice Using C++}},
url = {http://www.amazon.com/Programming-Principles-Practice-Using-C/dp/0321543726},
year = {2008}
}
@book{Unknown,
author = {张乃孝},
file = {::},
isbn = {9787040185768},
pages = {359},
publisher = {高等教育出版社},
title = {{算法与数据结构—C 语言描述}},
year = {2010}
}
@book{Unknown,
author = {罗剑锋},
file = {::},
isbn = {9787121115776},
pages = {578},
publisher = {电子工业出版社},
title = {{Boost程序库完全开发指南: 深入C++“准”标准库}},
year = {2010}
}
@article{Becker2011,
author = {Becker, Pete},
file = {::},
title = {{Working Draft , Standard for Programming Language C++}},
year = {2011}
}
@book{Stroustrup2000a,
author = {Stroustrup, Bjarne},
file = {::},
pages = {1030},
publisher = {Addison-Wesley Professional},
title = {{The C++ Programming Language: Special Edition}},
translator = {裘宗燕},
url = {http://www.amazon.com/C-Programming-Language-Special/dp/0201700735},
year = {2000}
}
@book{Chun,
author = {Chun, Wesley J},
file = {::},
publisher = {人民邮电出版社},
title = {{Python核心编程}}
}
@book{Lutz2007a,
author = {Lutz, Mark},
file = {::;::},
pages = {752},
publisher = {O'Reilly Media},
title = {{Learning Python, 3rd Edition}},
url = {http://www.amazon.com/Learning-Python-3rd-Mark-Lutz/dp/0596513984},
year = {2007}
}
@book{MarkSummerfield,
author = {{Mark Summerfield}},
file = {::},
isbn = {0132354187},
pages = {648},
publisher = {Prentice Hall},
title = {{Rapid GUI Programming with Python and Qt}},
year = {2007}
}
@book{svn-book,
author = {Collins-Sussman, Ben and Fitzpatrick, Brian W. and Pilato, C. Michael},
title = {{Version Control With Subversion For Subversion 1.5}},
url = {http://svnbook.red-bean.com/en/1.5/svn-book.pdf},
year = {2008}
}
@misc{bugzilla,
title = {{Bugzilla}},
url = {http://www.bugzilla.org/}
}
@book{Donnelly2011,
author = {Donnelly, Charles and Stallman, Richard},
file = {::},
pages = {188},
publisher = {GNU},
title = {{GNU Bison 2.5}},
year = {2011}
}
@book{Paxson2007,
author = {Paxson, Vern and Estes, Will and Millaway, John},
file = {::},
publisher = {GNU},
title = {{GNU Flex 2.5.35}},
year = {2007}
}
@misc{xmlrpc-web,
title = {{XML-RPC}},
url = {http://www.xmlrpc.com/}
}
@book{EdwardD.Lazowska1984,
author = {Lazowska, Edward D.},
file = {::},
pages = {417},
publisher = {Prentice Hall},
title = {{Quantitative System Performance, Computer System Analysis Using Queuing Network Models [Hardcover]}},
url = {http://www.amazon.com/Quantitative-Performance-Computer-Analysis-Queuing/dp/0137469756/ref=sr\_1\_1?ie=UTF8\&qid=1329812009\&sr=8-1},
year = {1984}
}
@article{drr,
author = {Shreedhar, M. and Varghese, George},
doi = {10.1145/217391.217453},
file = {::},
isbn = {0-89791-711-1},
issn = {01464833},
journal = {ACM SIGCOMM Computer Communication Review},
month = oct,
number = {4},
pages = {231--242},
title = {{Efficient fair queueing using deficit round robin}},
url = {http://portal.acm.org/citation.cfm?id=217391.217453},
volume = {25},
year = {1995}
}
@book{Baker2009a,
author = {Baker, Kenneth R. and Trietsch, Dan},
file = {::},
pages = {493},
publisher = {Wiley},
title = {{Principles of Sequencing and Scheduling}},
url = {http://www.amazon.com/Principles-Sequencing-Scheduling-Kenneth-Baker/dp/0470391650},
year = {2009}
}
@book{Willig1999,
author = {Willig, Andreas},
file = {::},
publisher = {Technical University Berlin, Telecommunication Networks Group},
title = {{A Short Introduction to Queueing Theory}},
year = {1999}
}
@inproceedings{sandmann2006analysis,
author = {Sandmann, W},
booktitle = {Measuring, Modelling and Evaluation of Computer and Communication Systems (MMB), 2006 13th GI/ITG Conference},
file = {::},
organization = {VDE},
pages = {1--13},
title = {{Analysis of a queueing fairness measure}},
year = {2006}
}
@book{Pinedo2008a,
author = {Pinedo, Michael L.},
file = {::},
pages = {696},
publisher = {Springer},
title = {{Scheduling: Theory, Algorithms, and Systems}},
url = {http://www.amazon.com/Scheduling-Algorithms-Michael-L-Pinedo/dp/0387789340},
year = {2008}
}
@book{Brucker2010a,
author = {Brucker, Peter},
file = {::},
pages = {383},
publisher = {Springer},
title = {{Scheduling Algorithms}},
url = {http://www.amazon.com/Scheduling-Algorithms-Peter-Brucker/dp/3642089070},
year = {2010}
}
@book{2002,
address = {北京},
author = {孙荣恒 and 李建平},
file = {::},
publisher = {科学出版社},
title = {排队论基础},
year = {2002}
}
@book{Adan2001,
author = {Adan, Ivo and Resing, Jacques},
file = {::},
publisher = {Department of Mathematics and Computing Science, Eindhoven University of Technology},
title = {{Queueing Theory}},
year = {2001}
}
@book{Stewart2011,
author = {Stewart, James},
file = {::},
isbn = {0538497815},
pages = {1194},
publisher = {Brooks Cole},
title = {{Calculus}},
url = {http://www.amazon.com/Calculus-James-Stewart/dp/0538497815},
year = {2011}
}
@article{Sangiovanni-Vincentelli2001,
author = {Sangiovanni-Vincentelli, A and Martin, G},
file = {::},
journal = {IEEE Design \& Test of Computers},
pages = {23--33},
title = {{Platform-based design and software design methodology for embedded systems}},
year = {2001}
}
@misc{SDL2000,
author = {SDL},
title = {{MSC-2000: Interaction for the new mellenium}},
url = {http://www.sdl-forum.org/MSC2000present/index.htm},
year = {2000}
}
@inproceedings{Walrath1997,
abstract = {Summary form only given. A performance model for a typical design represented in a high-level description language can be generated by augmenting the design components with attributes and evaluation rules. An attribute represents some performance aspect of a design that can be either assigned a base initial value or calculated using an evaluation rule. Heat dissipation, dynamic power consumption, and maximum throughput rate are just a few examples of various performance aspects that can be represented with attributes. Evaluation rules contained in the performance model can be classified as either equational or procedural. An equational performance model is a model containing only evaluation rules that are composed of mathematical operations such as addition, subtraction, and so forth. Likewise, a procedural performance model may contain equational rules, but it also has rules composed of complex programming constructs such as an assignment statement, if-then-else, case, and while control constructs and procedure calls. Our method for performance verification involves placing relational constraints on attributes in the performance model and determining whether all constraints can be satisfied simultaneously. Interval mathematics provides a convenient technique to represent relational constraints as intervals. Each attribute has an initial interval from negative infinity to positive infinity. Further constraints are specified by the user, the interval analysis technique is applied, and a verification result is produced},
author = {Walrath, J and Vemuri, R and Bradley, W},
booktitle = {European Design and Test Conference, 1997. ED\&TC 97. Proceedings},
file = {::},
keywords = {PDL,attributes,circuit CAD,constraint handling,equational performance model,evaluation rules,formal verification,high level synthesis,high-level description language,interval analysis,interval mathematics,partial evaluation,performance model,performance verification,procedural performance model,relational constraints,specification languages},
pages = {622},
title = {{Performance verification using partial evaluation and interval analysis}},
year = {1997}
}
@article{Qin2006,
abstract = {Hardware/software co-specification is a critical phase in co-design. Our co-specification process starts with a high level graphical description in Statecharts and ends with an equivalent parallel composition of hardware and software descriptions in Verilog. In this paper, we first investigate the Statecharts formalism by providing it a formal syntax and a compositional operational semantics. Based on that, a semantics-preserving linking function is designed to compile specifications written in Statecharts into Verilog. The obtained Verilog specifications are then passed to a partitioning process to generate hardware and software subspecifications, where the correctness is guaranteed by algebraic laws of Verilog. \&copy; Springer-Verlag Berlin Heidelberg 2006.},
annote = {article
Xin Meng
Systems analysis
Hardware specification;Software specification;Co-specification process;Operational semantics;Algebraic laws;},
author = {Qin, Shengchao and Chin, Wei-Ngan and He, Jifeng and Qiu, Zongyan},
isbn = {1614-5046},
journal = {Innovations in Systems and Software Engineering},
keywords = {Algebra,Computer hardware,Computer software,Qin2006,Semantics,Specifications},
mendeley-tags = {Qin2006},
number = {1},
pages = {17--38},
title = {{From Statecharts to Verilog: A formal approach to hardware/software co-specification}},
volume = {2},
year = {2006}
}
@article{Kamin1997,
annote = {FPIC},
author = {Kamin, S},
journal = {University of Illinois Computer Science Report},
title = {{DSL’97—1st ACM SIGPLAN Workshop on Domain-Specific Languages in Association with POPL’97}},
year = {1997}
}
@misc{Nicolescu2002,
abstract = {Currently, since many SoCs include heterogeneous components such as CPUs, DSPs, ASICs, memories, buses, etc., system integration becomes a major step in the design flow. To enable this integration, we use a design approach called component based-design approach. In this approach, the validation of system integration takes most of design efforts. This paper presents an automatic method of SoCs design validation. Based on a generic simulation wrapper architecture, the presented method provides automatic generation of executable models throughout different stages of SoC design flow. A case study of validating a VDSL application shows the effectiveness of the method.},
address = {Kyoto, Japan},
annote = {581236
162-167},
author = {Nicolescu, Gabriela and Yoo, Sungjoo and Bouchhima, Aimen and Jerraya, Ahmed Amine},
booktitle = {Proceedings of the 15th international symposium on System Synthesis},
doi = {http://doi.acm.org/10.1145/581199.581236},
publisher = {ACM},
title = {{Validation in a component-based design flow for multicore SoCs}},
year = {2002}
}
@misc{GNU2009,
author = {GNU},
title = {{GCC-The GNU Compiler Collection}},
url = {http://gcc.gnu.org/},
year = {2009}
}
@article{Valenzuela2002,
author = {Valenzuela, C L and Wang, P Y},
file = {::},
journal = {IEEE Transactions on Evolutionary Computation},
number = {4},
pages = {390--401},
title = {{VLSI placement and area optimization using a genetic algorithm tobreed normalized postfix expressions}},
volume = {6},
year = {2002}
}
@book{Aho2006,
address = {Des Moines, IA},
author = {Aho, Alfred V and Lam, Monica S and Sethi, Ravi and Ullman, Jeffrey D},
edition = {2nd},
publisher = {Addison-Wesley},
title = {{Compilers: Priciples, Techniques, \& Tools}},
year = {2006}
}
@book{Trzaskalik2002,
address = {Heidelberg},
author = {Trzaskalik, Tadeusz and Michnik, Jerzy},
publisher = {Physica-Verlag Heidelberg},
title = {{Multiple Objective and Goal Programming: Recent Developments (Advances in Intelligent and Soft Computing)}},
year = {2002}
}
@article{Nicolescu2002a,
author = {Nicolescu, G and Yoo, S and Bouchhima, A and Jerraya, A A},
journal = {Proceedings of the 15th international symposium on System Synthesis},
pages = {162--167},
title = {{Validation in a component-based design flow for multicore SoCs}},
year = {2002}
}
@inproceedings{Parsopoulos2002,
annote = {Proceedings of the 2002 ACM symposium on Applied computing},
author = {Parsopoulos, K E and Vrahatis, M N},
file = {::},
pages = {603--607},
publisher = {ACM New York, NY, USA},
title = {{Particle swarm optimization method in multiobjective problems}},
year = {2002}
}
@misc{Synopsys2009b,
author = {Synopsys},
title = {{OpenVera}},
url = {http://www.open-vera.com/},
year = {2009}
}
@book{Hajek2001,
annote = {norm},
author = {Hajek, P},
publisher = {Kluwer academic publishers},
title = {{Metamathematics of fuzzy logic}},
url = {http://books.google.com/books?hl=en\&lr=\&id=Eo-e8Pi-HmwC\&oi=fnd\&pg=PR7\&dq=Metamathematics+of+Fuzzy+Logic\&ots=ElYtt4Iz9\_\&sig=OnZTv8750kn2ttidrxG3mt66oq8\#v=onepage\&q=\&f=false},
year = {2001}
}
@article{Felleisen2004,
annote = {S-XML},
author = {Felleisen, M and Findler, R and Flatt, M and Krishnamurthi, S},
journal = {Dr. Dobb’s Journal},
number = {4},
pages = {45--49},
title = {{Building little languages with macros}},
volume = {29},
year = {2004}
}
@book{Budd2006,
address = {Berkeley, CA},
author = {Budd, Andy and Collison, Simon and Moll, Cameron},
publisher = {friends of ED},
title = {{CSS Mastery: Advanced Web Standards Solutions}},
year = {2006}
}
@misc{PCI-SIG2003,
author = {PCI-SIG},
booktitle = {PCI-SIG},
title = {{PCI Express Base Specification Revision 1.0a}},
year = {2003}
}
@article{Bartleson2005,
abstract = {SystemVerilog language, the design and verification methodology, developed through Accelera's standardization process to comply with IEEE standard, is discussed. SystemVerilog is the first hardware design and verification language (HDVL), which includes all the functionality of the design languages Verilog and VHDL. It helps designers in design-for-verification (DFV) methodology and reduces the simulation-synthesis mismatches. It provides a single solution to identify and control random values and to define design behavior.},
annote = {article
Xin Meng
Computer hardware description languages
Design-for-verification (DFV);SystemVerilog;Accelera (CO);Hardware design and verification language;},
author = {Bartleson, Karen},
isbn = {0192-1541},
journal = {Electronic Engineering Times},
keywords = {Bartleson2005,Computer aided design,Computer hardware,Computer simulation,Specifications,Standardization,Standards},
mendeley-tags = {Bartleson2005},
number = {1373},
pages = {10--11},
title = {{SystemVerilog is changing everything}},
year = {2005}
}
@article{Tao2008,
abstract = {To update a performance model, its parameter values must be updated, and in some applications (such as autonomic systems) tracked continuously over time. Direct measurement of many parameters during system operation requires instrumentation which is impractical. Kalman filter estimators can track such parameters using other data such as response times and utilizations, which are readily observable. This paper adapts Kalman filter estimators for performance model parameters, evaluates the approximations which must be made, and develops a systematic approach to setting up an estimator. The estimator converges under easily verified conditions. Different queueing-based models are considered here, and the extension for state-based models (such as stochastic Petri nets) is straightforward.},
author = {Tao, Zheng and Woodside, C M and Litoiu, M},
file = {::},
isbn = {0098-5589},
journal = {Software Engineering, IEEE Transactions on},
keywords = {Kalman filter estimators,Kalman filtering,Kalman filters,Measurement,Modeling techniques,Parameter tracking,Performance model,optimal filters,parameter estimation,performance model estimation,performance model tracking,queuing-based models,software performance evaluation},
number = {3},
pages = {391--406},
title = {{Performance Model Estimation and Tracking Using Optimal Filters}},
volume = {34},
year = {2008}
}
@article{Coello2000,
author = {Coello, C A},
file = {::},
journal = {ACM Computing Surveys (CSUR)},
number = {2},
pages = {109--143},
title = {{An updated survey of GA-based multiobjective optimization techniques}},
volume = {32},
year = {2000}
}
@book{Coello2007,
address = {New York },
author = {Coello, C A C and Lamont, G B and {Van Veldhuizen}, D A},
file = {::},
publisher = {Springer-Verlag},
title = {{Evolutionary algorithms for solving multi-objective problems}},
year = {2007}
}
@inproceedings{Bruntink2005,
abstract = {This paper reports on our experience in automatically migrating the crosscutting concerns of a large-scale software system, written in C, to an aspect-oriented implementation. We present a systematic approach for isolating crosscutting concerns, and illustrate this approach by zooming in on one particular crosscutting concern. Additionally, we compare the already existing solution to the aspect-oriented solution, and discuss advantages as well as disadvantages of both in terms of selected quality attributes. Our results show that automated migration is feasible, and that adopting an aspect-oriented approach can lead to significant improvements in source code quality, if carefully designed and managed.},
annote = {PCSL},
author = {Bruntink, M and van Deursen, A and Tourwe, T},
booktitle = {ICSM'05. Proceedings of the 21st IEEE International Conference on Software Maintenance, 2005},
file = {::},
pages = {37--46},
title = {{Isolating idiomatic crosscutting concerns}},
year = {2005}
}
@article{Yan2004,
abstract = {This paper describes an in-house developed language tool called VPerl used in developing a 250 MHz 32-bit high-performance low power embedded CPU core. The authors showed that use of this tool can compress the Verilog code by more than a factor of 5, increase the efficiency of the front-end design, reduce the bug rate significantly. This tool can be used to enhance the reusability of an intellectual property model, and facilitate porting design for different platforms.},
annote = {YAN2004-vperl.pdf
article
Xin Meng},
author = {Yan, Xiaolang and Yu, LongLi and Wang, Jiebing},
journal = {Journal of Zhejiang University SCIENCE},
keywords = {EI,VPerl,YAN2004},
mendeley-tags = {YAN2004},
number = {9},
pages = {1103--1105},
title = {{A front-end automation tool supporting design, verification and reuse of SOC}},
volume = {5},
year = {2004}
}
@book{2006a,
address = {北京},
author = {曹建国 and 王友德},
file = {::},
publisher = {科学出版社},
title = {现代黎曼几何简明教程},
year = {2006}
}
@article{2005b,
annote = {platform-based },
author = {夏宇闻},
file = {::},
journal = {中国集成电路},
number = {006},
pages = {26--35},
title = {{IP 核的重用与基于平台的 SoC 设计 (上)}},
year = {2005}
}
@misc{Joy2009,
author = {Joy, Corwin and Gradman, Michael},
keywords = {dtl},
title = {{Database Template Library}},
url = {http://dtemplatelib.sourceforge.net/},
year = {2009}
}
@inproceedings{Cao2003,
abstract = {Feature modeling is commonly used to capture the commonalities and variabilities of systems in a domain during Domain Analysis. The output of feature modeling will be some reusable assets (components, patterns, domain-specific language, etc.) to be fed into the application engineering phase for ultimate software products. But current practice lacks an automatic approach for seamless generation of reusable assets from feature models. This paper presents an algorithm for generating sets of instance descriptions (feature instances) from feature models of a domain and applies this algorithm in creating a Generic Feature Modeling Environment for automating Feature-Oriented Domain Analysis.},
address = {Las Vegas, NV, United States},
annote = {inproceedings
Object oriented programming
Feature modeling;Domain analysis;Generative programing;},
author = {Cao, Fei and Bryant, Barrett R and Burt, Carol C and Huang, Zhisheng and Raje, Rajeev R and Olson, Andrew M and Auguston, Mikhail},
booktitle = {Proceedings of the International Conference on Software Engineering Research and Practise},
keywords = {Algorithms,Cao2003,Computer hardware description languages,Computer programming,XML},
mendeley-tags = {Cao2003},
pages = {944--949},
title = {{Automating Feature-Oriented Domain Analysis}},
volume = {2},
year = {2003}
}
@inproceedings{Zaki2003,
abstract = {The syntax analyzer tool for Verilog programs are discussed. These tools can be used as front end to debugging and program verification tools. A Verilog design can be modeled by either the control data flow graph (CFG) or the data dependency graph (DDG). The automated tool discussed, generates the respective CFG and DDG.},
address = {Montreal, Canada},
annote = {Zaki2003-Syntax code analysis and generation for Verilog.pdf
inproceedings
Xin Meng
Program debugging
Syntax code analysis;},
author = {Zaki, Mohamed and Tahar, Sofiene},
booktitle = {Canadian Conference on Electrical and Computer Engineering},
keywords = {Computer hardware,Computer hardware description languages,Computer software,Data flow analysis,EI,Zaki2003},
mendeley-tags = {Zaki2003},
pages = {235--240},
title = {{Syntax Code Analysis and Generation for Verilog}},
volume = {1},
year = {2003}
}
@inproceedings{Bhatia2006,
abstract = {Current state-of-art HPCMP performance modeling techniques primarily rely on combining a performance profile of an application on a well-known HPC architecture, and the machine characteristics of an emerging architecture to project an application's performance on the emerging architecture. Existing profiling and tracing tools on well-known architectures are typically used to collect the necessary performance data by executing applications and benchmarks on available systems. Since the performance enhancing features of novel processing devices may be significantly different from a conventional microprocessor system, current performance modeling schemes have limited applicability on systems like the Cray X1E vector supercomputer and parallel systems with accelerator devices like Cray XD1, which contains FPGAs. We employ an application modeling paradigm that allows a user to develop not only "architecture aware" but also "application aware"performance models. We extend the modeling assertions (MA) framework that permits a user to develop multi-resolution, parameterized symbolic models. We demonstrate the application of our modeling scheme by augmenting the MA models with performance enhancing attributes of the Cray X1E Multistrearning Processors (MSPs). Using the extended MA framework, we develop symbolic performance models of critical code blocks of an HPCMP 71-06 benchmark called HYCOM - an ocean modeling code. By representing the code characteristics of the critical code blocks in terms of both unique architectural attributes and key input parameters of the HYCOM application, we manage to reduce and sustain performance prediction error rates to less than 30\%},
author = {Bhatia, N and Alam, S R and Vetter, J S},
booktitle = {HPCMP Users Group Conference, 2006},
keywords = {Cray X1E Multistrearning Processors,Cray X1E vector supercomputer,Cray XD1,HPC architectures,HPCMP performance modeling,microprocessor system,modeling assertions framework,parallel architectures,parallel machines,parallel systems,performance evaluation},
pages = {367--373},
title = {{Performance Modeling of Emerging HPC Architectures}},
year = {2006}
}
@inproceedings{Beidas2004,
abstract = {Few analytical performance models that relate performance figure of merit to architectural design decisions are reported in recent studies of network-on-chip, which prevents the development of effective system-level synthesis techniques. We propose an analytical performance model based on queuing theory for a network-on-chip platform recently reported, which features an extremely simple programming model, while providing superior performance measures when compared with alternative architectures. We developed a multi-processor simulation framework, which can simulate an application at the instruction set level given an architecture configuration, to validate the analytical performance model. The accuracy and applicability of the proposed model is illustrated by two real-life applications, namely an SSL security acceleration processor and MP3 decoder.},
author = {Beidas, R and Jianwen, Zhu},
booktitle = {Embedded Systems for Real-Time Multimedia, 2004. ESTImedia 2004. 2nd Workshop on},
file = {::},
keywords = {MP3 decoder,SSL security acceleration processor,analytical performance model,architectural design decision,architecture configuration,computer architecture,context-flow system-on-chip platform,high level synthesis,instruction set level,instruction sets,microprogramming,multiprocessor simulation framework,network-on-chip,programming model,queueing theory,queuing theory,queuing-theoretic performance model,real-life application,real-time systems,system-level synthesis techniques,system-on-chip},
pages = {21--26},
title = {{A queuing-theoretic performance model for context-flow system-on-chip platforms}},
year = {2004}
}
@misc{Paxson1995,
author = {Paxson, Vern},
title = {{flex: The Fast Lexical Analyzer}},
url = {http://flex.sourceforge.net},
year = {1995}
}
@book{Nelsen2006,
address = {New York},
annote = {norm},
author = {Nelsen, R B},
publisher = {Springer Verlag},
title = {{An introduction to copulas}},
url = {http://books.google.com/books?hl=en\&lr=\&id=oMzi2gQ3hrsC\&oi=fnd\&pg=PR7\&dq=An+Introduction+to+Copulas\&ots=jzVqie1Ytl\&sig=AkLw3nYU\_UiQUH04a2DsQ2qcJAc\#v=onepage\&q=\&f=false},
year = {2006}
}
@book{Scott2005,
address = {Burlington, MA},
annote = {book
Xin Meng},
author = {Scott, Michael L},
edition = {2nd},
keywords = {Scott2005},
mendeley-tags = {Scott2005},
publisher = {Morgan Kaufmann},
title = {{Programming Language Pragmatics}},
year = {2005}
}
@article{Keutzer2000,
author = {Keutzer, K and Malik, S and Newton, A R and Rabaey, J M and Sangiovanni-Vincentelli, A},
file = {::},
journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
number = {12},
pages = {1523--1543},
title = {{System-level design: Orthogonalization of concerns and platform-based design}},
volume = {19},
year = {2000}
}
@misc{Sun2009,
author = {Sun},
keywords = {myodbc},
title = {{MySQL Connector/ODBC 5.1}},
url = {http://dev.mysql.com/downloads/connector/odbc/5.1.html},
year = {2009}
}
@inproceedings{Kang1998,
abstract = {The feature-oriented reuse method (FORM), extended from the feature-oriented domain analysis (FODA) method, is a systematic method that focuses on capturing commonalities and differences of applications in a domain in terms of `features' and using the analysis results develop domain architectures and components. Once a domain is described and explained in terms of common and different units of computation, they are used to construct different `feasible' configurations of reusable architectures. Features are distinctively identifiable functional abstractions that must be packaged, implemented, tested, delivered, and maintained. Therefore, they are the first class objects in the development of domain-oriented software.},
annote = {inproceedings
Software engineering
Electronics bulletin board systems (EBBS) domain;Feature oriented reuse method (FORM);Feature oriented domain analysis (FODA) method;},
author = {Kang, Kyo C},
booktitle = {International Conference on Software Reuse},
keywords = {Computational complexity,Computer architecture,Data structures,Kang1998,Object oriented programming},
mendeley-tags = {Kang1998},
pages = {354--355},
publisher = {IEEE Computer Society Press},
title = {{Feature-oriented development of applications for a domain}},
year = {1998}
}
@inproceedings{Palnitkar1994,
abstract = {In this paper we describe a novel approach to verify finite state machines. We describe the finite state machine(FSM) trace analysis tool that analyzes run time traces of finite state machines while the FSMs are being simulated and reports to the user information about state transitions and arcs traversed. During the flow, this tool creates a separate verilog monitor routine for each FSM in the design and these monitor routines print out the necessary information. Therefore, this tool is useful for all Verilog FSM designers because they do not have to include arc monitoring in their verilog code when writing the FSMs. The FSM analysis tool is integrated well into the Verilog/Synopsys design methodology.},
address = {Santa Clara, CA, USA},
annote = {Palnitkar1994-FSM analysis tool.pdf
inproceedings
Xin Meng
Finite automata
Finite state machine trace analysis program;Run time tracers;Arc monitoring;Verilog monitor routines;},
author = {Palnitkar, Samir and Saggurti, Prasad and Kuang, Ser-Hou},
booktitle = {Proceedings of the 1994 International Verilog HDL Conference},
keywords = {Computer aided analysis,Computer hardware description languages,Computer simulation,Computer software,EI,Monitoring,Palnitkar1994,Response time (computer systems),Systems analysis,User interfaces},
mendeley-tags = {Palnitkar1994},
pages = {52--57},
title = {{Finite state machine trace analysis program}},
year = {1994}
}
@inproceedings{Cvetkovic1999,
annote = {Evolutionary Computation, 1999. CEC 99. Proceedings of the 1999 Congress on},
author = {Cvetkovic, D and Parmee, I C},
booktitle = {Proceedings of the 1999 Congress on Evolutionary Computation, 1999. CEC 99. },
file = {::},
title = {{Genetic algorithm-based multi-objective optimisation and conceptualengineering design}},
volume = {1},
year = {1999}
}
@article{Coello1999,
annote = {介绍了一些用于进化算法的多目标评价方法, 找出Pareto最优前端.},
author = {Coello, C A C},
file = {::},
journal = {Knowledge and Information systems},
number = {3},
pages = {129--156},
title = {{A comprehensive survey of evolutionary-based multiobjective optimization techniques}},
volume = {1},
year = {1999}
}
@article{Xu2006,
annote = {(徐晨)
(蒋华)
(袁红林)
Xu2006.A Verilog Preprocesser for moduling enhancement.pdf
article
Xin Meng
二级},
author = {Xu, Chen and Jiang, Hua and Yuan, Honglin},
journal = {计算机工程与应用},
keywords = {Xu2006},
mendeley-tags = {Xu2006},
pages = {111--113},
title = {{A Verilog Preprocesser for moduling enhancement (一种增加Verilog建模能力的预编译处理器)}},
volume = {17},
year = {2006}
}
@article{Dubois1982a,
author = {Dubois, D and Prade, H},
journal = {International Journal of General Systems},
number = {1},
pages = {43--61},
title = {{A class of fuzzy measures based on triangular norms: A general framework for the combination fo uncertain information}},
volume = {8},
year = {1982}
}
@inproceedings{AjmoneMarsan1994,
abstract = {Performance analysis and formal correctness verification of computer communication protocols and distributed systems have traditionally been considered as two separate fields. However, their integration can be achieved by using formal description techniques as paradigms for performance modeling. The authors investigate the possibility of using LOTOS, one of the two formal specification languages that have been standardized by ISO, as the formal basis for performance modeling. A LOTOS extension which encompasses both timing and probabilistic aspects is proposed, and a general performance model derivable from extended LOTOS specification is identified. The performance model is open to different evaluation techniques. A simple example, a stop-and-wait protocol, is used to concretely demonstrate the new approach},
author = {{Ajmone Marsan}, M and Bianco, A and Ciminiera, L and Sisto, R and Valenzano, A},
booktitle = {Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, 1994., MASCOTS '94., Proceedings of the Second International Workshop on},
file = {::},
keywords = {ISO,LOTOS extension,LOTOS specification,LOTOS-based design,computer communication protocols,distributed systems,formal correctness verification,formal description techniques,formal specification,formal specification languages,formal verification,general performance model,performance analysis,performance evaluation,performance model,performance modeling,probabilistic aspects,protocols,specification languages,stop-and-wait protocol},
pages = {292--298},
title = {{Integrating performance analysis in the context of LOTOS-based design}},
year = {1994}
}
@article{Vemuri1996,
author = {Vemuri, R and Mandayam, R and Meduri, V},
file = {::},
journal = {Computer},
keywords = {PDL,Performance Description Language,abstraction levels,area,concurrent engineering,contractor accountability,cost,documentation,domain-independent performance-modeling tools,executable descriptions,functional modeling,graphs,high-level performance modeling language,longest path delay,performance evaluation,pre-implementation analysis,reliability,reusability,robust general-purpose environments,specification languages,system design methodologies,system performance evaluation,throughput rate,trade-off analysis},
pages = {44--53},
title = {{Performance modeling using PDL}},
volume = {29},
year = {1996}
}
@book{Duckett2001,
address = {Hoboken, NJ},
author = {Duckett, Jon and Ozu, Nik and Williams, Kevin and Mohr, Stephen and Cagle, Kurt and Griffin, Oliver and Norton, Francis and Stokes-Rees, Ian and Tennison, Jeni},
edition = {1st},
publisher = {Wrox},
title = {{Professional XML Schemas}},
year = {2001}
}
@book{Kay2002,
address = {Hoboken, NJ},
author = {Kay, Michael},
edition = {2nd},
publisher = {Wrox},
title = {{XSLT Programmer's Reference}},
year = {2002}
}
@book{Nguyen2006,
annote = {norm},
author = {Nguyen, H T and Walker, E},
publisher = {CRC Press},
title = {{A first course in fuzzy logic}},
url = {http://books.google.com/books?hl=en\&lr=\&id=\_IuuzgOJ0MgC\&oi=fnd\&pg=PA1\&dq=AnA+First+Course+in+Fuzzy+Logic\&ots=rsXTttkXsp\&sig=ORX6x7lS2hyzsJNamyueR9m4vdQ\#v=onepage\&q=\&f=false},
year = {2006}
}
@article{Gil2001,
annote = {JAMOOS},
author = {Gil, J Y and Tsoglin, Y},
file = {::},
journal = {Journal of Computing and Information Technology},
number = {4},
pages = {305--321},
title = {{A Domain-Specific Language for Language Processing}},
volume = {9},
year = {2001}
}
@article{Glover1990,
abstract = {This is the second half of a two part series devoted to the tabu search metastrategy for optimization problems. Part I introduced the fundamental ideas of tabu search as an approach for guiding other heuristics to overcome the limitations of local optimality, both in a deterministic and a probabilistic framework. Part I also reported successful applications from a wide range of settings, in which tabu search frequently made it possible to obtain higher quality solutions than previously obtained with competing strategies, generally with less computational effort. Part II, in this issue, examines refinements and more advanced aspects of tabu search. Following a brief review of notation, Part II introduces new dynamic strategies for managing tabu lists, allowing fuller exploitation of underlying evaluation functions. In turn, the elements of staged search and structured move sets are characterized, which bear on the issue of finiteness. Three ways of applying tabu search to the solution of integer programming problems are then described, providing connections also to certain nonlinear programming applications. Finally, the paper concludes with a brief survey of new applications of tabu search that have occurred since the developments reported in Part I. Together with additional comparisons with other methods on a wide body of problems, these include results of parallel processing implementations and the use of tabu search in settings ranging from telecommunications to neural networks.},
author = {Glover, F},
journal = {INFORMS Journal on Computing},
number = {1},
pages = {4},
title = {{Tabu search--part II}},
volume = {2},
year = {1990}
}
@article{Glover1989,
abstract = {This paper presents the fundamental principles underlying tabu search as a strategy for combinatorial optimization problems. Tabu search has achieved impressive practical successes in applications ranging from scheduling and computer channel balancing to cluster analysis and space planning, and more recently has demonstrated its value in treating classical problems such as the traveling salesman and graph coloring problems. Nevertheless, the approach is still in its infancy, and a good deal remains to be discovered about its most effective forms of implementation and about the range of problems for which it is best suited. This paper undertakes to present the major ideas and findings to date, and to indicate challenges for future research. Part I of this study indicates the basic principles, ranging from the short-term memory process at the core of the search to the intermediate and long term memory processes for intensifying and diversifying the search. Included are illustrative data structures for implementing the tabu conditions (and associated aspiration criteria) that underlie these processes. Part I concludes with a discussion of probabilistic tabu search and a summary of computational experience for a variety of applications. Part II of this study (to appear in a subsequent issue) examines more advanced considerations, applying the basic ideas to special settings and outlining a dynamic move structure to insure finiteness. Part II also describes tabu search methods for solving mixed integer programming problems and gives a brief summary of additional practical experience, including the use of tabu search to guide other types of processes, such as those of neural networks.},
author = {Glover, F},
journal = {INFORMS Journal on Computing},
number = {3},
pages = {190},
title = {{Tabu search--part I}},
volume = {1},
year = {1989}
}
@inproceedings{Bourque2006,
abstract = {A major difficulty with current organizational performance models in software engineering management is to represent many possible viewpoints quantitatively and in a consolidated manner, while at the same time keeping track of the values of the individual dimensions of performance. The models currently proposed do not meet the analytical requirements of software engineering management when various viewpoints must be taken into account concurrently. This paper presents a selection of multidimensional models of performance in software engineering and in management. It then describes the proposed concepts for a tool for multidimensional performance modeling in software engineering management. The tool would adopt an organizational framework of performance and build upon an open, generic and geometrical approach to performance modeling called QEST. It would also enable the user to select different visualization techniques to analyze data. In addition, the proposed tool would allow the user to iteratively define, collect and analyze multidimensional measures at each life cycle phase, and even enter potential results for subsequent phases. The initial test bed of the proposed tool would be the repository of project data of the International Software Benchmarking Standards Group (ISBSG)},
author = {Bourque, P and Stroian, V and Abran, A},
booktitle = {Industrial Electronics, 2006 IEEE International Symposium on},
file = {::},
keywords = {ISBSG,International Software Benchmarking Standards Grou,Multidimensional management models,Performance modeling,QEST,Visualization,geometrical approach,life cycle phase,multidimensional performance modeling,organisational aspects,organizational performance models,software engineering,software engineering management,software management,visualization techniques},
pages = {3252--3257},
title = {{Proposed Concepts for a Tool for Multidimensional Performance Modeling in Software Engineering Management}},
volume = {4},
year = {2006}
}
@misc{Graphviz2009,
author = {Graphviz},
keywords = {dot},
title = {{Graph Visualization software}},
url = {http://www.graphviz.org/},
year = {2009}
}
@book{Welch2003,
address = {New York},
author = {Welch, Brent and Jones, Ken},
edition = {4th},
publisher = {Prentice Hall, Inc.},
title = {{Practical Programming in Tcl and Tk}},
year = {2003}
}
@article{Cai2007,
abstract = {讨论程序员因为各种干扰而造成的效率下降，除了涉及一般概念上的干扰（电话、Instant Messager、行政事务、开会等），还讲到了程序语言和编程工具本身也会迫使程序员不断考虑不同层次的问题，而这些层次间的切换（Context Swicth）也是一种常常被人们忽视的干扰。},
annote = {http://www.billauer.co.il/perlilog.html
(蔡学镛)
article
Xin Meng},
author = {Cai, Xueyong},
journal = {程序员},
keywords = {Cai2007},
mendeley-tags = {Cai2007},
pages = {85},
title = {{无所不在的Context Switch}},
url = {http://www.billauer.co.il/perlilog.html},
volume = {12},
year = {2007}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@inproceedings{Risi2001,
annote = {HyCom},
author = {Risi, W and L\'{o}pez, P and Marcos, D},
booktitle = {Proceedings of the 34th Annual Hawaii International Conference on System Sciences (HICSS-34)},
publisher = {IEEE Computer Society Washington, DC, USA},
title = {{Hycom: A domain specific language for hypermedia application development}},
volume = {9},
year = {2001}
}
@book{Mason1992,
address = {Sebastopol, CA},
author = {Mason, Tony and Levine, John R and Brown, Doug},
edition = {2nd},
publisher = {O'Reilly Media},
title = {{Lex \& Yacc}},
year = {1992}
}
@book{Siek2001,
address = {Des Moines, IA},
author = {Siek, Jeremy G and Lee, Lie-Quan and Lumsdaine, Andrew},
publisher = {Addison-Wesley Professional},
title = {{The Boost Graph Library: User Guide and Reference Manual}},
year = {2001}
}
@book{Chang1999,
author = {Chang, H and Cooke, L and Hunt, M},
publisher = {Kluwer academic publishers},
title = {{Surviving the SOC revolution: a guide to platform-based design}},
year = {1999}
}
@book{Friedl2006,
address = {Sebastopol, CA},
author = {Friedl, Jeffrey},
publisher = {O'Reilly Media, Inc.},
title = {{Mastering Regular Expressions}},
year = {2006}
}
@book{Meyer2006,
address = {Sebastopol, CA},
author = {Meyer, Eric},
edition = {3rd},
publisher = {O'Reilly Media, Inc},
title = {{CSS: The Definitive Guide}},
year = {2006}
}
@inproceedings{Greaves2000,
abstract = {This paper describes a compiler which converts from Verilog to C. The output is then compiled to machine native code and tends to execute faster than native mode Verilog simulation because the compiler preserves only the synthesis semantics, not the simulation semantics, of Verilog and also performs logic minimization. Busses of up to 32 or 64 bits can be modelled as C integers whereas larger busses are automatically split. We describe the motivation, method and quality of the results.},
address = {Paris, France},
annote = {Greaves2000-verilog\_to\_c\_compiler.pdf
inproceedings
Xin Meng
Program compilers
Verilog programming language;},
author = {Greaves, D J},
booktitle = {Proceedings of the International Workshop on Rapid System Prototyping},
keywords = {C (programming language),Codes (symbols),Computational linguistics,Computer simulation,EI,Formal logic,Greaves2000},
mendeley-tags = {Greaves2000},
pages = {122--127},
title = {{Verilog to C compiler}},
year = {2000}
}
@article{Coello2001,
author = {Coello, C A C},
file = {::},
journal = {Lecture Notes in Computer Science},
pages = {21--40},
title = {{A short tutorial on evolutionary multiobjective optimization}},
year = {2001}
}
@article{Brinksma1995,
abstract = {So far, most research in the area of formal methods has been focussed on the development of theories, methods, and tools for the design and analysis of functional, or qualitative, aspects of information-processing systems. Performance analysis, on the other hand, has always been concerned with the quantitative analysis of such systems. As a result each community has been doing its research mostly independently of the other, although a number of formal models of system behaviour have made their way into the world of performance analysis. First of all, there is the now established field of stochastic Petri nets and its application to performance modelling. More recently, there is a growing interest in the application of process algebraic techniques to performance modelling, and a number of proposals for timed, probabilistic, and stochastic process algebras have been put forward. At the same time we observe that the once clear distinction between the functional and performance properties of systems is getting blurred. With the technological means and the economical drive in place to offer a host of high-performance services to end-users there is a clear need to treat the quantitative quality-of-service parameters as requirements in functional specifications. The rapidly growing importance and proliferation of such systems not only implies a conceptual merging of functionality and performance, but also calls for the integration of qualitative and quantitative aspects in their design and realization. In our presentation we analyse to what extent the use of process algebraic techniques can contribute to an increased collaboration between the performance analysis and formal methods communities. Ideally, such collaboration should not only lead to further progress in performance analysis, but also contribute to the incorporation of performance analysis in an integrated discipline of formal design. Some of the more specific topics that we address are: design by transformation; derivation of performance models; compositionality; liveness and fairness; and true concurrency},
annote = {article
xin\_meng},
author = {Brinksma, E},
file = {::},
journal = {Petri Nets and Performance Models, 1995., Proceedings of the Sixth International Workshop on},
keywords = {524322,Petri nets, formal logic, parallel processing, pro},
mendeley-tags = {524322},
pages = {124--125},
title = {{Performance and formal design: a process algebraic perspective}},
year = {1995}
}
@article{Grabisch1996,
author = {Grabisch, M},
file = {::},
journal = {European Journal of Operational Research},
number = {3},
pages = {445--456},
title = {{The application of fuzzy integrals in multicriteria decision making}},
volume = {89},
year = {1996}
}
@article{Klarlund1999,
annote = {FIDO},
author = {Klarlund, N and Schwartzbach, M I},
file = {::},
journal = {IEEE Transactions On Software Engineering},
number = {3},
pages = {378--386},
title = {{A domain-specific language for regular sets of strings and trees}},
volume = {25},
year = {1999}
}
@article{Knowles2000,
author = {Knowles, J D and Corne, D W},
file = {::},
journal = {Evolutionary computation},
number = {2},
pages = {149--172},
title = {{Approximating the nondominated front using the pareto archived evolution strategy}},
volume = {8},
year = {2000}
}
@book{Elliott1999,
author = {Elliott, J P},
publisher = {Kluwer Academic Publishers},
title = {{Understanding behavioral synthesis: a practical guide to high-level design}},
url = {http://www.google.com/books?id=u\_PfoOeJls4C\&printsec=frontcover\&hl=zh-CN},
year = {1999}
}
@article{Lin1997,
abstract = {There has been rapid growth in the demand for mobile communications that has led to intensive research and development of complex PCS (personal communication services) networks. Capacity planning and performance modeling are necessary to maintain a high quality of service to the PCS subscriber while minimizing costs. Effective and practical performance models for large-scale PCS networks are available. Two new performance models are presented in this article which can be solved using analytical techniques. The first is the so-called portable population model, based on the flow equivalent assumption (the rate of portables into a cell equals the rate of portables out of the cell). The model provides the steady-state portable population distribution in a cell that is independent of the portable residual time distribution, which can be used by simulations to reduce the necessary execution time by reaching the steady state more rapidly. Additionally, this model can be used to study the blocking probability of a low (portable) mobility PCS network and the performance of portable deregistration strategies. The second model is the so-called portable movement model which can be used to study location tracking and handoff algorithms. The model assumes that the arriving calls to a portable form a Poisson process, and portable residual times have a general distribution. This model can be used to study location-tracking algorithms and handoff algorithms. It is shown that under some assumptions, the analytic techniques are consistent with the simulation model},
author = {Lin, Yi-Bing},
isbn = {0163-6804},
journal = {Communications Magazine, IEEE},
keywords = {blocking probability,capacity planning,cellular radio,execution time,flow equivalent assumption,handoff algorithms,large-scale PCS networks,location-tracking algorithms,mobile communications,mobile radio,performance modeling,performance models,personal communication networks,personal communication services,portable deregistration strategies,portable movement model,portable population model,portable residual time distribution,quality of service,steady-state portable population distribution,tracking},
number = {2},
pages = {102--107},
title = {{Modeling techniques for large-scale PCS networks}},
volume = {35},
year = {1997}
}
@misc{OSCI2009a,
author = {OSCI},
title = {{Open SystemC Initiative}},
url = {http://www.systemc.org},
year = {2009}
}
@book{Miles2006,
address = {Sebastopol, CA},
author = {Miles, Russ},
publisher = {O'Reilly Media, Inc.},
title = {{Learning UML 2.0}},
year = {2006}
}
@book{Hunter2007,
address = {Hoboken, NJ},
author = {Hunter, David and Rafter, Jeff and Fawcett, Joe and van der Vlist, Eric and Ayers, Danny and Duckett, Jon and Watt, Andrew and McKinnon, Linda},
edition = {4th},
publisher = {Wrox},
title = {{Beginning XML}},
year = {2007}
}
@inproceedings{Wang1998,
abstract = {The ability to analyze a finite state machine (fsm) has always been desired by hardware designers, since an un-analyzed fsm is clearly prone to design bugs. Unfortunately, there are too many ways to represent (code) an fsm. It is almost impossible for a tool to identify all possible fsm coding styles. In our department, at Cisco, we have a standardized fsm coding style. The standard fsm coding style allows us to easily extract an fsm. The extracted fsm is then fed to various tools for analysis: fsm reachability property, fsm coverage, and automatic fsm bubble diagram drawing. This paper will show our standard fsm coding style, how fsm are extracted, and a well known algorithm that is used to study the reachability property. Then we will show how to monitor the fsm transition coverage and also introduce a tool to automatically draw an fsm bubble diagram from the extracted fsm.},
address = {Santa Clara, CA, USA},
annote = {Wang1998-Practical FSM analysis for Verilog.pdf
inproceedings
Xin Meng
Computer hardware description languages
Software Package Verilog;Finite state machine;Hardware design;},
author = {Wang, Tsu-Hua},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Algorithms,Computer aided software engineering,Computer simulation,EI,Finite automata,Program debugging,Standards,Wang1998},
mendeley-tags = {Wang1998},
pages = {52--58},
title = {{Practical FSM analysis for Verilog}},
year = {1998}
}
@book{DeMarco1999,
abstract = {Demarco and Lister demonstrate that the major issues of software development are human, not technical. Their answers aren't easy--just incredibly successful. New second edition features eight all-new chapters},
address = {New York},
annote = {Feb
Amazon rating 5 stars
book
Xin Meng
ISBN-10: 0932633439 ISBN-13: 978-0932633439},
author = {DeMarco, Tom and Lister, Timothy},
edition = {2nd},
keywords = {Tom1999},
mendeley-tags = {Tom1999},
publisher = {Dorset House Publishing Company, Incorporated},
title = {{Peopleware: Productive Projects and Teams}},
url = {http://www.amazon.com/Peopleware-Productive-Projects-Tom-DeMarco/dp/0932633439/ref=pd\_bbs\_sr\_1?ie=UTF8\&s=books\&qid=1196599090\&sr=8-1},
year = {1999}
}
@book{Bhasker2004,
address = {Allentown, PA},
author = {Bhasker, J},
edition = {2nd},
publisher = {Star Galaxy Publishing},
title = {{A SystemC Primer}},
year = {2004}
}
@article{Ehrgott2000,
author = {Ehrgott, M and Gandibleux, X},
file = {::},
journal = {OR Spectrum},
number = {4},
pages = {425--460},
title = {{A survey and annotated bibliography of multiobjective combinatorial optimization}},
volume = {22},
year = {2000}
}
@inproceedings{Spivey1998,
abstract = {This paper presents EP3, an extensible preprocessor written in Perl. Included are directives that extend the power of Perl to the language being processed. This paper focuses on the Verilog Hardware Description language and provides a set of extended directives for Verilog in addition to the Standard EP3 directives. The EP3 engine is explained and example Verilog code is presented in both its pre and postprocessed forms.},
address = {Santa Clara, CA, USA},
annote = {Spivey1998.EP3 An extensible Perl preprocessor.pdf
inproceedings
xin\_meng
Program processors
Software Package Perl;Verilog hardware description language;},
author = {Spivey, Gary},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Codes (symbols),Computer hardware description languages,Spivey1998,Standards,Subroutines},
mendeley-tags = {Spivey1998},
pages = {106--113},
publisher = {IEEE},
title = {{EP3: an extensible Perl preprocessor}},
year = {1998}
}
@article{Pllana2008a,
abstract = {We address the issue of the development of performance models for programs that may be executed on large-scale computing systems. The commonly used approaches apply non-standard notations for model specification and often require that the software engineer has a thorough understanding of the underlying performance modeling technique. We propose to bridge the gap between the performance modeling and software engineering by incorporating UML. In our approach we aim to permit the graphical specification of performance model in a human-intuitive fashion on one hand, but on the other hand we aim for a machine-efficient model evaluation. The user specifies graphically the performance model using UML. Thereafter, the transformation of the performance model from the human-usable UML representation to the machine-efficient C++ representation is done automatically. We describe our methodology and illustrate it with the automatic transformation of a sample performance model.},
annote = {article
xin\_meng},
author = {Pllana, S and Benkner, S and Xhafa, F and Barolli, L},
file = {::;::},
isbn = {1530-2016},
journal = {Parallel Processing - Workshops, 2008. ICPP-W '08. International Conference on},
keywords = {4626805,C++ language, Unified Modeling Language, formal sp},
mendeley-tags = {4626805},
pages = {228--235},
title = {{Automatic Performance Model Transformation from UML to C++}},
year = {2008}
}
@book{Austern1999,
address = {Des Moines, IA},
author = {Austern, Matthew H},
publisher = {Addison-Wesley Professional},
title = {{Generic Programming and the STL: Using and Extending the C++ Standard Template Library}},
year = {1999}
}
@inproceedings{Min2008,
abstract = {In this paper we propose a component-based analytical performance model for IP-SAN. We model four key components within IP-SAN individually and they are IP network, cache, RAID and disks. We validate these component models and compose them to give an entire IP-SAN performance model. The entire IP-SAN model analyzes the performance of an IP-SAN configuration under multiple synchronous workloads by using closed queueing network model and under asynchronous workload by using open queueing network model. We also validate the entire IP-SAN performance model against a real IP-SAN system. The theoretical results are compared with the results from a real IP-SAN using a variety of synthetic workloads. These experiments prove that the component-based method is an appropriate way to build performance model for a complex storage system. To our knowledge, this is the first exploration into building analytical performance model for entire IP-SAN system and validating against a real system. We also identify areas for future research in the performance analysis of real IP-SAN.},
address = {Chongqing },
author = {Min, Wang and Liu, Liu and Wei, Xu and Lu, Xu},
booktitle = {International Conference on Networking, Architecture, and Storage, 2008. NAS '08. },
file = {::},
keywords = {IP network,IP networks,IP-SAN,IP-SAN system,RAID,asynchronous workload,cache storage,closed queueing network model,component-based analytical performance model,disk storage,multiple synchronous workloads,open queueing network model,performance model,queueing theory,storage area networks},
pages = {255--262},
title = {{An Analytical Performance Model of IP-SAN}},
year = {2008}
}
@article{Yager1988a,
annote = {定义了OWA算子和一般化的orand算子, 其归一化后的值介于AND和OR之间. 详见笔记. },
author = {Yager, R R},
file = {::;::},
journal = {IEEE transactions on Systems, Man and Cybernetics},
number = {1},
pages = {183--190},
title = {{On ordered weighted averaging aggregation operators inmulticriteria decisionmaking}},
volume = {18},
year = {1988}
}
@article{2004a,
author = {彭宇 and 彭喜元 and 刘兆庆},
file = {::},
journal = {电子学报},
number = {002},
pages = {209--213},
title = {微粒群算法参数效能的统计分析},
volume = {32},
year = {2004}
}
@article{Rinker2001,
abstract = {We describe a system, developed as part of the Cameron project, which compiles programs written in a single-assignment subset of C called SA-C into dataflow graphs and then into VHDL. The primary application domain is image processing. The system consists of an optimizing compiler which produces dataflow graph to VHDL translator. The method used for the translation is described here, along with some results on an application. The objective is not to produce yet another design entry tool, but rather to shift the programming paradigm from HDLs to an algorithmic level, thereby extending the realm of hardware design to the application programmer.},
annote = {Rinker2001.An automated process for compiling dataflow graphs into reconfigurable hardware.pdf
article
Xin Meng
Data flow analysis
Dataflow graphs;Reconfigurable hardware;Single Assignment C;Very high description languages;},
author = {Rinker, R and Carter, M and Patel, A and Chawathe, M and Ross, C and Hammes, J and Najjar, W A and Bohm, W},
isbn = {1063-8210},
journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
keywords = {Algorithms,Computer hardware,Computer hardware description languages,Image processing,Program compilers,Rinker2001},
mendeley-tags = {Rinker2001},
number = {1},
pages = {130--139},
title = {{An automated process for compiling dataflow graphics into reconfigurable hardware}},
volume = {9},
year = {2001}
}
@article{VanGemund2003,
abstract = {Performance prediction is an important engineering tool that provides valuable feedback on design choices in program synthesis and machine architecture development. We present an analytic performance modeling approach aimed to minimize prediction cost, while providing a prediction accuracy that is sufficient to enable major code and data mapping decisions. Our approach is based on a performance simulation language called PAMELA. Apart from simulation, PAMELA features a symbolic analysis technique that enables PAMELA models to be compiled into symbolic performance models that trade prediction accuracy for the lowest possible solution cost. We demonstrate our approach through a large number of theoretical and practical modeling case studies, including six parallel programs and two distributed-memory machines. The average prediction error of our approach is less than 10 percent, while the average worst-case error is limited to 50 percent. It is shown that this accuracy is sufficient to correctly select the best coding or partitioning strategy. For programs expressed in a high-level, structured programming model, such as data-parallel programs, symbolic performance modeling can be entirely automated. We report on experiments with a PAMELA model generator built within a dataparallel compiler for distributed-memory machines. Our results show that with negligible program annotation, symbolic performance models are automatically compiled in seconds, while their solution cost is in the order of milliseconds.},
author = {van Gemund, A J C},
file = {::},
isbn = {1045-9219},
journal = {Parallel and Distributed Systems, IEEE Transactions on},
keywords = {PAMELA simulation language,analytic performance modeling,average worst-case error,data mapping decisions,distributed memory systems,distributed-memory machines,machine architecture development,parallel compiler,parallel processing,parallel programming,parallel programs,parallel systems,parallelising compilers,partitioning strategy,performance evaluation,performance prediction,program synthesis,symbolic performance modeling},
number = {2},
pages = {154--165},
title = {{Symbolic performance modeling of parallel systems}},
volume = {14},
year = {2003}
}
@article{Bentley1986,
annote = {CHEM},
author = {Bentley, Jon},
file = {::},
journal = {Commun ACM},
number = {8},
pages = {711--721},
title = {{Programming pearls: little languages}},
volume = {29},
year = {1986}
}
@book{Greenlaw2006,
address = {New York},
author = {Greenlaw, Raymond},
publisher = {Prentice Hall, Inc.},
title = {{Graph Theory: Modeling, Applications, and Algorithms}},
year = {2006}
}
@inproceedings{BellJr.2006,
abstract = {The latest high-performance IBM PowerPC microprocessor, the POWERS chip, poses challenges for performance model validation. The current state-of-the-art is to use simple hand-coded bandwidth and latency testcases, but these are not comprehensive for processors as complex as the POWER5 chip. Applications and benchmark suites such as SPEC CPU are difficult to set up or take too long to execute on functional models or even on detailed performance models. We present an automatic testcase synthesis methodology to address these concerns. By basing testcase synthesis on the workload characteristics of an application, source code is created that largely represents the performance of the application, but which executes in a fraction of the runtime. We synthesize representative PowerPC versions of the SPEC2000, STREAM, TPC-C and Java benchmarks, compile and execute them, and obtain an average IPC within 2.4\% of the average IPC of the original benchmarks and with many similar average workload characteristics. The synthetic testcases often execute two orders of magnitude faster than the original applications, typically in less than 300K instructions, making performance model validation for today's complex processors feasible.},
author = {{Bell  Jr.}, R H and Bhatia, R R and John, L K and Stuecheli, J and Griswell, J and Tu, P and Capps, L and Blanchard, A and Thai, R},
booktitle = {Performance Analysis of Systems and Software, 2006 IEEE International Symposium on},
file = {::},
keywords = {IBM PowerPC microprocessor,POWERS chip,automatic testcase synthesis,automatic testing,high performance PowerPC processors,microcomputers,microprocessor chips,performance evaluation,performance model validation},
pages = {154--165},
title = {{Automatic testcase synthesis and performance model validation for high performance PowerPC processors}},
year = {2006}
}
@article{Maliniak2003,
abstract = {An overview of the support for assertion-driven debugging added to Novas' debug system was presented. Users can read in results generated by SystemVerilog-based simulators and use the debuggers to quickly hunt down bugs and map them to the SystemVerilog source code. A latest clock-tree debug and analysis capability enables users to easily detect and check clock-domain crossings.},
annote = {article
Xin Meng
Program debugging
Source codes;},
author = {Maliniak, David},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Codes (symbols),Computer software,Maliniak2003,Simulators,Standards},
mendeley-tags = {Maliniak2003},
number = {16},
pages = {36 --},
title = {{SystemVerilog support leads debuggers' upgrades}},
volume = {51},
year = {2003}
}
@misc{IEEE1988,
author = {IEEE},
booktitle = {IEEE std 1076-1987},
keywords = {IEEE1988},
mendeley-tags = {IEEE1988},
publisher = {IEEE Computer Society/Design Automation },
title = {{IEEE Standard VHDL Language Reference Manual}},
year = {1988}
}
@book{Tanaka1996,
address = {New York},
author = {Tanaka, Kazuo and Niimura, T},
isbn = {0387948074},
publisher = {Springer},
title = {{An Introduction to Fuzzy Logic for Practical Applications}},
year = {1996}
}
@article{2005c,
annote = {platform-based},
author = {熊志辉 and 李思昆 and 陈吉华 and 张鲁峰},
file = {::},
journal = {计算机工程与科学},
number = {008},
pages = {56--59},
title = {{基于平台的 SoC 系统建模方法研究}},
volume = {27},
year = {2005}
}
@book{Maclennan1990,
address = {Des Moines, IA},
author = {Maclennan, Bruce J},
publisher = {Addison Wesley},
title = {{Functional Programming: Practice and Theory}},
year = {1990}
}
@article{Mernik2005,
abstract = {Domain-specific languages (DSLs) are languages tailored to a specific application domain. They offer substantial gains in expressiveness and ease of use compared with general-purpose programming languages in their domain of application. DSL development is hard, requiring both domain knowledge and language development expertise. Few people have both. Not surprisingly, the decision to develop a DSL is often postponed indefinitely, if considered at all, and most DSLs never get beyond the application library stage. Although many articles have been written on the development of particular DSLs, there is very limited literature on DSL development methodologies and many questions remain regarding when and how to develop a DSL. To aid the DSL developer, we identify patterns in the decision, analysis, design, and implementation phases of DSL development. Our patterns improve and extend earlier work on DSL design patterns. We also discuss domain analysis tools and language development systems that may help to speed up DSL development. Finally, we present a number of open problems. \&copy; 2005 ACM.},
annote = {article
Computer programming languages
Domain-specific language (DSL);Application language;Domain analysis;Language development system;},
author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony M},
file = {::},
isbn = {0360-0300},
journal = {ACM Computing Surveys},
keywords = {Decision theory,Knowledge acquisition,Logic design,Mernik2005,Pattern recognition},
mendeley-tags = {Mernik2005},
number = {4},
pages = {316--344},
title = {{When and how to develop domain-specific languages}},
volume = {37},
year = {2005}
}
@inproceedings{Sauper,
author = {Sauper, C and Barzilay, R},
booktitle = {Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP},
file = {::},
pages = {208--216},
publisher = {{Association for Computational Linguistics\}},
title = {{Automatically Generating Wikipedia Articles: A Structure-Aware Approach}}
}
@article{Nicola2000,
abstract = {The paper surveys performance models for distributed and replicated database systems. Over the last 20 years (1980-2000), a variety of such performance models have been developed and they differ in: (1) which aspects of a real system are or are not captured in the model (e.g., replication, communication, nonuniform data access, etc.); and (2) how these aspects are modeled. We classify the different alternatives and modeling assumptions and discuss their interdependencies and expressiveness for the representation of distributed databases. This leads to a set of building blocks for analytical performance models. To illustrate the work that is surveyed, we select a combination of these proven modeling concepts and give an example of how to compose a balanced analytical model of a replicated database. We use this example to show how to derive meaningful performance values and to discuss the applicability and expressiveness of performance models for distributed and replicated databases. Finally, we compare the analytical results to measurements in a distributed database system},
author = {Nicola, M and Jarke, M},
file = {::},
isbn = {1041-4347},
journal = {IEEE Transactions on Knowledge and Data Engineering},
keywords = {analytical performance models,balanced analytical model,bibliographies,building blocks,distributed databases,meaningful performance values,modeling assumptions,nonuniform data access,performance modeling,performance models,proven modeling concepts,queueing theory,real system,replicated databases,software performance evaluation,transaction processing},
number = {4},
pages = {645--672},
title = {{Performance modeling of distributed and replicated databases}},
volume = {12},
year = {2000}
}
@misc{Eclipse2008,
author = {Eclipse},
title = {{Eclipse - an open development platform}},
url = {http://www.eclipse.org},
year = {2008}
}
@inproceedings{Pauer1997,
abstract = {The purpose and goals of performance modeling for multiprocessor systems using a token-based methodology in VHDL are discussed. Following this motivation, a framework for performance modeling is described, which involves modeling hardware and software at different levels of abstraction; the scope of the paper primarily addresses the high profile performance model. A commercial tool supporting this modeling framework is then introduced. The discussion continues with an overview of the real time infrared search and track algorithm, and the system design problem. Preliminary results of the performance modeling efforts and validation via code profiling is summarized, and future plans are described},
author = {Pauer, E K and Pettigrew, M N and Myers, C S and Madisetti, V K},
booktitle = {VHDL International Users' Forum, 1997. Proceedings},
file = {::},
keywords = {VHDL,abstraction,code profiling,hardware description languages,hardware modelling,infrared imaging,military computing,military systems,multiprocessing systems,multiprocessor systems,performance evaluation,performance modeling framework,real time infrared search processing,real time infrared track processing,real-time systems,software modelling,surveillance,system design problem,token-based methodology,tracking,validation},
pages = {33--42},
title = {{A performance modeling framework applied to real time infrared search and track processing}},
year = {1997}
}
@inproceedings{Kreku2008,
abstract = {Increasing number of concurrent applications in future mobile devices will be based on parallel heterogeneous multiprocessor system-on-chip platforms using network-on-chip communication to achieve scalability. In this paper we describe a performance modeling and simulation approach to explore efficiently the application-platform solution/design space at system-level. The application behavior is abstracted to workload models that are mapped onto performance models of the execution platform for transaction level simulation. The approach provides separation of application and platform through service-oriented modeling. The experimentation of the approach in virtual network computing and mobile video player case studies is presented.},
author = {Kreku, J and Hoppari, M and Kestila, T and Yang, Qu and Soininen, J P and Tiensyrja, K},
booktitle = {Specification, Verification and Design Languages, 2008. FDL 2008. Forum on},
file = {::},
keywords = {mobile devices,mobile video player,network-on-chip,network-on-chip communication,parallel heterogeneous multiprocessor system-on-ch,performance evaluation,platform performance evaluation,platform performance modeling,service-oriented modeling,transaction level simulation,virtual network computing},
pages = {43--48},
title = {{Application - platform performance modeling and evaluation}},
year = {2008}
}
@article{Thibault1999,
annote = {GAL},
author = {Thibault, S A and Marlet, R and Consel, C},
journal = {IEEE Transactions On Software Engineering},
number = {3},
pages = {363--377},
title = {{Domain-specific languages: from design to implementation - application to video device drivers generation}},
volume = {25},
year = {1999}
}
@article{Deursen2000,
author = {van Deursen, Arie and Klint, Paul and Visser, Joost},
file = {::},
journal = {ACM SIGPLAN Notices},
number = {6},
pages = {26--36},
title = {{Domain-specific languages: an annotated bibliography}},
volume = {35},
year = {2000}
}
@misc{SyncRO2008,
author = {SyncRO},
title = {{oXygen XML Editor and XSLT debugger}},
url = {http://www.oxygenxml.com},
year = {2008}
}
@article{Liu2007,
author = {Liu, D and Tan, K C and Goh, C K and Ho, W K},
file = {::},
journal = {IEEE Transactions on Systems, Man, and Cybernetics, Part B},
number = {1},
pages = {42--50},
title = {{A multiobjective memetic algorithm based on particle swarm optimization}},
volume = {37},
year = {2007}
}
@inproceedings{Visser2004a,
address = {NY, USA},
annote = {SWUL},
author = {Visser, Eelco},
booktitle = {Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
file = {::},
pages = {365--383},
publisher = {ACM New York, },
title = {{Concrete syntax for objects: domain-specific language embedding and assimilation without restrictions}},
year = {2004}
}
@misc{SUN-Microsystems2009,
author = {SUN-Microsystems},
title = {{SUN Grid Engine 6.2}},
url = {http://www.sun.com/software/sge/},
year = {2009}
}
@book{Dougherty1997,
address = {Sebastopol, CA},
author = {Dougherty, Dale and Robbins, Arnold},
edition = {2nd},
publisher = {O'Reilly Media},
title = {sed \& awk},
year = {1997}
}
@article{Zadeh1983,
author = {Zadeh, L A},
journal = {International series in modern applied mathematics and computer science},
pages = {149--184},
title = {{A computational approach to fuzzy quantifiers in natural languages}},
volume = {5},
year = {1983}
}
@article{Canevet2003,
abstract = {A software toolset which allows Unified Modelling Language (UML) modellers to annotate models with performance information is described. An equivalent performance model is extracted from the UML, solved, and the results reflected back to the UML level. Used in this way, the toolset gives a high-level approach to software performance modelling where the benefits of the performance modelling process are achieved without significant additional notational burden.},
author = {Canevet, C and Gilmore, S and Hillston, J and Prowse, M and Stevens, P},
file = {::},
isbn = {1350-2387},
journal = {Computers and Digital Techniques, IEE Proceedings -},
keywords = {Java package,Markov processes,PEPA,UML,Unified Modelling Language,formal specification,high-level approach,object oriented programming,object-oriented programming,process algebra,software architecture,software performance evaluation,software performance modelling,software tools,software toolset,specification languages,stochastic process algebras},
number = {2},
pages = {107--120},
title = {{Performance modelling with the Unified Modelling Language and stochastic process algebras}},
volume = {150},
year = {2003}
}
@inproceedings{Kennedy1995,
author = {Kennedy, J and Eberhart, R},
booktitle = {IEEE International Conference on Neural Networks, 1995. Proceedings.},
file = {::},
title = {{Particle swarm optimization}},
volume = {4},
year = {1995}
}
@article{Jones2002,
author = {Jones, D F and Mirrazavi, S K and Tamiz, M},
file = {::},
journal = {European Journal of Operational Research},
number = {1},
pages = {1--9},
title = {{Multi-objective meta-heuristics: An overview of the current state-of-the-art}},
volume = {137},
year = {2002}
}
@misc{Jones1996,
annote = {language level},
author = {Jones, Cpaers},
file = {::},
publisher = {Software Productivity Research, Inc.},
title = {{Programming Languages Table}},
url = {http://www.spr.com/programming-languages-table.html},
volume = {2009},
year = {1996}
}
@book{Kay2008,
address = {Hoboken, NJ},
author = {Kay, Michael},
edition = {4th},
publisher = {Wrox},
title = {{XSLT 2.0 and XPath 2.0 Programmer's Reference}},
year = {2008}
}
@article{Xiong2001,
author = {Xiong, J and Johnson, J and Johnson, R and Padua, D},
file = {::},
journal = {ACM SIGPLAN Notices},
number = {5},
pages = {298--308},
title = {{SPL: A language and compiler for DSP algorithms}},
volume = {36},
year = {2001}
}
@article{2006b,
abstract = {设计Pareto档案多目标粒子群优化（PAMOPSO）．该算法利用改进的强度Pareto进化算法2（SPEA2）对外部档案进行维护．并在维护过程中，为每个粒子从档案中选取合适的全局最好位置，将档案维护和全局最好位置选取结合在一起．将该算法应用于5个测试实例并与3种多目标优化算法比较，计算结果表明该算法性能良好},
author = {雷德明 and 吴智铭},
journal = {模式识别与人工智能},
number = {004},
pages = {475--480},
title = {{Pareto 档案多目标粒子群优化}},
volume = {19},
year = {2006}
}
@book{Aarts2003,
author = {Aarts, E and Lenstra, J K},
publisher = {Princeton Univ Pr},
title = {{Local search in combinatorial optimization}},
url = {http://www.google.com/books?hl=zh-CN\&lr=\&id=NWghN9G7q9MC\&oi=fnd\&pg=PR7\&dq=local+search+in+combinatorial+optimization\&ots=XpRqtDDyNm\&sig=Zw4Y7X-aUMgDrpUutbyydwDtxVw},
year = {2003}
}
@inproceedings{Walrath1996,
abstract = {Tradeoff analysis is a central aspect of any design process. Languages and tools to support performance modeling and tradeoff analysis are necessary to facilitate rapid prototyping of designs. An effective modeling and evaluation environment reduces the overall design time of both the prototype and the final product by helping designers in determining which parameters of a design are critical for meeting a set of desired performance goals. This paper describes a case study in performance modeling using a language called PDL (Performance Modeling Language). The PDL system supports tradeoff analysis and performance visualization. This paper also addresses some of the key issues for successful tradeoff analysis during rapid prototyping and explains how many features of PDL make it a suitable choice for this purpose},
address = {Chicago, IL},
author = {Walrath, J and Chatha, S and Vemuri, R and Narasimhan, N and Srinivasan, V},
booktitle = {Proceedings of International Conference on Application Specific Systems, Architectures and Processors, 1996. ASAP 96. },
file = {::},
keywords = {PDL,Performance Modeling Language,performance modeling,performance visualization,rapid prototyping,software performance evaluation,software prototyping,tradeoff analysis},
pages = {313--322},
title = {{Performance modeling and tradeoff analysis during rapid prototyping}},
year = {1996}
}
@misc{Stallman2008,
author = {Stallman, Richard},
title = {{GNU Emacs}},
url = {http://www.gnu.org/software/emacs},
year = {2008}
}
@inproceedings{Sirer1999,
annote = {lava},
author = {Sirer, E G and Bershad, B N},
booktitle = {Proceedings of the 2nd conference on Domain-specific languages},
file = {::},
pages = {1--13},
publisher = {ACM New York, NY, USA},
title = {{Using production grammars in software testing}},
year = {1999}
}
@article{Rich2003,
abstract = {The SystemVerilog hardware description language (HDL) is a recent standardization effort by Accellera to ensure that Verilog HDL keeps up with the increases in complexity of today's design and verification challenges. A key element of Accellera's strategy is to use proven technologies that have already been implemented as a basis for standardization.},
annote = {Rich2003.The evolution of systemverilog.pdf
article
Xin Meng
Software engineering
SystemVerilog;Verilog hardware description language;Lanaguage reference manual;},
author = {Rich, David I},
isbn = {0740-7475},
journal = {IEEE Design and Test of Computers},
keywords = {C (programming language),Computational complexity,Computer hardware description languages,Formal languages,Program compilers,Rich2003,Semantics,Standardization},
mendeley-tags = {Rich2003},
number = {4},
pages = {82--84},
title = {{The evolution of SystemVerilog}},
volume = {20},
year = {2003}
}
@inproceedings{Vuppala1997,
abstract = {Hardware description languages (HDLs) are frequently used to construct performance models to represent systems early in the design process. The HDLs are commonly known to be time-consuming and labor-intensive tools. For example, VHDL uses a large number of possible modeling approaches that can lead to designs which are unstructured and difficult to understand. This paper discusses a methodology to construct VHDL performance models which will help to significantly reduce the time from an initial conception to a working design. To further reduce development time, reuse of existing structural primitives is emphasized. Typical models of multi-processor architectures are very large and complex. Validation of theses models is difficult and time consuming. This paper also develops a methodology for model validation. A seventeen processor raceway architecture that was developed as a part of the ongoing RASSP (Rapid Prototyping of Application Specific Signal Processors) project, is used as a template to illustrate the new methodologies of performance model construction and model validation. The design consists of seventeen processors interconnected by multiple crossbar switches. Two software algorithms were mapped onto the architecture: a Synthetic Aperture Radar (SAR) Range Processing Algorithm and a SAR Multiswath Processing Algorithm. The methodologies developed in this thesis will considerably reduce the amount of time needed to construct and validate performance models of complex multiprocessor architectures},
author = {Vuppala, S and Gray, F G and Armstrong, J R},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
keywords = {VHDL performance,VHDL performance models,hardware description languages,model construction,multi-processor architectures,multiple crossbar switches,multiprocessing systems,multiprocessor architectures,parallel architectures,performance evaluation,validation},
pages = {29--35},
title = {{Methodology for VHDL performance model construction and validation}},
year = {1997}
}
@misc{IEEE2005,
address = {New York},
annote = {Sep
manual
Xin Meng},
author = {IEEE},
booktitle = {IEEE std 1364-2005},
file = {::},
keywords = {Verilog2001},
mendeley-tags = {Verilog2001},
publisher = {IEEE Computer Society/Design Automation },
title = {{IEEE Standard for Verilog Hardware Description Language }},
year = {2005}
}
@inproceedings{Chamberlain1998,
abstract = {ZPL is a parallel array language designed for high performance scientific and engineering computations. Unlike other parallel languages, ZPL is founded on a machine model (the CTA) that accurately abstracts contemporary MIMD parallel computers. This makes it possible to correlate ZPL programs with machine behavior. As a result, programmers can reason about how code will perform on a typical parallel machine and thereby make informed decisions between alternative programming solutions. The paper describes ZPL's performance model and its syntactic cues for conveying operation cost. The what you see is what you get (WYSIWYG) nature of ZPL operations is demonstrated on the IBM SP-2, Intel Paragon, SGI Power Challenge, and Cray T3E. Additionally, the model is used to evaluate two algorithms for matrix multiplication. Experiments show that the performance model correctly predicts the faster solution on all four platforms for a range of problem sizes},
author = {Chamberlain, B L and Lin, C and Choi, SungEun and Snyder, L and Lewis, E C and Weathersby, W D},
booktitle = {High-Level Parallel Programming Models and Supportive Environments, 1998. Proceedings. Third International Workshop on},
file = {::},
keywords = {CTA,Cray T3E,IBM SP-2,Intel Paragon,SGI Power Challenge,WYSIWYG,WYSIWYG performance model,ZPL operations,ZPL parallel array language,ZPL programs,contemporary MIMD parallel computers,machine behavior,machine model,mathematics computing,matrix multiplication,operation cost,parallel architectures,parallel languages,parallel machine,parallel programming,performance model,programming solutions,syntactic cues},
pages = {50--61},
title = {{ZPL's WYSIWYG performance model}},
year = {1998}
}
@book{Bergeron2005,
address = {New York},
author = {Bergeron, Janick and Cerny, Eduard and Hunter, Alan and Nightingale, Andy},
publisher = {Sprigner},
title = {{Verification Methodology Manual for SystemVerilog}},
year = {2005}
}
@inproceedings{Smith2007,
abstract = {XML-based interchange formats for performance models provide a mechanism whereby performance model information may be transferred among modeling tools. For example, the PMIF allows diverse tools to exchange queueing network model information. Formats have also been defined for the interchange of LQN, UML, Petri Nets, and others. These formats specify the model and a set of parameters for one run. For model studies, however, it is useful to be able to specify multiple runs, or experiments, for the model. This paper presents an XML interchange schema extension for defining a set of model runs and the output desired from them. It has the expressive power to specify iterations, alternations, assignments of values, actions based on model results and more. Examples illustrate how the experiment interchange extension can be used with a wide variety of performance modeling paradigms. A prototype proves the concept.},
author = {Smith, C U and Llado, C M and Puigjaner, R and Williams, L G},
booktitle = {Quantitative Evaluation of Systems, 2007. QEST 2007. Fourth International Conference on the},
file = {::},
keywords = {XML,XML interchange schema extension,XML-based interchange format,eXtensible Markup Language,electronic data interchange,performance model information,performance modeling paradigm,queueing network model information,queueing theory},
pages = {91--100},
title = {{Interchange Formats for Performance Models: Experimentation and Ouput}},
year = {2007}
}
@article{2007,
author = {刘淳安 and 王宇平},
file = {::},
journal = {电子学报},
number = {006},
pages = {1118--1121},
title = {动态多目标优化的进化算法及其收敛性分析},
volume = {35},
year = {2007}
}
@book{Glover1997,
address = {New York},
author = {Glover, F and Laguna, M},
file = {::;::},
publisher = {Springer},
title = {{Tabu search}},
year = {1997}
}
@article{Cho1995,
author = {Cho, S B},
file = {::},
journal = {International journal of approximate reasoning},
number = {4},
pages = {359--375},
title = {{Fuzzy aggregation of modular neural networks with ordered weighted averaging operators}},
volume = {13},
year = {1995}
}
@article{Talbi2002,
author = {Talbi, E G},
file = {::},
journal = {Journal of heuristics},
number = {5},
pages = {541--564},
title = {{A taxonomy of hybrid metaheuristics}},
volume = {8},
year = {2002}
}
@misc{Donnelly2006,
author = {Donnelly, Charles and Stallman, Richard},
title = {{Bison - GNU parser generator}},
url = {http://www.gnu.org/software/bison},
year = {2006}
}
@book{Hopcroft2006,
address = {Des Moines, IA},
author = {Hopcroft, John E and Motwani, Rajeev and Ullman, Jeffrey D},
edition = {3rd},
publisher = {Addison Wesley},
title = {{Introduction to Automata Theory, Languages, and Computation}},
year = {2006}
}
@book{Hansen1999,
address = {Des Moines, IA},
author = {Hansen, Michael and Rischel, Hans},
edition = {1st},
publisher = {Addison Wesley},
title = {{Introduction to Programming using SML}},
year = {1999}
}
@book{Rixner2002,
annote = {513009},
author = {Rixner, Scott},
isbn = {0-7923-7545-9},
pages = {136},
publisher = {Kluwer Academic Publishers},
title = {{Stream processor architecture}},
year = {2002}
}
@book{Butnariu1993,
author = {Butnariu, D and Klement, E P},
publisher = {Kluwer Academic Publishers},
title = {{Triangular norm-based measures and games with fuzzy coalitions}},
url = {http://books.google.com/books?hl=en\&lr=\&id=i-hjL27Pz-gC\&oi=fnd\&pg=PA1\&dq=Triangular+Norm-Based+Measures+and+Games+with+Fuzzy+Coalitions\&ots=dXuf1OjutO\&sig=p-ECsFyYwVnzDfADOuA09lOPeuE\#v=onepage\&q=\&f=false},
year = {1993}
}
@misc{Benz2004,
author = {Benz, Chuck},
file = {::},
title = {{csrGen: Automated CSRs for ASIC/FPGA Processor Interfaces}},
url = {http://asics.chuckbenz.com},
year = {2004}
}
@inproceedings{Maier1993,
abstract = {Quality function deployment, (QFD), an approach to synthesizing several elements of system modeling and design into single unit, is presented. Behavioral, physical, and performance modeling are usually considered as separate aspects of system design without explicit linkages. Structured methodologies have developed linkages between behavioral and physical models before, but have not considered the integration of performance models. QFD integrates performance models with traditional structured models. In this method, performance requirements such as cost, weight, and detection range are partitioned into matrices. Partitioning is done by developing a performance model, preferably quantitative, for each requirement. The parameters of the model become the engineering objectives in a QFD analysis and the models are embedded in a spreadsheet version of the traditional QFD matrices. The performance model and its parameters are used to derive part of the functional model by recognizing that a given performance model implies some structure to the functionality of the system.},
author = {Maier, M W},
booktitle = {Aerospace Applications Conference, 1993. Digest., 1993 IEEE},
file = {::},
keywords = {aerospace,aerospace computing,behavioural models,cost,detection range,functional model,performance modeling,physical models,quality function deployment,spreadsheet,structured methods,system modeling,systems analysis,systems engineering,weight},
pages = {187--195},
title = {{Performance analysis, quality function deployment and structured methods}},
year = {1993}
}
@misc{SpringSoft2009,
author = {SpringSoft},
title = {{Verdi Automated Debug System: nLint}},
url = {http://www.springsoft.com/products/debug-automation/verdi},
year = {2009}
}
@article{Petriu2000,
abstract = {Software architecture plays an important role in determining software quality characteristics, such as maintainability, reliability, reusability, and performance. Performance effects of architectural decisions can be evaluated at an early stage by constructing and analyzing quantitative performance models, which capture the interactions between the main components of the system as well as the performance attributes of the components themselves. The paper proposes a systematic approach to building layered queueing network (LQN) performance models from a UML description of the high-level architecture of a system and more exactly from the architectural patterns used for the system. The performance model structure retains a clear relationship with the system architecture, which simplifies the task of converting performance analysis results into conclusions and recommendations related to the software architecture. The proposed approach is applied to a telecommunication product for which an LQN model is built and analyzed. The analysis shows how the performance bottleneck is moving from component to component (hardware or software) under different loads and configurations and exposes some weaknesses in the original software architecture, which prevent the system from using the available processing power at full capacity due to excessive serialization.},
author = {Petriu, D and Shousha, C and Jalnapurkar, A},
file = {::},
isbn = {0098-5589},
journal = {IEEE Transactions On Software Engineering},
keywords = {LQN model,LQN performance models,UML description,architectural decisions,architectural patterns,architecture based performance analysis,high-level architecture,layered queueing network,maintainability,object-oriented programming,performance analysis results,performance attributes,performance bottleneck,performance effects,performance model structure,processing power,quantitative performance models,queueing theory,reliability,reusability,serialization,software architecture,software performance evaluation,software quality,software quality characteristics,specification languages,system architecture,systematic approach,telecommunication computing,telecommunication product,telecommunication system},
number = {11},
pages = {1049--1065},
title = {{Architecture-based performance analysis applied to a telecommunication system}},
volume = {26},
year = {2000}
}
@inproceedings{Raghuwanshi2004,
address = {Cairns, Australia},
author = {Raghuwanshi, M M and Kakde, O G},
booktitle = {The 8th Asia Pacific Symposium on Intelligent and Evolutionary Systems},
file = {::},
publisher = {Citeseer},
title = {{Survey on multiobjective evolutionary and real coded genetic algorithms}},
year = {2004}
}
@misc{Commission2000,
author = {Commission, International Electrotechnical},
booktitle = {IEC 61690-1},
title = {{Electronic design interchange format (EDIF) Version 3 0 0}},
url = {http://webstore.iec.ch/Webstore/webstore.nsf/0/E5CFE04EDDAD7FBDC125727F00583D23},
year = {2000}
}
@inproceedings{Pllana2005,
abstract = {High-performance computing is essential for solving large problems and for reducing the time to solution for a single problem. Current top high-performance computing systems contain 1000's of processors. Therefore, new tools are needed to support the program development that will exploit high degrees of parallelism. The issue of model-based performance evaluation of real world programs on large scale systems is addressed in this paper. We present the Performance Prophet, which is a performance modeling and prediction tool for parallel and distributed programs. One of the main contributions of this paper is our methodology for reducing the time needed to evaluate the model. In addition, we describe our method for automatic performance model generation. We have implemented Performance Prophet in Java and C++. We illustrate our approach by modeling and simulating a real-world material science parallel program.},
author = {Pllana, S and Fahringer, T},
booktitle = {Parallel Processing, 2005. ICPP 2005 Workshops. International Conference Workshops on},
file = {::},
isbn = {1530-2016},
keywords = {C++ language,Java,Performance Prophet,automatic performance model generation,distributed programs,high-performance computing,material science parallel program,parallel programming,parallel programs,performance modeling tool,performance prediction tool,program development,software performance evaluation,software tools},
pages = {509--516},
title = {{Performance Prophet: a performance modeling and prediction tool for parallel and distributed programs}},
year = {2005}
}
@inproceedings{Ghosal2005,
author = {Ghosal, P and Samanta, T and Rahaman, H and Dasgupta, P},
booktitle = {2nd Indian International Conference on Artificial Intelligence (IICAI-05)},
file = {::},
title = {{Recent Trends in the Application of Meta-Heuristics to VLSI Layout Design}},
year = {2005}
}
@inproceedings{Mittra1996,
abstract = {This paper describes VIP, a Verilog Interpreter for Preprocessing. The single pass interpreter converts the extended standard of the Verilog language proposed in LRM2.0a by OVI to the existing standard as in LRM1.0, thus enabling the simulation of the newly written code by the existing simulators. Even if the upcoming standard of the IEEE working committee 1364 disregards the LRM2.0a standard, this tool will continue to be an important option for easy code management in future. The two new features which have been included to be checked by the interpreter are the array of instances and the parameterized macro definition. Also the flexibility and performance of the interpreter has been compared with the other existing preprocessor.},
address = {Santa Clara, CA, USA},
annote = {Mittra1996.VIP a Verilog Interpreter for Preprocessing.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog interpreter for preprocessing;Open Verilog international;Language reference manual;},
author = {Mittra, Swapnajit},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Algorithms,Computer aided design,Computer hardware,Computer simulation,Data processing,Database systems,Macros,Mittra1996,Program compilers,Program interpreters},
mendeley-tags = {Mittra1996},
pages = {34--38},
title = {{VIP: a Verilog interpreter for preprocessing}},
year = {1996}
}
@inproceedings{Kukkala2005,
abstract = {This paper presents a new performance modeling approach for the design of embedded real-time systems using UML 2.0. The approach responds to the lack of specific semantics for the performance modeling. The existing UML metamodel is extended by defining stereotypes to include the message latency and execution time in UML statecharts. The information may contain both the real-time constraints and measured values that are back-annotated to the UML model. Further, fully automated model transformation is used to visualize this information with sequence diagrams. The modeling approach has been prototyped with the UML implementation of a WLAN medium access control protocol. The experiences proved the approach to be practical and intuitive.},
author = {Kukkala, P and Hannikainen, M and Hamalainen, T D},
booktitle = {System-on-Chip, 2005. Proceedings. 2005 International Symposium on},
file = {::},
keywords = {UML 2.0,UML metamodel,UML statechart,Unified Modeling Language,WLAN medium access control protocol,access protocols,embedded real-time systems design,embedded systems,performance modeling,semantics,sequence diagram},
pages = {50--53},
title = {{Performance Modeling and Reporting for the UML 2.0 Design of Embedded Systems}},
year = {2005}
}
@book{Alsina2006,
address = {Hackensack, NJ},
author = {Alsina, C and Frank, M J and Schweizer, B},
publisher = {World Scientific Pub Co Inc},
title = {{Associative functions: triangular norms and copulas}},
url = {http://books.google.com/books?hl=en\&lr=\&id=cucLc3BKN9IC\&oi=fnd\&pg=PR7\&dq=Associative+Functions:+Triangular+Norms+and+Copulas\&ots=ydkZnd5LjQ\&sig=eZNzsoBPAPWKI1lirGjxYtYmYkY\#v=onepage\&q=\&f=false},
year = {2006}
}
@article{Consel1998,
annote = {S-XML},
author = {Consel, C and Marlet, R},
file = {::},
journal = {Lecture Notes in Computer Science},
pages = {170--194},
title = {{Architecturing software using: A methodology for language development}},
year = {1998}
}
@book{Wall2000,
address = {Sebastopol, CA},
author = {Wall, Larry and Christiansen, Tom and Orwant, Jon},
edition = {3rd},
publisher = {O'Reilly Media, Inc.},
title = {{Programming Perl}},
year = {2000}
}
@inproceedings{Sait2002,
annote = {Proceedings of the 2002 Congress on Evolutionary Computation},
author = {Sait, S M and Minhas, M R and Khan, J A},
booktitle = {Proceedings of the 2002 Congress on Evolutionary Computation},
file = {::},
pages = {372--377},
title = {{Performance and low-power driven VLSI standard cell placement using tabu search}},
volume = {1},
year = {2002}
}
@inproceedings{Balasubramanian1997,
abstract = {Performance modeling is widely used to efficiently and rapidly assess the ability of multiprocessor architectures to effectively execute a given algorithm. In a typical design environment, VHDL performance models of hardware components are interconnected to form structural models of the large multiprocessor architectures. Algorithm features are described in application specific tools. Other automated tools partition the software among the various processors. Performance models evaluate the system performance. Several iterations may be needed before a suitable configuration is obtained. This paper describes a set of tools that directly interface the VHDL performance models to the algorithm partitioning tools which will significant reduce the time and effort needed to prepare the various models. A methodology that integrates several commercial tools is provided},
address = {Blacksburg, VA},
author = {Balasubramanian, P and Gray, F G},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
file = {::},
keywords = {VHDL performance models,algorithm partitioning tools,hardware description languages,multiprocessing systems,multiprocessor architectures,parallel architectures,performance evaluation},
pages = {36--41},
title = {{Interfacing VHDL performance models to algorithm partitioning tools}},
year = {1997}
}
@inproceedings{Eberhart1995,
annote = {Proceedings Sixth Symposium on Micro Machine and Human Science},
author = {Eberhart, R C and Kennedy, J},
file = {::},
pages = {39?43},
title = {{A new optimizer using particle swarm theory}},
year = {1995}
}
@book{Williams2006a,
address = {Sebastopol, CA},
author = {Williams, Hugh},
publisher = {O'Reilly Media, Inc.},
title = {{Learning MySQL}},
year = {2006}
}
@inproceedings{Gelinas1996,
abstract = {This paper describes the implementation of Vstyle, a proprietary Verilog coding style checker implemented in yacc and c. The emphasis of this paper is not on any particular set of coding practices, but on how to craft a tool which validates that coding practices are being followed. As with any proprietary tool, the benefits must be weighed with the cost of development and support. This paper demonstrates a method of implementation which delivers the most basic style verification with a modest coding effort, and which can be extended over time to yield increasing benefit.},
address = {Santa Clara, CA, USA},
annote = {Gelinas1996.Vstyle a coding style analyzer for synthesizable Verilog.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog coding style checker;Coding style analyzer;Synopsys;},
author = {Gelinas, Bob},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Coding errors,Computer aided design,Computer hardware,Computer software,Encoding (symbols),Gelinas1996},
mendeley-tags = {Gelinas1996},
pages = {50--57},
title = {{Vstyle: a coding style analyzer for synthesizable Verilog}},
year = {1996}
}
@misc{Gorham2009,
author = {Gorham, Nick},
title = {{unixODBC}},
url = {http://www.unixodbc.org/},
year = {2009}
}
@inproceedings{Jian2007,
abstract = {The economic view analyzes the enterprise from the performance point of view, which is a significant component of the existing CIM architecture. Based on former conceptual frameworks of the economic view research, this paper points to performance modeling and knowledge representation, learning and management. Firstly, a fuzzy performance modeling method is proposed, aligned with a process model; and a related fuzzy performance measurement method is then presented. Secondly, to represent performance knowledge, the formalization of the fuzzy performance model is discussed, which will facilitate performance knowledge management. Thirdly, the fuzzy performance knowledge repository is suggested to be established with a learning mechanism and methods to retrieve and reuse fuzzy performance models being proposed.},
author = {Jian, Zhou and Browne, J and Xuan, Zhou and Folan, P and Qing, Li and Tianyuan, Xiao},
booktitle = {Systems, Man and Cybernetics, 2007. ISIC. IEEE International Conference on},
file = {::},
keywords = {CIM architecture,computer integrated manufacturing,economic view,enterprise,fuzzy performance knowledge repository,fuzzy performance measurement method,fuzzy performance model construction,fuzzy set theory,industrial economics,knowledge management,knowledge representation,learning mechanism},
pages = {354--359},
title = {{Fuzzy performance model construction \& formalization: its use/reuse in the Economic View}},
year = {2007}
}
@article{Blum2003,
author = {Blum, Christian and Roli, Andrea},
doi = {10.1145/937503.937505},
file = {::},
isbn = {0360-0300},
journal = {ACM Computing Surveys},
number = {3},
pages = {268--308},
title = {{Metaheuristics in combinatorial optimization: Overview and conceptual comparison}},
volume = {35},
year = {2003}
}
@inproceedings{Smarkusky2000,
abstract = {Performance modeling and evaluation techniques are essential when designing and implementing distributed software systems. Constructing performance models for such systems can require significant effort. This paper presents Hierarchical Performance Modeling as a technique to model performance for different layers of abstraction. Once the system architecture and software functionality have been specified, this model supports performance model generation for the evaluation and analysis of computation delays of software processes, communication delays of distributed software architectures, and hardware platform alternatives. A simplified example is presented to illustrate the concepts of the Hierarchical Performance Model},
address = {Antibes-Juan les Pins },
annote = {article
xin\_meng},
author = {Smarkusky, D and Ammar, R and Antonios, I and Sholl, H},
booktitle = {Fifth IEEE Symposium on Computers and Communications, 2000. Proceedings. ISCC 2000. },
file = {::},
keywords = {860714,distributed processing, software architecture, sof},
mendeley-tags = {860714},
pages = {659--664},
title = {{Hierarchical performance modeling for distributed system architectures}},
year = {2000}
}
@misc{2005a,
address = {北京},
author = {中华人民共和国国家质量监督检验检疫总局 and 中国国家标准化管理委员会},
file = {::},
publisher = {中华人民共和国国家质量监督检验检疫总局
中国国家标准化管理委员会},
title = {{文后参考文献著录规则 GB/T 7714-2005}},
year = {2005}
}
@book{Beaulieu2009,
address = {Sebastopol, CA},
author = {Beaulieu, Alan},
edition = {2nd},
publisher = {O'Reilly Media, Inc.},
title = {{Learning SQL}},
year = {2009}
}
@inproceedings{Gray2003,
annote = {MSF},
author = {Gray, J and Karsai, G},
booktitle = {36th Annual Hawaii International Conference on System Sciences (HICSS'03)-Track},
file = {::},
pages = {6--9},
title = {{An examination of DSLs for concisely representing model traversals and transformations}},
volume = {9},
year = {2003}
}
@book{Lippman2002,
address = {北京},
annote = {12
inbook
Xin Meng},
author = {Lippman, Stanley B and Lajoie, Jos\'{e}e},
keywords = {Lippman2002},
mendeley-tags = {Lippman2002},
pages = {471},
publisher = {中国电力出版社},
title = {{C++ Primer (Chinese Edition)}},
year = {2002}
}
@misc{OSCI2009b,
author = {OSCI},
title = {{SystemC Transaction Level Modeling}},
url = {http://www.systemc.org/},
year = {2009}
}
@misc{Microsoft2009,
author = {Microsoft},
keywords = {odbc},
title = {{ODBC API Reference}},
url = {http://msdn.microsoft.com/en-us/library/ms714562(VS.85).aspx},
year = {2009}
}
@book{Klement2000,
author = {Klement, E P and Mesiar, R and Pap, E},
publisher = {Kluwer Academic Pub},
title = {{Triangular norms}},
url = {http://books.google.com/books?hl=en\&lr=\&id=rIyqcjfKMN4C\&oi=fnd\&pg=PR11\&dq=Associative+Functions:+Triangular+Norms+and+Copulas\&ots=bnQwIfLk3D\&sig=ScxeJrpDtwhDVTglmPt9GxUyXmM\#v=onepage\&q=\&f=false},
year = {2000}
}
@inproceedings{Smaragdakis1997,
author = {Smaragdakis, Y and Batory, D},
booktitle = {USENIX Conference on Domain-Specific Languages},
file = {::},
pages = {257270},
title = {{DiSTiL: A transformation library for data structures}},
year = {1997}
}
@inproceedings{Dubois1982,
author = {Dubois, D and Prade, H},
booktitle = {Proceedings of the 2nd International Symposium of Fuzzy Sets},
pages = {39--68},
title = {{Triangular norms for fuzzy sets}},
year = {1982}
}
@inproceedings{Yi2008,
abstract = {Using performance model to analyze the Internet service is prevailing. However, the research of the performance model for mail server retrains in the immature status. In this paper, based on the queue theory, we propose a performance model for Domino mail server. The verification and analysis of the model are also presented. The experimental results show that this model characterizes the behavior of Domino mail server well and prove that it is useful for the qualitative performance measurement of Domino mail server.},
author = {Yi, Liang and Lei, Wang and Jianfeng, Zhan and Di, R},
booktitle = {Computer Science and Software Engineering, 2008 International Conference on},
file = {::},
keywords = {Domino mail server,Internet,Internet service,mail server,mailing systems,performance model,queue theory,queueing theory},
pages = {473--476},
title = {{A Performance Model for Domino Mail Server}},
volume = {3},
year = {2008}
}
@misc{Billauer2002,
abstract = {Perlilog is a command-line tool which generates Verilog modules from a set of files, which come in several other formats. It was originally designed to integrate Verilog IP cores. It's released as free software (GPL). Motivation: Anyone who has needed to integrate a few Verilog modules into something working, knows it's a headache. It's not only a mechanic task, but also a source of bugs. Since Verilog modules' interface is basically wires, the integration task requires an accurate understanding of what each wire stands for, and how it's expected to behave. Having many details to keep track on, it's common that undesidered},
annote = {unpublished
Xin Meng},
author = {Billauer, Eli},
file = {::;::},
keywords = {perlilog},
mendeley-tags = {perlilog},
title = {{Perilog}},
url = {http://billauer.co.il/perlilog.html},
year = {2002}
}
@inproceedings{Devadas1995,
annote = {讨论了各种降低功耗的优化方法.},
author = {Devadas, S and Malik, S},
booktitle = {Proceedings of the 32nd ACM/IEEE conference on Design automation},
file = {::},
pages = {242--247},
publisher = {ACM New York, NY, USA},
title = {{A survey of optimization techniques targeting low power VLSI circuits}},
year = {1995}
}
@article{Gandhi2006,
abstract = {The use of SystemVerilog language in the design and verification of complex chips is discussed. Designers can use the IEEE-std 1800-2005 SystemVerilog standard to capture their designs in one-third to one-half of the RTL code, which speeds up the design process and also accelerates verification, since fewer lines of RTL mean fewer bugs. Complex chips require constrained-random, coverage-driven testbenches to minimize the effort of writing manual tests, maximize reuse of verification components, and accurately assess verification progress. SystemVerilog provides all the constructs to build such testbenches and increase the chance for first-silicon success. Design and verification engineers can use SystemVerilog's capability to design intent in executable form. The language also helps in system-level design and can be used for transaction-level modeling, freely inter-mixing with models written in SystemC and sharing a common verification environment.},
annote = {article
Xin Meng
Chip scale packages
SystemVerilog;Complex chips;Testbenches;Modeling;},
author = {Gandhi, Manoj},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Computer hardware description languages,Computer simulation,Gandhi2006,Large scale systems,Logic design,Mathematical models,Semiconducting silicon},
mendeley-tags = {Gandhi2006},
number = {15},
pages = {22},
title = {{SystemVerilog: The complete solution}},
volume = {54},
year = {2006}
}
@book{Tennison2001,
address = {Hoboken, NJ},
author = {Tennison, Jeni},
publisher = {Wiley},
title = {{XSLT and XPath On The Edge}},
year = {2001}
}
@book{Vlist2002,
address = {Sebastopol, CA},
author = {van der Vlist, Eric},
publisher = {O'Reilly Media, Inc.},
title = {{XML Schema}},
year = {2002}
}
@inproceedings{Pllana2008,
abstract = {Performance is a key feature of large-scale computing systems. However, the achieved performance when a certain program is executed is significantly lower than the maximal theoretical performance of the large-scale computing system. The model-based performance evaluation may be used to support the performance-oriented program development for large-scale computing systems. In this paper we present a hybrid approach for performance modeling and prediction of parallel and distributed computing systems, which combines mathematical modeling and discrete-event simulation. We use mathematical modeling to develop parameterized performance models for components of the system. Thereafter, we use discrete-event simulation to describe the structure of system and the interaction among its components. As a result, we obtain a high-level performance model, which combines the evaluation speed of mathematical models with the structure awareness and fidelity of the simulation model. We evaluate empirically our approach with a real-world material science program that comprises more than 15,000 lines of code.},
author = {Pllana, S and Benkner, S and Xhafa, F and Barolli, L},
booktitle = {Complex, Intelligent and Software Intensive Systems, 2008. CISIS 2008. International Conference on},
file = {::},
keywords = {computing,discrete event simulation,discrete-event simulation,distributed computing,hybrid performance modeling,large-scale computing system,large-scale systems,mathematical modeling,parallel computing,parallel processing,prediction},
pages = {132--138},
title = {{Hybrid Performance Modeling and Prediction of Large-Scale Computing Systems}},
year = {2008}
}
@article{Zadeh1965,
author = {Zadeh, L A},
journal = {Fuzzy Systems and AI Reports and Letters},
pages = {129--136},
title = {{Fuzzy sets}},
volume = {61},
year = {1965}
}
@article{Li2000,
abstract = {We present hardware ML (HML), an innovative hardware description language (HDL) based on the functional programming language SML. Features of HML not found in other HDL's include polymorphic types and advanced type checking and type inference techniques. We have implemented an HML type checker and a translator for automatically generating VHDL from HML descriptions. We generate a synthesizable subset of VHDL and automatically infer types and interfaces. This paper gives an overview of HML and discusses the translation from HML to VHDL and the type inference process.},
annote = {Li2000.HML a novel hardware description language and its translation to VHDL.pdf
article
Xin Meng
Computer hardware description languages
Verilog hardware description language;HML programming language;},
author = {Li, Yanbing and Leeser, Miriam},
isbn = {1063-8210},
journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
keywords = {Interfaces (computer),Li2000,Program translators},
mendeley-tags = {Li2000},
number = {1},
pages = {1--8},
title = {{HML, a novel hardware description language and its translation to VHDL}},
volume = {8},
year = {2000}
}
@inproceedings{Kirchsteiger2008,
abstract = {A challenge in the design space exploration of todays' multimedia system-on-chip (SoC) designs is to rapidly evaluate the large number of different processor types. This limitation is resolved by our methodology, originated from the SIMBA1 project. It automatically generates a Sys- temC performance model of the software code with respect to the chosen processor type. The generated performance model consists of the original software C-code annotated with SystemC wait statements to consider the execution time on the target processor. These wait statements are automatically determined by the target cross-compiler's assembler code and the processor datasheet and consider also memory accesses and pipeline effects. In our experiments we automatically generate both a performance model of an ARM and a TI processor. This only requires the target cross-compiler and the processor datasheet and is widely applicable to various processor types. We show that our models can be used easily to compare the software performance on these platforms. We also demonstrate that the models can be smoothly integrated into an existing multimedia SoC for a rapid software-driven architecture exploration.},
author = {Kirchsteiger, C M and Schweitzer, H and Trummer, C and Steger, C and Weiss, R and Pistauer, M},
booktitle = {Embedded Systems for Real-Time Multimedia, 2008. ESTImedia 2008. IEEE/ACM/IFIP Workshop on},
file = {::},
keywords = {ARM7,C language,SystemC performance model,TI MSP430,TI processor,automatically generated software performance model,memory accesses,microprocessor chips,multimedia system-on-chips,multimedia systems,pipeline,pipeline processing,processor datasheet,program compilers,smart card,smart cards,software C-code,software performance evaluation,system-on-chip,target cross-compiler's assembler code},
pages = {19--24},
title = {{Rapid exploration of multimedia system-on-chips with automatically generated software performance models}},
year = {2008}
}
@article{Guyer1999,
annote = {AL},
author = {Guyer, S Z and Lin, C},
file = {::},
title = {{An annotation language for optimizing software libraries}},
year = {1999}
}
@article{Grotschel1995,
author = {Grotschel, M and Lovasz, L and Algorithms, A S G},
file = {::},
journal = {Handbook of combinatorics},
pages = {1541--1597},
title = {{Combinatorial optimization}},
volume = {2},
year = {1995}
}
@article{Spinnato2004,
abstract = {Hybrid architectures are systems where a high performance general purpose computer is coupled to one or more special purpose devices (SPDs). Such a system can be the optimal choice for several fields of computational science. Configuring the system and finding the optimal mapping of the application tasks onto the hybrid machine often is not straightforward. Performance modeling is a tool to tackle and solve these problems. We have developed a performance model to simulate the behavior of a hybrid architecture consisting of a parallel multiprocessor where some nodes are the host of a GRAPE board. GRAPE is a very high performance SPD used in computational astrophysics. We validate our model on the architecture at our disposal, and show examples of predictions that our model can produce.},
author = {Spinnato, P F and van Albada, G D and Sloot, P M A},
file = {::},
isbn = {1045-9219},
journal = {Parallel and Distributed Systems, IEEE Transactions on},
keywords = {GRAPE board,N-body codes,N-body problems,distributed hybrid architecture,multiprocessing systems,parallel multiprocessor,parallel processing,performance modeling,special purpose computers,special purpose device,system configuration},
number = {1},
pages = {81--92},
title = {{Performance modeling of distributed hybrid architectures}},
volume = {15},
year = {2004}
}
@book{SeanChambers2009,
annote = {refactoring},
author = {SeanChambers and Chiaretta, Simone},
file = {::},
title = {31天重构速成 你必须知道的重构技巧},
year = {2009}
}
@inproceedings{Arnold1997,
abstract = {Different synthesis vendors support different subsets of Verilog. One such subset is the implicit style state machine (multiple uses of edge triggered events within on always block). With this style, one can obtain working silicon in less time because the implicit style is more like software design. Unfortunately, most synthesis vendors do not support the implicit style. To make the implicit style more accessible, a freely available synthesis preprocessor is described here that converts implicit style always blocks into other equivalent Verilog, which can then be synthesized by most commercial synthesis tools. This paper discusses advantages of the implicit style, how the preprocessor translates implicit style code into a one-hot design, and why the language subset (non-blocking assignment) was chosen so that the semantics of the synthesized Verilog can agree with the simulation semantics defined IEEE 1364. More information about our preprocessor can be found at http://plum.uwyo.edu/<sup>(tilde)</sup>vito or http://cs.brockport.edu/<sup>(tilde)</sup>jshuler/vito/.},
address = {Santa Clara, CA, USA},
annote = {inproceedings
xin\_meng
Computer aided logic design
Verilog hardware description language;Software package Synopsys design compiler;},
author = {Arnold, Mark G and Shuler, James D},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Arnold1997,Computational linguistics,Computer hardware description languages,Computer simulation,Computer software,Electric network synthesis,Program processors},
mendeley-tags = {Arnold1997},
pages = {38--45},
title = {{Synthesis preprocessor that converts implicit style Verilog into one-hot designs}},
year = {1997}
}
@inproceedings{Wang2006,
abstract = {In this paper, we study the performance modeling of a MAC protocol for ad hoc networks. Dual busy tone multiple access (DBTMA) is one of the MAC protocols designed for ad hoc networks. The existing performance model of DBTMA fails to take into consideration multi-cell interference, known as hidden terminal problem. We present a performance analysis that takes into account the multi-cell interference. The numerical results show lower channel throughput than that predicted by the existing performance model of DBTMA protocol. The numerical results are verified through simulation. Further, we extend our analytical model to power-controlled networks},
author = {Wang, X and Ali, M M},
booktitle = {Communications, 2006 23rd Biennial Symposium on},
file = {::},
keywords = {DBTMA,MAC protocol,access protocols,ad hoc networks,dual busy tone multiple access,interference (signal),medium access control,multi-access systems,multicell interference,performance modeling,power-controlled network},
pages = {190--193},
title = {{Performance Modeling of Ad Hoc Networks with Multi-Cell Interference}},
year = {2006}
}
@book{Dybviq2003,
address = {Cambridge, MA},
author = {Dybviq, R Kent},
edition = {3rd},
publisher = {The MIT Press},
title = {{The Scheme Programming Language}},
year = {2003}
}
@book{Czarnecki2000,
address = {Des Moines, IA},
author = {Czarnecki, Krysztof and Eisenecker, Ulrich},
publisher = {Addison-Wesley Professional},
title = {{Generative Programming: Methods, Tools, and Applications}},
year = {2000}
}
@book{Ray2003,
address = {Sebastopol, CA},
author = {Ray, Eric},
edition = {2nd},
publisher = {O'Reilly Media, Inc.},
title = {{Learning XML}},
year = {2003}
}
@inproceedings{Launchbury1999,
annote = {Hawk},
author = {Launchbury, J and Lewis, J R and Cook, B},
booktitle = {Proceedings of the fourth ACM SIGPLAN international conference on Functional programming},
file = {::},
pages = {60--69},
publisher = {ACM New York, NY, USA},
title = {{On embedding a microarchitectural design language within Haskell}},
year = {1999}
}
@article{Pooley1989,
abstract = {Performance modelling and estimation of computer systems is a vital facility for any software engineer. Thus any computer-aided software engineering environment should contain tools to support this. The need to provide tools to support systematic experimentation with performance models is examined and a solution is discussed, building on the idea of an experimental frame, originally introduced by Ziegler (1976). The inter-working of these tools and the support tools in a proposed integrated modelling support environment is considered. The tools discussed are an experimental plan editor, an experiment executor and an animator. The report is based on a deliverable of the Alvey project SE/059 `Improved methods for performance modelling (SIMMER)', but has been edited to be more self-contained},
author = {Pooley, R},
file = {::},
isbn = {0268-6961},
journal = {Software Engineering Journal},
keywords = {Alvey,SE/059,SIMMER,animator,computer graphics,computer-aided software engineering environment,experiment executor,experimental plan editor,experimenter tool,integrated modelling support environment,performance modelling,performance models,program testing,software tools,systematic experimentation,user interfaces},
number = {3},
pages = {163--170},
title = {{An experimenter tool for an integrated modelling support environment-its role and design}},
volume = {4},
year = {1989}
}
@inproceedings{Ammon1997,
abstract = {In a simulation-based design process developed for the Rapid Prototyping of Application-Specific Signal Processors program (RASSP), an abstract VHDL performance model forms a virtual prototype of a full DSP system that is timing- and data-faithful. Full-system models provide early design verification by simulating application software and hardware in an integrated co-design development. This paper describes the process of applying Omniview's PMW tool suite to the design of an image-classification system. The Performance Modeling Workbench (PMW) tool suite lets engineers create high-fidelity performance models of multiprocessor systems. The design process uses performance models for trade-off analyses among designs with different hardware/software architectures. The tool helps designers determine if the candidate design could satisfy performance requirements, identify bottlenecks and over-design, and optimize system performance},
author = {Ammon, J and Hein, C},
booktitle = {VHDL International Users' Forum, 1997. Proceedings},
file = {::},
keywords = {DSP system,Omniview,PMW tool suite,Performance Modeling Workbench,RASSP,Rapid Prototyping of Application-Specific Signal P,VHDL,application specific integrated circuits,circuit analysis computing,design verification,digital signal processing chips,hardware architectures,hardware description languages,hardware software codesign,high level synthesis,high-fidelity performance models,image classification,image classification system,multiprocessing systems,multiprocessor systems,performance evaluation,performance modeling,program,simulation,simulation-based design process,software architectures,system performance optimization,virtual machines,virtual prototype},
pages = {209--215},
title = {{VHDL-based performance modeling: an application of the PMW tool suite to an image classification system}},
year = {1997}
}
@article{Konak2006,
author = {Konak, A and Coit, D W and Smith, A E},
file = {::;::},
journal = {Reliability Engineering and System Safety},
number = {9},
pages = {992--1007},
title = {{Multi-objective optimization using genetic algorithms: A tutorial}},
volume = {91},
year = {2006}
}
@misc{Boost2009,
author = {Boost},
title = {{Boost C++ Library}},
url = {http://www.boost.org},
year = {2009}
}
@misc{Siek2009,
author = {Siek, Jeremy},
title = {{The Boost Graph Library}},
url = {http://www.boost.org/doc/libs/1\_38\_0/libs/graph/doc/table\_of\_contents.html},
year = {2009}
}
@book{McFarland2006,
address = {Sebastopol, CA},
author = {McFarland, David},
edition = {1st},
publisher = {Pogue Press, O'Reilly},
title = {{CSS: The Missing Manual }},
year = {2006}
}
@article{Maliniak2006,
abstract = {The kind of infrastructure built for hardware description language, System Verilog, in the verification realm that is useful for the designers is discussed. System Verilog involves a number of verification concepts, primarily in the areas of design, assertions, and testbench creation, that were previously embodied in separate and sometimes proprietary languages. System Verilog can be broken out into four key segments including design, assertions, test-bench capabilities, and verification coverage analysis. One of the most popular, and most readily adopted, System Verilog features is its assertions capabilities. Using assertions with RTL is a quick and relatively easy way to make use of System Verilog to improve verification. System Verilog assertions can significantly improve the productivity of the verification engineer. The biggest advantages provided by System Verilog environment is the ability to work within the constrained-random stimulus methodology.},
annote = {article
Xin Meng
Computer programming languages
Testbench creation;Proprietary languages;Test-bench capabilities;},
author = {Maliniak, David},
isbn = {0013-4872},
journal = {Electronic Design},
keywords = {Constraint theory,Electronics engineering,Maliniak2006,Productivity},
mendeley-tags = {Maliniak2006},
number = {11},
pages = {49--55},
title = {{System Verilog gains a foothold in verification}},
volume = {54},
year = {2006}
}
@inproceedings{Sait2001,
annote = {文中提到的SimulatedEvolution算法是把一个布局的解看成由多个可移动单元（MovableElement）组成的集合，每个ME单独可移动且对应一个评价函数G。算法主循环包括Eveluation，Selection，和Allocation三步组成。在Eveluation阶段，计算每个ME对应的G；在Selection阶段，从所有ME中选出那些G值比较低的ME并构造一个子集记为S，期间涉及一个Bias值，作为对G值的补偿（Random > Min(G+B, 1) )；不过一个常数的补偿能有多大作用呢？，在Allocation阶段，通过交换S中ME的位置，调整布局，试图找出更好解。},
author = {Sait, S M and Youssef, H and Khan, J A},
booktitle = {Genetic and Evolutionary Computer Conference 2001, GECCO-2001},
file = {::},
title = {{Fuzzy evolutionary algorithm for VLSI placement}},
year = {2001}
}
@book{Pedroni2004,
address = {Cambridge, MA},
author = {Pedroni, Volnei A},
publisher = {The MIT Press},
title = {{Circuit Design with VHDL}},
year = {2004}
}
@book{Kang1990,
address = {Pittsburph, PA},
annote = {11
book
Xin Meng},
author = {Kang, Kyo C and Cohen, S G and {Hess  Novak W. E.}, J A and Peteron, A S},
file = {::},
keywords = {Kang1990},
mendeley-tags = {Kang1990},
publisher = {Software Engineering Institute, Carnegie Mellon University},
title = {{Feature-Oriented domain analysis (FODA) feasibility study}},
year = {1990}
}
@article{Schnarr2001,
annote = {Facile},
author = {Schnarr, E C and Hill, M D and Larus, J R},
file = {::},
journal = {ACM SIGPLAN Notices},
number = {5},
pages = {321--331},
title = {{Facile: A language and compiler for high-performance processor simulators}},
volume = {36},
year = {2001}
}
@book{Alexandrescu2001,
address = {Des Moines, IA},
author = {Alexandrescu, Andrei},
publisher = {Addison-Wesley Professional},
title = {{Modern C++ Design: Generic Programming and Design Patterns Applied}},
year = {2001}
}
@inproceedings{James1999,
abstract = {Verischemelog (pronounced with 5 syllables, veruh-scheme-uh-log) is a language and programming environment embedded in Scheme for designing digital electronic hardware systems and for controlling the simulation of these circuits. Simulation is performed by a separate program, often a commercial product. Verischemelog compiles to Verilog, an industry standard language accepted by several commercial and public domain simulators.Because many design elements are easily parameterized, design engineers currently write scripts which generate hardware description code in Verilog. These scripts work by textual substitution, and are typically ad-hoc and quite limited. Preprocessors for Verilog, on the other hand, are hampered by their macro-expansion languages, which support few data types and lack procedures. Verischemelog obviates the need for scripts and preprocessors by providing a hardware description language with list-based syntax, and Scheme to manipulate it.An interactive development environment gives early and specific feedback about errors, and structured access to the compiler and run-time environment provide a high degree of reconfigurability and extensibility of Verischemelog.},
address = {Austin},
annote = {James1999.verilog\_embedded\_into\_scheme.pdf
inproceedings
xin\_meng},
author = {James, Jennings and Eric, Beuscher},
booktitle = {Proceedings of 2nd conference on Domain-specific languages},
keywords = {James1999},
mendeley-tags = {James1999},
pages = {123--134},
publisher = {ACM New York},
title = {{Verischemelog: Verilog embedded in Scheme}},
year = {1999}
}
@misc{Darringer2007,
abstract = {Currently, since many SoCs include heterogeneous components such as CPUs, DSPs, ASICs, memories, buses, etc., system integration becomes a major step in the design flow. To enable this integration, we use a design approach called component based-design approach. In this approach, the validation of system integration takes most of design efforts. This paper presents an automatic method of SoCs design validation. Based on a generic simulation wrapper architecture, the presented method provides automatic generation of executable models throughout different stages of SoC design flow. A case study of validating a VDSL application shows the effectiveness of the method.},
address = {San Diego, California},
annote = {1278670
760-764},
author = {Darringer, John A},
booktitle = {Proceedings of the 44th annual conference on Design automation},
doi = {http://doi.acm.org/10.1145/1278480.1278670},
file = {::},
publisher = {ACM},
title = {{Multi-core design automation challenges}},
year = {2007}
}
@misc{Peeters2008,
author = {Peeters, Kasper},
file = {::},
title = {tree.hh },
url = {http://www.damtp.cam.ac.uk/user/kp229/tree/},
year = {2008}
}
@inproceedings{Falbo2002,
annote = {inproceedings
Xin Meng},
author = {Falbo, R A and Guizzardi, G and Duarte, K C},
booktitle = {Proceedings of the 14th International Conference on Software Engineering and Knowledge Engineering (SEKE'02)},
keywords = {Falbo2002},
mendeley-tags = {Falbo2002},
pages = {351--358},
publisher = {ACM},
title = {{An ontological approach to domain engineering}},
year = {2002}
}
@inproceedings{Ebeling2007,
abstract = {All modern hardware design makes use of hardware description languages like Verilog and VHDL. Thus these languages are presented very early in the curriculum, often in the first design course. Unfortunately, these languages often cause substantial confusion for students learning hardware design, particularly students that have experience writing programs in sequential languages like C and Java. To address this problem, we have defined a language called Abstract Verilog which is similar to Verilog, but which has well-defined, clean parallel execution semantics. Abstract Verilog has a somewhat restricted syntax in order to reduce the cognitive load for new students. However, almost any program that can be written in Verilog can be written in Abstract Verilog, where it is shorter and easier to understand. We have used Abstract Verilog successfully in both introductory and advanced design classes. \&copy; 2007 IEEE.},
address = {San Diego, CA, United States},
annote = {Ebeling2007.abstract.verilog.pdf
inproceedings
Xin Meng
Computer hardware description languages
Hardware design;Design courses;},
author = {Ebeling, Carl and French, Brian},
booktitle = {Proceedings - MSE 2007: 2007 IEEE International Conference on Microelectronic Systems Education: Educating Systems Designers for the Global Economy and a Secure World},
keywords = {Ebeling2007,Electronics engineering,Engineering education,Java programming language,Learning systems,Semantics,Students},
mendeley-tags = {Ebeling2007},
pages = {105--106},
title = {{Abstract verilog: A hardware description language for novice students}},
year = {2007}
}
@book{Paulson1996,
annote = {book
Xin Meng},
author = {Paulson, Lawrence C},
keywords = {Paulson1996},
mendeley-tags = {Paulson1996},
publisher = {Cambridge University Press},
title = {{ML for the Working Programmer}},
year = {1996}
}
@book{Lewis1998,
address = {New York},
annote = {book
Xin Meng},
author = {Lewis, Harry R and Papadimitriou, Christos H},
edition = {2nd},
keywords = {Lewis1998},
mendeley-tags = {Lewis1998},
publisher = {Prentice Hall, Inc.},
title = {{Elements of the Theory of Computation}},
year = {1998}
}
@inproceedings{Mauw2002,
annote = {RoTL},
author = {Mauw, S and Wiersma, W T and Willemse, T A C},
booktitle = { Proceedings of the 35th Annual Hawaii International Conference on System Sciences, 2002. HICSS.},
file = {::},
pages = {3637--3646},
title = {{Language-driven system design}},
year = {2002}
}
@article{VanEngelen2001,
author = {van Engelen, R A},
file = {::},
journal = {Journal of Computing and Information Technology},
number = {4},
pages = {289--304},
title = {{Atmol: A domain-specific language for atmospheric modeling}},
volume = {9},
year = {2001}
}
@article{Zitzler2004,
author = {Zitzler, E and Laumanns, M and Bleuler, S},
file = {::},
journal = {Metaheuristics for Multiobjective Optimisation},
pages = {3--38},
title = {{A tutorial on evolutionary multiobjective optimization}},
volume = {535},
year = {2004}
}
@inproceedings{Alam2006,
abstract = {Performance and workload modeling has numerous uses at every stage of the high-end computing lifecycle: design, integration, procurement, installation and tuning. Despite the tremendous usefulness of performance models, their construction remains largely a manual, complex, and time-consuming exercise. We propose a new approach to the model construction, called modeling assertions (MA), which borrows advantages from both the empirical and analytical modeling techniques. This strategy has many advantages over traditional methods: incremental construction of realistic performance models, straightforward model validation against empirical data, and intuitive error bounding on individual model terms. We demonstrate this new technique on the NAS parallel CG and SP benchmarks by constructing high fidelity models for the floating-point operation cost, memory requirements, and MPI message volume. These models are driven by a small number of key input parameters thereby allowing efficient design space exploration of future problem sizes and architectures},
author = {Alam, S R and Vetter, J S},
booktitle = {Parallel and Distributed Processing Symposium, 2006. IPDPS 2006. 20th International},
file = {::},
keywords = {MPI message volume,error bounding,floating-point operation cost,incremental model construction,memory requirements,model validation,modeling assertions,parallel applications,parallel processing,performance evaluation,performance modeling,symbolic performance models,workload modeling},
pages = {8 pp.},
title = {{A framework to develop symbolic performance models of parallel applications}},
year = {2006}
}
@book{Lamport1994a,
address = {Des Moines, IA},
author = {Lamport, Leslie},
edition = {2nd},
publisher = {Addison-Wesley},
title = {{LaTeX: A Document Preparation System}},
year = {1994}
}
@inproceedings{Sloane2002,
annote = {Nowra},
author = {Sloane, A},
booktitle = {PROCEEDINGS OF THE ANNUAL HAWAII INTERNATIONAL CONFERENCE ON SYSTEM SCIENCES},
file = {::},
pages = {281},
title = {{Post-design domain-specific language embedding: A case study in the software engineering domain}},
year = {2002}
}
@inproceedings{Vuppala1997a,
abstract = {Hardware description languages (HDLs) are frequently used to construct performance models to represent systems early in the design process. The HDLs are commonly known to be time-consuming and labor-intensive tools. For example, VHDL uses a large number of possible modeling approaches that can lead to designs which are unstructured and difficult to understand. This paper discusses a methodology to construct VHDL performance models which will help to significantly reduce the time from an initial conception to a working design. To further reduce development time, reuse of existing structural primitives is emphasized. Typical models of multi-processor architectures are very large and complex. Validation of theses models is difficult and time consuming. This paper also develops a methodology for model validation. A seventeen processor raceway architecture that was developed as a part of the ongoing RASSP (Rapid Prototyping of Application Specific Signal Processors) project, is used as a template to illustrate the new methodologies of performance model construction and model validation. The design consists of seventeen processors interconnected by multiple crossbar switches. Two software algorithms were mapped onto the architecture: a Synthetic Aperture Radar (SAR) Range Processing Algorithm and a SAR Multiswath Processing Algorithm. The methodologies developed in this thesis will considerably reduce the amount of time needed to construct and validate performance models of complex multiprocessor architectures},
address = {Blacksburg, VA },
annote = {article
xin\_meng},
author = {Vuppala, S and Gray, F G and Armstrong, J R},
booktitle = {Southeastcon '97. 'Engineering new New Century'., Proceedings. IEEE},
file = {::},
keywords = {598604,hardware description languages, multiprocessing sy},
mendeley-tags = {598604},
pages = {29--35},
title = {{Methodology for VHDL performance model construction and validation}},
year = {1997}
}
@book{Cormen2003,
address = {Columbus, OH},
author = {Cormen, Thomas and Leiserson, Charles and Rivest, Ronald and Stein, Clifford},
edition = {2nd},
publisher = {McGraw-Hill },
title = {{Introduction to Algorithms}},
year = {2003}
}
@article{Yager1985,
author = {Yager, R R},
journal = {Information sciences},
number = {1-2},
pages = {179--206},
title = {{Aggregating evidence using quantified statements}},
volume = {36},
year = {1985}
}
@article{Yager1983,
author = {Yager, R R},
journal = {Information Sciences: an International Journal},
number = {2},
pages = {107--139},
title = {{Quantifiers in the formulation of multiple objective decision functions}},
volume = {31},
year = {1983}
}
@incollection{Luk1998,
annote = {Pebble: a language for parametrised and reconfigurable hardware design
Luk1998. Pebble A Language For Parametrised and Reconfigurable Hardware Design.pdf
inbook
Xin Meng},
author = {Luk, Wayne and McKeever, Steve},
keywords = {Luk1998},
mendeley-tags = {Luk1998},
pages = {9},
publisher = {Springer Berlin / Heidelberg},
title = {{Field-Programmable Logic and Applications From FPGAs to Computing Paradigm}},
volume = {1482},
year = {1998}
}
@book{Fowler1999,
address = {Des Moines, IA},
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
publisher = {Addison-Wesley},
title = {{Refactoring: Improving the Design of Existing Code}},
year = {1999}
}
@article{Zadeh1973,
author = {Zadeh, L A},
journal = {IEEE Transactions on Systems, Man, and Cybernetics},
pages = {28--44},
title = {{Outline of a new approach to the analysis of complex systems and decision processes}},
volume = {3},
year = {1973}
}
@article{Marler2004,
author = {Marler, R T and Arora, J S},
file = {::},
journal = {Structural and Multidisciplinary Optimization},
number = {6},
pages = {369--395},
title = {{Survey of multi-objective optimization methods for engineering}},
volume = {26},
year = {2004}
}
@inproceedings{Miller1999,
abstract = {This paper introduces an approach for protocol performance estimation directly from a formal model of the protocol. By using the approach presented in this paper, performance of a protocol can be quickly estimated at an early stage of protocol design. The simplicity of analysis, achieved by deterministic analysis, and the tight integration of the performance model, called the performance reachability graph (PRG), with the formal specification makes the approach in this paper a very useful protocol design-time tool. The approach provides a two way path between the specification model and the performance model. In one direction, the tight coupling between the specification and the performance models allows a protocol designer to get quick estimates of performance from the specification. In the other direction a designer can use the performance estimates to quickly identify portions of the specification responsible for undesired performance characteristics and consider changes to the specification to improve the overall performance},
author = {Miller, R E and Chaudry, Z U},
booktitle = {Performance, Computing and Communications Conference, 1999. IPCCC '99. IEEE International},
file = {::},
keywords = {deterministic analysis,formal specification,performance evaluation,performance model,performance models,performance reachability graph,protocol performance,protocols},
pages = {157--163},
title = {{On estimating protocol performance from a formal specification}},
year = {1999}
}
@inproceedings{Li2000a,
abstract = {Large software systems are composed of interdependent distributed components, some developed in-house, some commercially available, and others developed by the customer. The system architecture, that is, the components comprising the system and their interconnections, typically varies for each design. Performance prediction is important for such software, including helping designers to select better designs and helping them to adjust the software architecture for better performance. To predict the overall system performance, we must have performance data for each component. Performance modelling for reused components was reported elsewhere. This paper presents a technology and its accompanying tool suite to obtain performance models of new components in a formal software architectural design specification given in a communicating extended finite state machine (CEFSM) model. Performance data for such new components are not available and must be collected through simulation. Our technique includes three steps: component specification instrumentation; simulation; and component stochastic performance model derivation from simulation trace. We applied our technology to a telecom application to predict the performance of its new components. Combined with the performance models of reused components from previous work, we were able to predict performance of the entire architectural design},
author = {Li, J J and Horgan, J R},
booktitle = {Simulation Symposium, 2000. (SS 2000) Proceedings. 33rd Annual},
file = {::},
keywords = {communicating extended finite state machine,component specification,finite state machines,formal software architectural design specification,formal specification,large software systems,simulation trace,software architecture,software component performance prediction,software designs,software performance evaluation,software tools,stochastic performance model,system architecture,telecom application,telecommunication computing,tool suite,virtual machines},
pages = {283--290},
title = {{Simulation-trace-based component performance prediction}},
year = {2000}
}
@inproceedings{Davis1995,
abstract = {This paper describes research leading to the generation of a preprocessor for the Verilog hardware description language. The function of this preprocessor is to support repeated feature instances in a Verilog description for a digital system. Repeated features most commonly occur in the description of datapaths, where iterative structures like adders, multipliers and muxes are the basic building blocks. Citations from Verilog users and industry organizations in support of inclusion of a repeated feature syntax are given. Several syntaxes for describing repeated features are presented. From these proposals, a single syntax for support of repeated feature instances is selected. A preprocessor is described that will parse the extended Verilog and translate it to supported Verilog. The challenges in the generation of the preprocessor are given. The paper concludes with a status report on the preprocessor and thoughts for future development.},
address = {Santa Clara, CA, USA},
annote = {Davis1995.A Verilog preprocessor for representing datapath components.pdf
inproceedings
xin\_meng
Computer hardware description languages
Verilog preprocessor;Iterative structures;Muxes;Syntax;Datapaths;Gateway design systems;Very high speed integrated circuits;},
author = {Davis, Brian T and Mudge, Trevor},
booktitle = {Proceedings - IEEE International Verilog HDL Conference},
keywords = {Ada (programming language),Adders,C (programming language),Computer aided design,Computer systems,Davis1995,Digital computers,Integrated circuits,vpp},
mendeley-tags = {Davis1995},
pages = {90--98},
publisher = {IEEE},
title = {{A Verilog preprocessor for representing datapath components}},
year = {1995}
}
@book{sv-ieee,
abstract = {This standard represents a merger of two previous standards: IEEE Std 1364\^{A}¿-2005 Verilog hardware description language (HDL) and IEEE Std 1800-2005 SystemVerilog unified hardware design, specification, and verification language. The 2005 SystemVerilog standard defines extensions to the 2005 Verilog standard. These two standards were designed to be used as one language. Merging the base Verilog language and the SystemVerilog extensions into a single standard provides users with all information regarding syntax and semantics in a single document.},
address = {New York},
author = {IEEE},
file = {::},
publisher = {The Institute of Electrical and Electronics Engineers, Inc.},
title = {{1800-2009 IEEE Standard for SystemVerilog - Unified Hardware Design, Specification, and Verification Language}},
url = {http://ieeexplore.ieee.org/xpl/freeabs\_all.jsp?arnumber=5354441}
}
@misc{McNamara2008,
author = {McNamara, Michael},
title = {{Mac's verilog mode for Emacs}},
url = {http://www.verilog.com/verilog-mode.html},
year = {2008}
}
@book{Keating1998,
address = {New York},
author = {Keating, Michael and Bricaud, Pierre},
file = {::},
publisher = {Springer},
title = {{Reuse Methodology Manual for System-On-A-Chip Designs}},
year = {1998}
}
@misc{JAPISoft2008,
author = {JAPISoft},
title = {{Editix XML Editor}},
url = {http://www.editix.com},
year = {2008}
}
@inproceedings{Schneider2002,
annote = {AUI},
author = {Schneider, K A and Cordy, J R},
booktitle = {Proceedings of the 35th Annual Hawaii International Conference on System Sciences, 2002. HICSS. },
file = {::},
pages = {3656--3665},
title = {{AUI: A programming language for developing plastic interactive software}},
year = {2002}
}
@article{Cesario2002,
abstract = {This paper presents a high-level component-based methodology and design environment for application-specific multicore SoC architectures. Component-based design provides primitives to build complex architectures from basic components. This bottom-up approach allows design-architects to explore efficient custom solutions with best performances. This paper presents a high-level component-based methodology and design environment for application-specific multicore SoC architectures. The system specifications are represented as a virtual architecture described in a SystemC-like model and annotated with a set of configuration parameters. Our component-based design environment provides automatic wrapper-generation tools able to synthesize hardware interfaces, device drivers, and operating systems that implement a high-level interconnect API. This approach, experimented over a VDSL system, shows a drastic design time reduction without any significant efficiency loss in the final circuit.},
author = {Cesario, W and Baghdadi, A and Gauthier, L and Lyonnard, D and Nicolescu, G and Paviot, Y and Yoo, S and Jerraya, A and Diaz-Nava, M},
journal = {Proceedings of the Design Automation Conference (DAC)},
pages = {789--794},
title = {{Component-Based Design Approach for Multicore SoCs}},
year = {2002}
}
@article{Zadeh1988,
author = {Zadeh, L A},
journal = {Computer},
number = {4},
pages = {83--93},
title = {{Fuzzy logic}},
volume = {21},
year = {1988}
}
@book{Synopsys2006,
address = {Mountain View, CA},
author = {Synopsys},
publisher = {Synopsys, Inc.},
title = {{Register Abstraction Layer User Guide}},
year = {2006}
}
@article{Gondow2002,
annote = {ACML},
author = {Gondow, K and Kawashima, H},
file = {::},
journal = {Electronic Notes in Theoretical Computer Science},
number = {3},
pages = {30--49},
title = {{Towards ANSI C program slicing using XML}},
volume = {65},
year = {2002}
}
@article{Kerbyson2003,
abstract = {Performance modelling can be used throughout the development, deployment and maintenance of system hardware and application software. In this work the authors illustrate three uses of performance modelling on large-scale systems: the verification of performance during system installation, the comparison of two large-scale systems, and the prediction of performance on possible future architectures. They detail how a performance model gave an expectation of the performance of ASCI Q, a 20Tflop system recently installed at Los Alamos. A comparison between ASCI Q and the Earth Simulator is also detailed, resulting in the sizing of an AlphaServer system that has the same performance as the Earth Simulator. The modelling approach is application centric. A detailed model is developed for each application of interest based on a static analysis of the code but parametrised in terms of its dynamic behaviour.},
author = {Kerbyson, D J and Hoisie, A and Wasserman, H J},
file = {::},
isbn = {1462-5970},
journal = {Software, IEE Proceedings -},
keywords = {ASCI Q,AlphaServer system,Earth Simulator,digital simulation,geophysics computing,hardware maintenance,large-scale systems performance modelling,parallel machines,performance evaluation,performance verification,program diagnostics,software maintenance,static analysis,supercomputers,system installation},
number = {4},
pages = {214--221},
title = {{Modelling the performance of large-scale systems}},
volume = {150},
year = {2003}
}
@article{Glover1990a,
author = {Glover, F},
file = {::},
journal = {Interfaces},
pages = {74--94},
title = {{Tabu search: a tutorial}},
year = {1990}
}
@inproceedings{Buffenberger2001,
annote = {SSC},
author = {Buffenberger, J and Gruell, K},
booktitle = {Proceedings of the 34th Annual Hawaii International Conference on System Sciences, 2001},
pages = {10},
title = {{A language for software subsystem composition}},
year = {2001}
}
@book{Synopsys2005,
address = {Mountain View, CA},
author = {Synopsys},
file = {::},
publisher = {Synopsys, Inc.},
title = {{OpenVera Language Reference Manual: Testbench}},
year = {2005}
}
@inproceedings{Crew1997,
author = {Crew, R F},
booktitle = {Proceedings of the USENIX Conference on Domain-Specific Languages},
file = {::},
pages = {229--242},
title = {{ASTLOG: A language for examining abstract syntax trees}},
year = {1997}
}
@inproceedings{Lee2006,
abstract = {Domain requirements are fundamental for software reuse and are the product of domain analysis. This paper presents an ontology based approach to elicit and analyze domain requirements. An ontology definition is given out. Problem domain is decomposed into several sub problem domains by using subjective decomposition method. The top-down refinement method is used to refine each sub problem domain into primitive requirements. Abstract stakeholders are used instead of real ones when decomposing problem domain and domain primitive requirements are represented by ontology. Not only domain commonality, variability and qualities are presented, but also reasoning logic is used to detect and handle incompleteness and inconsistency of domain requirements. In addition, a case of 'spot and futures transaction' domain is used to illustrate the approach. \&copy; 2006 IEEE.},
address = {Hangzhou},
annote = {inproceedings
Data structures
Ontology;Stakeholders;Reasoning logic;Transaction;},
author = {Lee, Yuqin and Zhao, Wenyun},
booktitle = {First International Multi-Symposiums on Computer and Computational Sciences, IMSCCS'06},
keywords = {Computational methods,Computer software,Data reduction,Formal logic,Lee2006,Problem solving},
mendeley-tags = {Lee2006},
pages = {364--371},
publisher = {IEEE Computer Society},
title = {{An ontology-based approach for domain requirements elicitation and analysis}},
url = {http://dx.doi.org/10.1109/IMSCCS.2006.252},
volume = {2},
year = {2006}
}
@article{Unveren2004,
author = {Unveren, A and Acan, A},
file = {::},
journal = {Integration, the VLSI Journal},
number = {2},
pages = {121--133},
title = {{An evolutionary constraint satisfaction solution for over the cell channel routing}},
volume = {37},
year = {2004}
}
@book{IAAF2006,
author = {IAAF},
file = {::;::;::;::;::;::;::;::;::;::;::;::;::;::;::;::;::},
title = {{IAAF Medical Manual}},
year = {2006}
}
@book{Unknownd,
author = {陈方灿},
file = {::},
title = {运动拉伸实用手册}
}
@book{IAAF2011,
author = {IAAF},
file = {::},
pages = {38},
title = {{Nutritions for Athletics - A practical guide}},
year = {2011}
}
@book{Corbet2005a,
author = {Corbet, Jonathan and Rubini, Alessandro and Kroah-Hartman, Greg},
file = {::},
pages = {640},
publisher = {O'Reilly Media},
title = {{Linux Device Drivers, 3rd Edition}},
url = {http://www.amazon.com/Linux-Device-Drivers-3rd-Edition/dp/0596005903},
year = {2005}
}
@book{Irvine2010,
author = {Irvine, Kip R.},
file = {::},
pages = {768},
publisher = {Prentice Hall},
title = {{Assembly Language for x86 Processors (6th)}},
year = {2010}
}
@book{Mazidi2002,
author = {Mazidi, Muhammad Ali and Gillispie-Mazidi, Janice},
file = {::;::},
pages = {1024},
publisher = {Prentice Hall},
title = {{80X86 IBM PC and Compatible Computers: Assembly Language, Design, and Interfacing Volumes I \& II}},
year = {2002}
}
@book{Unknowne,
author = {王齐},
file = {::},
title = {{ARM 与 x86}}
}
@book{Mauerer2008a,
author = {Mauerer, Wolfgang},
file = {::},
pages = {1368},
publisher = {Wrox},
title = {{Professional Linux Kernel Architecture}},
url = {http://www.amazon.com/Professional-Linux-Kernel-Architecture-Programmer/dp/0470343435},
year = {2008}
}
@book{Bovet2005a,
author = {Bovet, Daniel P. and Ph.D., Marco Cesati},
file = {::},
pages = {944},
publisher = {O'Reilly Media},
title = {{Understanding the Linux Kernel, Third Edition}},
url = {http://www.amazon.com/Understanding-Linux-Kernel-Third-Edition/dp/0596005652},
year = {2005}
}
@misc{Oracle2010,
author = {Oracle},
file = {::},
title = {{Oracle Solaris ZFS Administration Guide}},
year = {2010}
}
@article{ziv_compression_1978,
abstract = {Compressibility of individual sequences by the class of generalized finite-state information-lossless encoders is investigated. These encoders can operate in a variable-rate mode as well as a fixed-rate one, and they allow for any finite-state scheme of variable-length-to-variable-length coding. For every individual infinite sequence\{$\backslash$textless\}tex\{$\backslash$textgreater\}x\{$\backslash$textless\}/tex\{$\backslash$textgreater\}a quantity\{$\backslash$textless\}tex\{$\backslash$textgreater\}rho(x)\{$\backslash$textless\}/tex\{$\backslash$textgreater\}is defined, called the compressibility of\{$\backslash$textless\}tex\{$\backslash$textgreater\}x\{$\backslash$textless\}/tex\{$\backslash$textgreater\}, which is shown to be the asymptotically attainable lower bound on the compression ratio that can be achieved for\{$\backslash$textless\}tex\{$\backslash$textgreater\}x\{$\backslash$textless\}/tex\{$\backslash$textgreater\}by any finite-state encoder. This is demonstrated by means of a constructive coding theorem and its converse that, apart from their asymptotic significance, also provide useful performance criteria for finite and practical data-compression tasks. The proposed concept of compressibility is also shown to play a role analogous to that of entropy in classical information theory where one deals with probabilistic ensembles of sequences rather than with individual sequences. While the definition of\{$\backslash$textless\}tex\{$\backslash$textgreater\}rho(x)\{$\backslash$textless\}/tex\{$\backslash$textgreater\}allows a different machine for each different sequence to be compressed, the constructive coding theorem leads to a universal algorithm that is asymptotically optimal for all sequences.},
author = {Ziv, J and Lempel, A},
doi = {10.1109/TIT.1978.1055934},
file = {::},
issn = {0018-9448},
journal = {\{IEEE\} Transactions on Information Theory},
keywords = {Source coding,Variable-rate coding},
month = sep,
number = {5},
pages = {530--536},
title = {{Compression of individual sequences via variable-rate coding}},
volume = {24},
year = {1978}
}
@article{ziv_universal_1977,
abstract = {A universal algorithm for sequential data compression is presented. Its performance is investigated with respect to a nonprobabilistic model of constrained sources. The compression ratio achieved by the proposed universal code uniformly approaches the lower bounds on the compression ratios attainable by block-to-variable codes and variable-to-block codes designed to match a completely specified source.},
author = {Ziv, J and Lempel, A},
doi = {10.1109/TIT.1977.1055714},
file = {::},
issn = {0018-9448},
journal = {\{IEEE\} Transactions on Information Theory},
keywords = {Sequential coding,Source coding},
month = may,
number = {3},
pages = {337--343},
title = {{A universal algorithm for sequential data compression}},
volume = {23},
year = {1977}
}
@misc{acpi-spec,
annote = {ACPI},
author = {ACPI},
title = {{Advanced Configuration and Power Interface Specification}},
year = {2009}
}
@misc{arm-etm-arch,
author = {ARM},
file = {::},
title = {{Embedded Trace Macrocell Architecture Specification}},
year = {2007}
}
@misc{arm-a9-trm,
author = {ARM},
edition = {r2p0},
file = {::},
publisher = {ARM},
title = {{Cortex-A9 Technical Reference Manual}},
year = {2009}
}
@book{Intel2012,
author = {Intel},
file = {::},
number = {May},
pages = {4175},
publisher = {Intel},
title = {{Intel ® 64 and IA-32 Architectures Software Developer's Manual}},
year = {2012}
}
@misc{ARM1999,
annote = {AHB ASB APB},
author = {ARM},
file = {::},
title = {{AMBA 2 Specification}},
year = {1999}
}
@misc{ARM,
annote = {The term "TrustZone" is somewhat confusingly used when referring to any of the following:The security extensions to the ARM architecture and the protection type signals in the AMBA3 AXI bus.The TrustZone Software product.TrustZone "support" or TrustZone "enabled". 
What are the security extensions?
The security extensions to ARMv6 and later add the concepts of "secure" and "non-secure" states and a "secure monitor mode" used for switching between the two. A new instruction - SMC, Secure Monitor Call - has been added for switching execution from any privileged mode to the entry point of the secure monitor.
The AMBA3 AXI bus implements two new signals - ARPROT[1] and AWPROT[1], collectively referred to as AxPROT[1]. These indicate, for read and write transactions respectively, whether the current transaction is secure or non-secure.
Note: This does not necessarily indicate the state of the core, as it is possible for the secure world to perform non-secure accesses.

        

        
What is TrustZone Software?
TrustZone Software provides a minimal secure kernel which can be run in parallel with a more fully featured "Rich OS", such as Linux, Symbian or Windows CE - on the same core. It also provides drivers for the Rich OS ("normal world") to communicate with the secure kernel ("secure world").
TrustZone Software uses the security extensions to completely protect the secure kernel, and any secure peripherals, from code running in the normal world. This means that even if an attacker manages to obtain full supervisor privileges in the Rich OS, he cannot gain access to the secure world.
It is supplied with a secure monitor, for switching between secure and normal world, and an example secure first-stage bootloader.
For systems without the security extensions, TrustZone Software Emulation Version can be used to provide a software environment fully compatible with the TrustZone Software on systems with security extensions.
Systems with a separate ARM processor dedicated for security can use the TrustZone Software Multicore - running the secure kernel on its own CPU.
The secure operating system contains a STIP (see http://www.globalplatform.org/) interpreter, which can run "stiplets" in a secure sandbox environment. Using the Native Service API, it is also possible to develop native applications for the secure world.

        

        
What do the terms "TrustZone support" and "TrustZone enabled" mean?
Simply put, these terms refer to cores or peripherals making use of the AxPROT[1] signals to distinguish between secure and non-secure accesses - and modifying their behaviour accordingly.
For example, the L220 Level 2 cache controller stores an extra bit for each cache line describing whether the line was filled as a result of a secure or non-secure access. It will then return a miss if the non-secure world tries to access data that is in the cache, but tagged as secure.},
author = {ARM},
title = {{What is TrustZone?}}
}
@book{PLX2010,
author = {PLX},
file = {::},
pages = {5},
publisher = {PLX},
title = {{PEX 8624 Error Injection White Paper}},
year = {2010}
}
@book{Action,
author = {PLX},
file = {::},
pages = {19},
publisher = {PLX},
title = {{PLX PEX 8648 Family Soft Errors Root Cause and Corrective Action}},
year = {2012}
}
@misc{arm-coresight-guide,
author = {ARM},
edition = {r1p0},
file = {::},
publisher = {ARM},
title = {{CoreSight Technology System Design Guide}},
year = {2007}
}
@misc{arm-gic-arch,
author = {ARM},
file = {::},
title = {{ARM Generic Interrupt Controller Architecture Specifciation}},
year = {2008}
}
@misc{tsz-api,
author = {ARM},
file = {::},
title = {{TrustZone API Specification version 3.0}},
year = {2009}
}
@misc{arm-coresight-trm,
author = {ARM},
file = {::},
publisher = {ARM},
title = {{CoreSight Components Technical Reference Manual}},
year = {2009}
}
@misc{ARM2009f,
author = {ARM},
edition = {r2p0},
file = {::},
publisher = {ARM},
title = {{Cortex-A9 MPCore Technical Reference Manual}},
year = {2009}
}
@misc{tsz-tech,
author = {ARM},
file = {::},
title = {{ARM Security Technology Building a Secure System using TrustZone Technology}},
year = {2009}
}
@misc{amba-axi-spec,
author = {ARM},
file = {::},
title = {{AMBA 4 AXI4-Stream Protocol Specification}},
year = {2010}
}
@misc{ARM2004,
author = {ARM},
file = {::},
title = {{ARM AXI Protocol Specification v1.0}},
year = {2004}
}
@book{PLX2009,
author = {PLX},
file = {::},
number = {September},
pages = {806},
publisher = {PLX},
title = {{ExpressLane PEX 8624-AA, AB and BB 24-Lane/6-Port PCI Express Gen2 Switch Data Book}},
year = {2009}
}
@misc{ARM2004a,
author = {ARM},
file = {::},
title = {{AMBA 3 APB Protocol Specification}},
year = {2004}
}
@misc{ARM2003,
author = {ARM},
file = {::},
title = {{Embedded Cross Trigger Technical Reference Manual}},
year = {2003}
}
@misc{arm-adiv5,
annote = {ADIv5},
author = {ARM},
file = {::},
title = {{ARM Debug Interface v5 Architecture Specification}},
year = {2006}
}
@book{Paper2008,
author = {PLX},
file = {::},
pages = {5},
publisher = {PLX},
title = {{Error Recovery and Fencing Mechanisms for PCI Express Gen 2 Devices}},
year = {2008}
}
@book{Intel2009,
author = {Intel},
file = {::},
number = {March},
publisher = {Intel},
title = {{Intel ® 5520 Chipset and Intel ® 5500 Chipset Datasheet}},
year = {2009}
}
@misc{arm-realview,
author = {ARM},
file = {::},
title = {{RealView Developmemnt Suite Getting Started Guide}},
year = {2007}
}
@misc{arm-pl310-trm,
author = {ARM},
file = {::},
title = {{AMBA Level 2 Cache Controller (L2C-310) Technical Reference Manual}},
year = {2010}
}
@misc{arm-coresight-arch,
author = {ARM},
file = {::},
title = {{CoreSight Architecture Specificiation Rev 1.0}},
year = {2007}
}
@misc{arm-pl310-trm,
author = {ARM},
edition = {r0p0},
file = {::},
publisher = {ARM},
title = {{PL310 Cache Controller Technical Reference Manual}},
year = {2007}
}
@misc{arm-arch,
author = {ARM},
edition = {ARMv7-A an},
file = {::},
publisher = {ARM},
title = {{ARMv7 Architecture Reference Manual}},
year = {2009}
}
@misc{arm-adiv5-arch,
annote = {ADIv5, ADIv5.1
It is an update to ARM?Debug Interface v5 Architecture Specification. It includes errata and new features for ADIv5.

        

        
The new features described in the supplement represent a minor revision of the architecture specification, and hence the architecture version number is v5.1. The new features are backwards compatible with v5.0; the version documented by the "ARM?Debug Interface v5 Architecture Specification."},
author = {ARM},
file = {::},
title = {{ARM Debug Interface v5 Architecture Specification ADIv5.1 Supplement}},
year = {2009}
}
@misc{ARM2010,
author = {ARM},
file = {::},
title = {{ARM AXI Protocol Specification v2.0}},
year = {2010}
}
@misc{arm-daplite-trm,
author = {ARM},
file = {::},
publisher = {ARM},
title = {{CoreSight DAP-Lite Technical Reference Manual}},
year = {2008}
}
@book{Corporation2011,
author = {Intel},
file = {::},
number = {September},
pages = {36},
publisher = {Intel},
title = {{Intel ® 5520 and Intel ® 5500 Chipset Specification Update}},
year = {2011}
}
@misc{ARM2008,
author = {ARM},
file = {::},
title = {{CoreSight Program Flow Trace Architecture Specification}},
year = {2008}
}
@misc{amba-ahb-spec,
author = {ARM},
file = {::},
title = {{AMBA 3 AHB-Lite Protocol Specification}},
year = {2006}
}
@article{Jackson,
author = {Jackson, Mike},
file = {::},
journal = {MindShare},
title = {{Overview of Changes to PCI Express 2.1 and 3.0}}
}
@book{pcifw-spec,
author = {PCISIG},
file = {::},
title = {{PCI Firmware Specification 3.0}},
url = {http://www.pcisig.com/specifications/conventional/pci\_firmware/},
year = {2005}
}
@book{Intel2010a,
author = {Intel},
booktitle = {Computer},
file = {::},
title = {{PHY Interface for the PCI Express * Architecture PCI Express 3.0 Revision .9}},
year = {2010}
}
@book{pci-3,
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{PCI Local Bus Specification Revision 3.0}},
url = {http://www.pcisig.com/specifications/conventional/},
year = {2004}
}
@misc{PCISIG2008,
abstract = {this specification builds on the Single Root IOV Specification to provide native I/O Virtualization in new topologies (such as blade servers) where multiple root complexes share a PCI Express hierarchy.},
annote = {IOV},
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{Multi-Root I/O Virtualization and Sharing Specification Revision 1.0}},
year = {2008}
}
@book{PCISIG2003a,
author = {PCISIG},
pages = {150},
publisher = {PCISIG},
title = {{PCI-to-PCI Bridge Architecture Specification Revision 1.2}},
year = {2003}
}
@misc{Intel2003,
annote = {PIPE},
author = {Intel},
file = {::},
title = {{PHY Interface for the PCI Express Architecture Version 1.00}},
year = {2003}
}
@misc{PCISIG2004a,
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{PCI Bus Power Management Interface Specification Revision 1.2}},
year = {2004}
}
@techreport{Shah,
author = {Shah, Shreyas},
file = {::},
institution = {PLX Technology, Inc.},
title = {{PCI Express and IOV: Maximizing Multi-Processor Systems}}
}
@book{efi-spec,
author = {Intel},
file = {::},
title = {{Extensible Firmware Interface Specification}},
url = {http://developer.intel.com/technology/efi/},
year = {2002}
}
@misc{PCISIG2002,
annote = {conventional PCI},
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{PCI Local Bus Specification Revision 2.3}},
year = {2002}
}
@book{Budruk2003,
author = {Mindshare and Budruk, Ravi and Anderson, Don and Shanley, Tom},
file = {::},
pages = {1120},
publisher = {Addison-Wesley},
title = {{PCI Express System Architecture}},
url = {http://www.amazon.com/Express-System-Architecture-Mindshare-Inc/dp/0321156307/ref=sr\_1\_1?ie=UTF8\&qid=1322115450\&sr=8-1},
year = {2003}
}
@book{pcie-ats,
abstract = {this specification provides a set of transactions for PCI Express components to exchange and use translated addresses in support of native I/O Virtualization.},
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{Address Translation Services Revision 1.1}},
url = {http://www.pcisig.com/specifications/iov/ats/},
year = {2009}
}
@book{sr-iov,
abstract = {this specification provides native I/O Virtualization in existing PCI Express topologies where there is a single root complex.},
annote = {IOV},
author = {PCISIG},
file = {::},
publisher = {PCISIG},
title = {{Single Root I/O Virtualization and Sharing Specification Revision 1.1}},
url = {http://www.pcisig.com/specifications/iov/single\_root/},
year = {2010}
}
@book{pcie-spec-3,
author = {PCISIG},
booktitle = {ReVision},
title = {{PCI Express Base Specification Revision 3.0}},
url = {http://www.pcisig.com/specifications/pciexpress/base3/},
year = {2010}
}
@misc{Cowan2009,
author = {Cowan, Joe},
file = {::},
publisher = {HP},
title = {{PCIe 2.1/PCIe 3.0 Protocol}},
year = {2009}
}
@misc{Sharma2009,
author = {Sharma, Debendra Das},
file = {::},
publisher = {Intel},
title = {{PCIe 3.0 Encoding and PHY Logical}},
year = {2009}
}
@misc{PCISIG2003,
author = {PCISIG},
file = {::},
pages = {176},
publisher = {PCISIG},
title = {{PCI Express to PCI/PCI-X Bridge Specification Revision 1.0}},
year = {2003}
}
@book{uefi-spec,
author = {UEFI},
file = {::},
title = {{Unified Extensible Firmware Interface Specification 2.3}},
url = {http://www.uefi.org},
year = {2010}
}
@book{Altera,
author = {Altera},
file = {::},
keywords = {Altera,MAXII},
publisher = {Altera},
title = {{MAX II Device Handbook}},
year = {2009}
}
@book{Xi2011,
author = {Xilinx},
file = {::},
keywords = {HDL,UG695,behavioral,configuration,flow,implementation,programming,schematic,simulation,timing},
pages = {148},
publisher = {Xilinx},
title = {{ISE In-Depth Tutorial (UG695)}},
volume = {695},
year = {2011}
}
@book{altera-quartus-intro,
author = {Altera},
file = {::},
keywords = {Altera,QuartusII},
publisher = {Altera},
title = {{Introduction to the Quartus II}},
year = {2010}
}
@book{xilinx-xapp586,
author = {Xilinx},
file = {::},
keywords = {586,7 series,Artix,Kintex,PROMGen,SPI,SPI flash,Virtex,flash,xapp586},
pages = {16},
title = {{Using SPI Flash with 7 Series FPGAs (XAPP586)}},
volume = {586},
year = {2012}
}
@book{Subtitle2011,
author = {Xilinx},
file = {::},
keywords = {FPGA,FROM:TO,OFFSET,PERIOD,Xilinx,closure,constraints,timing,ug612},
pages = {242},
publisher = {Xilinx},
title = {{Timing Closure User Guide (UG612)}},
volume = {612},
year = {2011}
}
@book{ug470,
author = {Xilinx},
file = {:home/xin\_meng/Documents/MendeleyDesktop/Xilinx - 2012 - 7 Series FPGAs Configuration User Guide (UG470).pdf:pdf},
keywords = {470,7series,artix7,configuration,jtag,kintex7,virtex7},
pages = {142},
publisher = {Xilinx},
title = {{7 Series FPGAs Configuration User Guide (UG470)}},
url = {http://intradept/Engineering/HifnProjects/panther2/hw/Reference Documents/Xilinx/ug470\_7Series\_Config.pdf},
volume = {470},
year = {2012}
}
@book{quartus-handbook,
author = {Altera},
file = {::},
keywords = {"design entry,design flows",design planning,synthesis},
publisher = {Altera},
title = {{Quartus II Handbook Version 12 . 1 (Volume 1-3)}},
volume = {1},
year = {2012}
}
@book{Xilinx2010a,
author = {Xilinx},
file = {::},
keywords = {PlanAhead,UG633,closure,floorplan,methodology,timing},
pages = {28},
publisher = {Xilinx},
title = {{Xilinx Floorplanning Methodology Guide (UG633)}},
volume = {633},
year = {2010}
}
@book{Xilinx2010,
author = {Xilinx},
file = {::},
pages = {65},
publisher = {Xilinx},
title = {{PlanAhead Software Tutorial Design Analysis and Floorplanning for Performance (UG676)}},
volume = {676},
year = {2010}
}
@book{Xilinx2011,
author = {Xilinx},
file = {::},
keywords = {UG625,configuration constraints,constraint entry,constraint type,constraints,constraints editor,grouping constraints,mapping directives,physical constraints,placement constraints,timing constraints,timing constraints strategies},
pages = {347},
publisher = {Xilinx},
title = {{Xilinx Constraints Guide (UG625)}},
volume = {625},
year = {2011}
}
